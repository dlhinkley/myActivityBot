%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Compass_Set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Alireza
%%CreationDate: 5/13/2014
%%BoundingBox: 0 0 576 576
%%HiResBoundingBox: 0 0 576 576
%%CropBox: 0 0 576 576
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 34458 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA884AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA984AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF8484
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AFA8FD0BAFA9AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA984AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AFA9AF84847D7D537D5259537D7D8484AFAFAF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AFAFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFAFAF7D7D52522752274C2728272727282752527E
%84AFAFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF8484AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF7D7D2727274C274C2752274C27
%2827270527272700282E7E84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFAF84525227522752
%4C522752275227282728272827282728272727527DAFAFAFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%5927272752274C274C272727522852272827270027052727282727002728
%8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AF7D522752285227522752527D7EA8A8FFFFFFCAFFA8A87D53
%2727052827282728275984AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA884AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84A8524B274C275227274C7DA8FD05FF7D7EA8
%A8CAFFCFFFA8CA7D5200FD0527002E7EAF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFAFA95252285227522777A8FD08FF7D05
%7D53FFFFFFCFFD04FFA8522827282728272E7EAF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA984AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84A828272752272727A8FD06FFAFFF
%FFFF7D53277DCFFFCAFFA8FFCAFFCFFF7D5200282727002759AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFAFA828522852274C53FD0C
%FF7EA87D52FFCFFFFFFFCAFFFFFFCFFFFF7D0528272827287DAF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84A82727275227277DFFFFFFAF
%FFFFFFAFFFFD04A87D7D597D7DA8A1A8FFFFA8FFA8FFA8FFFFA8FD042700
%277DAF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AFA8AF524C27522752
%7EFD09FFA87D527D7DA87D847D7D537D53A8A8FFFFFFCFFD04FFCA282827
%2E272E84AFA8AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF524C274C274C
%7EFD07FF7EA8527D7DA8A8FFFF8B59FFA8FFA7A853537DA8A8FFA8FFCAFF
%FFA827272728005284AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF7E4C27
%52274C7DFD07FFA8537DA8AFFFA8FFFFFF603CCFFFFFFFCFFFA87D52A8FF
%FFCAFD04FFA8272827282759AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA884AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%52274C272777FFAFFD05FF7D537DAFFD04FFA8FFA83C13A8A8CFA8FFA8FF
%A8A8527DA8FFA8FFA8FFCFA800FD04278484AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AFAF7E2752275252FD06FFAF7D7DA8FD05FFA8A9A8AF3C3584FFA8A8A8
%FFFFFFCFFF7D7D7DCFFFFFCFFFFF7D0528272752AFAFAF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84A82752274C27A8FFFFAFFFFFFF287DA8A8FFFFA8A8A8FFFFFF
%843C1360CFFFA8A87DA8A8FFA8A87D52A7FFCAFFA8FFA828002827277DAF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AF7D4C2752277DFD06FF7D7EA87D7DFF84FD
%06FF85143635FFCFFFFFFFFD04A852A87D7DCAFFFFFFCAFF7D2727282753
%A8AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF8452274C2752A8FFAFFFFFFF7D7DA8597D
%AF7EFD05FFAFFF363C1335A8FFA8FFA8FFA8A8A87D52FF537DCFFFA8FFA8
%FF28272728278484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AFAF84275227527DFD05FF7E7D
%A8FFA8A8A8FD07FFAF3C363C1384FD04FFCFFFFFA8A8FFFFFF53A8A8FFCF
%FFFFA82728272753AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF524C274C27AFFFFFAFFF
%FF537DFFFFFF7EFFFFFFAFFD04FF8B143C133559FFA8FFCAFFA8FFCFA8A8
%FFA8A852A8CFFFA8FFA8520028272884AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF84522752
%2777FD06FF53FFA8FFA8FD09FF603C3C36133CAEFFCAFFFFFFCAFFCFA8CA
%FFA87D7DFFFFFFCAFF7D2727282784AFAFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA884AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF8484274C2727
%7DFFAFFFFFFF5984FFFFA8A8FFFFAFFFFFFFAFFFAF3C133C133513A8CAFF
%A8FFA8FFA8FFA8A8CFFF7D53A8FFA8FFCFA80527272753AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AF7D4C275228FD05FFAF7DA8FFFFAFFD09FFAF363D3C3C353684FFCF
%FFFFFFCFFFFFFFA8FFFFFF52A8FFFFCFFFCF5227282753A8AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF8459274C2752AFFFAFFFA87D59FFFFFF84FFFFFFAFFFFFFFAFFF603C
%35350C351360CAFFA8FFCAFFA8FFCFA8A8FFA87D52A8CFFFA8FF52272728
%27AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA9AF5252284C52FD05FF7DA8A8FFA8FD0AFF602E52
%5252272835FFFFFFCAFFFFFFCAFFCAA8CFCFA87DA8FD04FF7D2728272884
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84522752277DFD05FF7D84FFFFA8A8FFAFFFFFFFAFFF
%FFAF2752A8FFA7A852057DFFA8FFA8FFA8FFA8FFA8CFCFA852CACAFFCAFF
%7D272727058484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFAFAF28524C4C7DFD05FF7DFFFFFFA8FD09
%FF7D52FFA8525252CF2853FFFFCFFFFFFFCFFFFFA8A8FFCF7DA8FFA8A8FF
%A8272827287DAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84522752277D7DFF7DFF7D7DA8FFA8AF
%FFFFAFFFFFFFAFFFFF527DAF272827277DA727CFCFFFA8FFCAFFA8FFA8CF
%CFFF53A87D527DFF7D282727007EAFAF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84A8285227527D7D7D
%287D597DFFFFFFA8FD09FF4CA87D4C28280552A828A8FFFFFFCAFFFFFFCF
%FFCFFFA87DA87D28A8FFA82728272759AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA884AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF7E52274C27A8
%7D282E287D7DA8FFA8A8FD04FFAFFFFFFFA8527DA8214C272752A827A8CA
%FFA8FFA8FFA8FFA8FFA8A852CA5352A8FF7D270528007D84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%A9AF4C52274C7EA828A828FF7DFFFFFFA8FD09FF7D52FF7D272828CF5252
%CFFFFFFFCFFD04FFA8A8FFA87DA8A8527DFFA8272827287DAFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF8452274C277DFD05FF7D84FFFFA8A8FFFFFFAFFD04FFCA277DFFAF7D
%CA7D277DFFA8FFCAFFA8FFCAFFA7FFCFA852FFCFFFA8FF7D272728278484
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA9AF5252284C52FD05FF7DA8AFFFA8FD0AFF9A27527D7D2E
%274BCAFFFFCAFFFFFFCAFFCAA8CAFFA87DCFFD04FF7D2728272884AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF845327522752A8FFFFFFA87D7DA9AFFFA8FFAFFFFFFFAFFFFF
%FF9A936F4B214B6893A8FFA8FFA8FFA8FFA8A8A8FFA8A852A8CAFFCAFF52
%FD0427AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF59524C5227FD05FFA87DAFFFFFA8FD09FF
%CA93BCFD04939AFFFFFFCFFFFFFFCFFFA8FFFFFF7DA8CAFFFFFFCF522728
%2753AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AFA97E275227277DFD05FF59A8FFFFA8A8FD04FF
%AFFFFFFFA8BC9393699368A1FFFFCAFFA8FFCAFFA8A8CFFFA87DA8FFA8FF
%CFA82728272752AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF84522752277DFD05FFA87DFFAF
%FFA8FD09FF9ABC93936993CAFFCAFFFFFFCAFFFFA8A8FFCF7D7DFFFFFFCA
%FF7D2727282784AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA884AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF5227274C27FD05FFAF537DA9
%FFFF84FFAFFFFFFFAFFFFFC38DB6696F6FFFA8FFA8FFA8FFCAA8A8FFA8A8
%52A8A8FFA8FFA8520027002884AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFAF7E27524C4C7D
%FD05FF7D7DAFFFFFAFA8FD07FFCABC939368C3FFFFCFFD05FFA8FFFFFF7D
%7DA8FD04FFA82728272852AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF845227522752AF
%FFFFFFAFFF597DA87D7EA8A8FFFFFFAFFFFFFF93B6696FA1FFCAFFA8FFCF
%A87DA87DFF7D7DCAFFA8FFCAFF522727270084AFAF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AF534C275227A8FD06FF53847E537EFFA8FD06FFC393936FFFCFFFFFFF
%CAA8A8A8527DA853A8FFFFFFCAFFA8282728275284AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF8484AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF8484274C274C27FD06FFAF52A87DA8FFFF7DA8A8FFAFFFA193689A
%CFFFCAFFA8A8A8FFA8A87D527DFFA8FFA8FFCA520027272759AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFAF7D27524C4C77FD06FF7D52A8FD04FFA8A8A8FFFF
%CA9393A1FFFD04A8CFFFFFFFA87D53A8FD05FFA82728272828AFA8AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF844C275227277DFFFFFFAFFFFFFF527DA8A8AF
%FFFFFFA8A9A89A68A1A8A8A8FFCFFFA8CF7D52A8FFA8FFA8FFFFA8272827
%27007EAFAF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AFAF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF7D4C27522752A8FD07FF
%7D7D7DFD07FF9A93CAFFFFFFCFFFCFA8527DA8FFCFFD05FF282727282753
%A8AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF522727522752A8FFAFFFAF
%FFFFFF597D527DA8A8A9FFFFC393FFA8FFA8A87D7D527DA8FFA8FFA8FFCF
%FF28272727002884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFAFA92852
%4C522752A8FD08FFAF7D7D7D7E7DAFA1A1A8A87D7D527DA8FD05FFCFFFFF
%FF5228272827287DAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84
%2752274C2752A8FD09FF847E7E7D7DA87D7D7DA87D7DFFFFCAFFA8FFCAFF
%CFFF52272728272753AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFAF842752285227527DFD0DFF7D7DCAFFFFFFCFFFCAFFFFFFCAFFFFA827
%282728272752AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF8484AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%847D274C274C272752AFFD04FFAFFFFFFFAFFFA8287DFFCAFFA8FFA8FFA8
%FFCAFFA87D0527272827272EAF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AFAF8427522752284C27A8FD0AFF7D52A8FFCFFFFFFFCF
%FFFFFF7D522728272E272753AFAFAF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF848428272752274C27527DA8FD06FFA87D27A8FF
%FFCAFFFFFFA87D282700282727002759AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AFAF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AFAFAF524C27522852274C27527DA8
%AFFFFFFFA8A8FFFFCFFFA87D522800282728272827527EAFA9AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF595227
%4C274C2752272727FD04527D53532E52272700FD0427282727005984AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AFAF84AFA9AF84AFA9AF84AFA9AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFAFAF847D4C4C27524C52275227522752272827282728272827282728
%272852A8AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF
%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84A85952274C274C2752274C2752272727
%2827272728002727597EAF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AFAFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF84845252284C
%275227522728FD05272827597DA9AFAFA8AF84AFA8AF84AFA8AF84AFA8AF
%84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AF
%A8AF84AFA8AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84
%AF84AF8484597DFD045227522852527D7DA884AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84FD07AF84AFA8AFA9AFAFAFA8AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AFAF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA984AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AFAFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF8484AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AFAFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9
%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF8484AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8AF84AFA8
%AF84AFA8AF84AFA884AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF84AF
%84AF84AF84AF84AF84AF84AF84AF84AFAF85AFA9AF85AFA9AF85AFA9AF85
%AFA9AF85AFA9AF85AFA9AF85AFA9AF85AFA9AF85AFA9AF85AFA9AF85AFAF
%AF84AFAFAF84AFAFAF84AFAFAF84AFAFAF84AFAFAF84AFAFAF84AFAFAF84
%AFAFAF84AFAFAF84AFAFAF84AFAFAFA8AFAFAFA8AFAFAFA8AFAFAFA8AFAF
%AFA8AFAFAFA8AFAFAFA8AFAFAFA8AFAFAFA8AFAFAFA8AFAFA5C7A5C8A5C7
%A5C8A5C7A5C8A5C7A5C8A5C7A5C8A5C7A5C8A5C7A5C8A5C7A5C8A5C7A5C8
%A5C7A5C8A5C7A0C39BC39BC39BC39BC39BC39BC39BC39BC39BC39BC39BC3
%9BC39BC39BC39BC39BC39BC39BC39BC39BC3BDA1597D597D597D597D597D
%597D597D597D597D597D597D597D597D597D597D597D597D597D597D597D
%597DFD2AC6C1B6BDBCBDB6BDBCBDB6BDBCBDB6BDBCBDB6BDBCBDB6BDBCBD
%B6BDBCBDB6BDBCBDB6BDBCBDB6BDBCBDB6BD775352595353525953535259
%535352595353525953535259535352595353525953535259535352595353
%52FD2AC6C1BDB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBC
%B6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB69B2E5352535253525352535253
%525352535253525352535253525352535253525352535253525352535253
%CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6
%C6C6CCC6C6C6CCC6C6C6CCC6C8BCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBC
%BDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD7759537D53
%59537D5359537D5359537D5359537D5359537D5359537D5359537D535953
%7D5359537D535953FD2AC6C1BDB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6
%BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCBCA15253525952
%535259525352595253525952535259525352595253525952535259525352
%59525352595253C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6FEC6FEC6FE
%C6FEC6FEC6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C8BDBDBCBDBCBDBCBDBCBD
%BCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD
%BCBD76595359525953595259535952595359537D535952595359537D5359
%525953595259535952595359525953FD11C6A4747B7575507B7AFD11C6C1
%BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BD949A7076707670BCBCBCB6BDBC
%BCB6BDBCBCB6BDBCBCB6BDBC772E53525352535253525352535259525228
%52274C27282728285352535253525352535253525352535253C6C6CCC6C6
%C6CCC6C6C6CCC6FEC6C77B522752284C2728052827527BC6C6CCC6C6C6CC
%C6C6C6CCC6C6C6C8BDBDBCBDBCBDBCBDBCBDBCBDBCBD9A764C5227522728
%0528275270BDBCBDBCBDBCBDBCBDBCBDBCBDBCBD77595359537D5359537D
%5359537D52522752274C2752272705282752527D5359537D5359537D5359
%537D53FD0DC67B272827282752527D525227270028279FFD0CC6C1BDBCBC
%B6BDBCBCB6BDBCBCBCBD4C4C27282752527D5252272700272776BCBDB6BD
%BCBCB6BDBCBCB6BDBC772E5952535259525352595352274C2728527D7DA8
%7D7E7D52272700272753535352595253525952535259C7C6C6C6C7C6C6C6
%C7C6FE9E762828277DA8FFFFA97DFFCFFF7D5227282775C6FEC6C6C6C7C6
%C6C6C7C6C8BCBDBCBDBCBDBCBDBCBDBC9A275227527DA8FFFF7ECACFFF7D
%7D272705529ABDBCBDBCBDBCBDBCBDBCBD77595259535952595359535327
%4C277DA8FFFFFF7D7DA8FFFFFF7D52272727535359525953595259535952
%FD0AC69E4C272852AFFD04FF7D27A8FFCFFFCFA827270051FD0AC6C1BDB6
%BDBCBCB6BDBCBCB6762727277DA8FFFFFFA82852FFFFFFCFCA5227002870
%BDB6BDBCBCB6BDBCBCB69B2E53525352535259525227274CA8FD05FF7D27
%A8CFFFCFFFA87D0527275352535253525352535253CCC6C6C6CCC6C6C6FE
%9E522752A8FD04FFA9A8A852A8A8FD05FF53270552C6FEC6CCC6C6C6CCC6
%C8BCBDBCBDBCBDBCBDBC9A274C52FD05FFA8A9537DA8CAFD04FFA1522728
%94BDBCBDBCBDBCBDBCBD7759537D5359537D5353275253FD05FF7DA87D7E
%7D7EA8FD04FFA827282753537D5359537D535953FD08C6A4522752A8FFFF
%FF8484537EA8A8A87D52A2A8FFCFFF53270075FD08C6C1BDB6BDBCBCB6BD
%BC9A272852FFFFFFA8A87D7D7D7E7D7D527D7DFFCFFFA82E052794BDBCBC
%B6BDBCBCBCA15253525952535253272752FFFFFFA87D59A8A8FFA8CAFD04
%7DCAFFFFA8272727535259525352595253C6C6C7C6C6C6C7C67B2752A8FF
%FFFF7E7DA8FFAFFFA8FFA8FF7D7DA8FFCFFF5327059FC6C6C6C7C6C6C6C8
%BDBDBCBDBCBDBCBD4C2852FFFFFFA97D7DFFA8FFFFFFA8FFA87D7DFFFFFF
%A828054CBCBDBCBDBCBDBCBD7659535952595359285252FFFFFFA87E7E85
%84FFA8FFA8A8CACA7D7DA8FFFFA805282E5952595359525953FD07C6A527
%277DFFFFA9527DA8A8A8A9A8FFA8A8A8CAA85959FFCAFF282727FD07C6C1
%BDBCBCB6BDBCBC4B2827A8FFFF7E537DFFA8A8A8FFFD05A87D52A8CFFF7D
%270576B6BDBCBCB6BDBC772E53525352592E2727A8FFFF7E527DFF5A35A8
%FFA8FFFD04A85253A8FFCF5300285253525352535253C6C6CCC6C6C6FE75
%2852FFFFFF7D7D7DA9A8FFFFFFCFFFFFFFA884357DA8FFFFA827287BFEC6
%CCC6C6C6C8BDBDBCBDBCBD9A52277DFFFFFF7D52A8A8FD07FFA8A87D7D7D
%FFFFFF522727BDBCBDBCBDBCBD77595359537D5352277DFFFFA8847D7DA8
%AF1360FD06FFA17D7DA8FFFFA8282752537D5359537D53FD06C69E52277E
%FFFF7D7DA8A8AFFFAFFFFFFFCAFFA8601384A87DA8FFCF520051FD06C6C1
%BDBCBCB6BDBC762752A8FFA97D84A884FFFFFFAFFFCAFFA8FFFD04A877FF
%CFA8052770BDBCBCB6BDBC772E59525352532728A8FFFF7D7DFFA8FFA93C
%1360A8FFCAFFCAFFA8FF52A8FFFF52272753525952535259C7C6C6C6C7C6
%9F2752AFFFFF7DA8FFA8FD07FF603C1360A8FF7DA8FFFF7D2727C7C6C6C6
%C7C6C8BCBDBCBDBCBD4C2877FFFFA859FFA8FD09FFCFFFCAA8A87DA8FFCA
%520576BCBDBCBDBCBD775952595359525252FFFFFF7DFFA8FFFFFF3C3C13
%84FD04FFCFFFA8A87DFFFFA8272852595259535952FD06C6512852FFFFA8
%7DFFA8FFAFFFFFFFA884363C1335A8FFA8FF52A8CFA827277AFD05C6C1BD
%B6BDBCBC945227A8FFFF7DA8A8FFFFFFAFFFFFFFA8FFA8FFA8FFA8FF7D7D
%CFFF522727BCB6BDBCBCB69B2E5352595252277DFFFF7DA8A8A9FFFFFF60
%132F0C84CFFFA8FFA8A8A87DA7FFA8280052525352535253CCC6C6C6CCC6
%7627A2FFFF7DA8A8FD05FFA87D7D59353660FFFFCFA87DA8FFFF52007BC6
%C6C6CCC6C8BCBDBCBDBC9B2752A8FFA87DA8FD06FFA27D7D59603C616060
%35847DFFFFA827289ABDBCBDBCBD7759537D5359284C7DFFFFA8A8FD05FF
%60597D7D52A8FFFFCFFFA8FF7DCAFFFF28282E7D537D535953FD06C64B27
%7DFFFF84A8AFA9FFAFFFA8FD047D2E13FFCFFFA8FFA8A8A8FF520551FEFD
%04C6C1BDB6BDBCBD702E27FFFFFF7DFFA8FFFFFFCA76FD047D353C133535
%84A8A2A8FF7D28279ABCBDBCBCBCA152535259524C277DA8A87DFFA8FD04
%FF847D7D277D52FFCFFFCACAA8A87D7DA8520052535352595253C6C6C7C6
%C6C652287D52597DFFA8FD04FFA17D5221775284FD04FFA8A87D52A87D00
%75C6C7C6C6C6C8BDBDBCBDBC9A27527D7D59A8FD04FFC3B5768427287D59
%133584FFA8A87D7D7DCF27289ABDBCBDBCBD76595359525928525352287E
%A8FD05FF7DA82727527DA8FFFFFFA8FFA27D52FF5227287D5359525953FD
%06C627287D7D527EA8A9A8FFFFCA6F7D52285253A8FFA8FFA8CA7DA87DCA
%522751FD05C6C1BDBCBCB6BD70284C7D277D7DFFA8C3939393765928287D
%0C60A8FFCAA8A87D53A8A827009ABCBCB6BDBC772E5352535252277D7DA8
%7DAFA8FD04FFA8527D527D4BCAA8FFCAA8A8A87DA8A852002E5253525352
%53C6C6CCC6C6C67627A2FFFF7DA8A8FFFFFF9AB64B7D527D7DFFCFFFFFCA
%A8A8A8FFCF52057BC6CCC6C6C6C8BDBDBCBDBC9A2752AFFFA87EC39A8D93
%69934452767D52A8FFFFCFFFA8FF7DFFFFA827289ABDBCBDBCBD77595359
%537D524C7DFFFF7EA8FFAFFD04FFA8767D4C6FA1FFFFFFA8FF7DA8FFFF28
%282E7D5359537D53FD06C6512852FFFFA87DFFA8FFA2B56F694577A8FFCA
%FFA8FFA8FF52A8FFCF27287AFD05C6C1BDBCBCB6BD9A4C27A8FFFF76A19B
%A1A1CAA1C37D7E7DCACFFFCAFFA8CAA87DCAFF7D2727BDBCBCB6BDBC772E
%59525352522777FFFF847EAFA8FFFFAFFFFFC38D9368A1FFFFA8A8A87DA8
%FFA8282752525952535259C7C6C6C6C7C69F2752FFFFAF7EFFAFAFBC8D6F
%9AFFFFFFCAFFFFFFA8CFA87DFFFFA22827C7C6C6C6C7C6C8BCBDBCBDBCBD
%4C287DFFFFA884FFAFFD09FFCAFFFFFD04A8FFFF7D0552BCBDBCBDBCBD77
%595259535952524CFFFFFF7DAFA8FD06FFC393939AFFCFA8A87D7DFFFF7D
%002853595259535952FD06C69E2827A8FFFF5984AF9B689AA1FFAFFFA8FF
%A8FFA8A8A8537DFFCF53004BFD06C6C1BDB6BDBCBCB6762752AFFFA853A8
%AFA8FFAFFFFFFFA8FFA8FFFD04A852FFCFA8272770BCB6BDBCBCB69B2E53
%5253525327277DFFFF847DA87DFFFFFFAFFFA8BC689ACFA87DA852A8CAFF
%28272759525352535253CCC6C6C6CCC6C6514C52FFFFFF7DA16FA1FD06FF
%CFFFA8A87DA87DFFFFFF272875FEC6C6C6CCC6C8BCBDBCBDBCBD9A5227A9
%FFFF7E847DA8A8FD09FF7DA87DA8FFFF7D2827BDBCBDBCBDBCBD7759537D
%535953522752FFFFFFA8527DA8FD05FFCABC93A8A87D53A8FFFF7D282753
%5359537D535953FD07C69F274C7EFFFFA84B7DAFAFA8FFA8FFA8CAA7A8A8
%7D52FFCFFF522727FD07C6C1BDB6BDBCBCBCBD4B2752FFFFFF5952A8AFA8
%FFAFFFA8FFFD04A82E7DFFFFA8280052BCBCB6BDBCBCBCA1525352595253
%5252277DFFFFA8537DFFA8A8A8FFA8A8A193A1A8527DCFFFA85200285259
%525352595253C6C6C7C6C6C6FEC6522752FFFFAFAF7DA8AFFFA8FFA8CFA8
%FFA87D7DFFCFFF7D27007BC6C6C6C7C6C6C6C8BDBDBCBDBCBDBC9A274C7D
%FFFFFF7D7EA8FFA8FFA8A8A8FFCFA87DA8A8FFFF5305289ABDBCBDBCBDBC
%BD7659535952595359285227A8FFFFFFA852AFFFFFA9FFCFFFA17659A8CF
%FFFF530028525952595359525953FD08C69E282752AFFFFFFF7D7D7DFD05
%A87D7D7DFFCFFF7D280051FD08C6C1BDBCBCB6BDBCBCB67627277DFFFFFF
%7D7D7DFD05A87D7D52A8CFFFCF7D002770BCB6BDBCBCB6BDBC772E535253
%52535253274C27A8FFFFFFA87D7D7DA87DA8597D7DA8CFFFCA7D00272859
%5253525352535253C6C6CCC6C6C6CCC6FE7B52277DAFFD04FFA87DA87DA8
%7DA8CFFFFFFFA12E27289ECCC6C6C6CCC6C6C6C8BDBDBCBDBCBDBCBDBC52
%2752A8FD04FFA87DA8FD047DA8FFCFFFFF7D05284CBDBCBDBCBDBCBDBCBD
%77595359537D535953594C5227A8FD04FFA8FF7D7DA8A8A8FFFFFFCA7D27
%28287D5359537D5359537D53FD0AC6752827527DFD05FF8453CAFFCFFFFF
%FF532700289EFD09C6C1BDBCBCB6BDBCBCB6BD9A52274C7DFD06FF7D7DFF
%CAFFFFFFA85200274BBDBCBCB6BDBCBCB6BDBC772E595253525952535253
%2727277DA8FD04FFA852FFFFFFCFFF7D2800272853525952535259525352
%59C7C6C6C6C7C6C6C6C7C6FE7B52274C52A8FD04FF53FFFFFFA87D272805
%529EFEC6C6C6C7C6C6C6C7C6C8BCBDBCBDBCBDBCBDBCBD9A52274C52A8A8
%FFFFFF7DA8FFFFCFFF7D2800284CBDBCBDBCBDBCBDBCBDBCBD7759525953
%595259535953594C5227527DA8A8FFA87ECAFFA87D28282728287D535952
%5953595259535952FD0CC69E522727275252FD057D282800270075A4FD0B
%C6C1BDB6BDBCBCB6BDBCBCB6BDBC7627282752527D7D7E7D7D5352272705
%276FBDBCBCB6BDBCBCB6BDBCBCB69B2E53525352535253525352532E4C27
%2727524C7D52522727002700282E53525352535253525352535253CCC6C6
%C6CCC6C6C6CCC6C6C6FEC69F51522828275227270028272851A5C6FEC6CC
%C6C6C6CCC6C6C6CCC6C8BCBDBCBDBCBDBCBDBCBDBCBDBCBD765227522752
%27282727052827769ABDBCBDBCBDBCBDBCBDBCBDBCBD7759537D5359537D
%5359537D53595253525227522728052827282853537D537D5359537D5359
%537D535953FD10C69E7B515127522751517B9EFD0FC6C1BDB6BDBCBCB6BD
%BCBCB6BDBCBCBCBD9A764B52274C2728274C70BDBCBDB6BDBCBCB6BDBCBC
%B6BDBCBCBCA15253525952535259525352595253525952522852282E2853
%525352595253525952535259525352595253C6C6C7C6C6C6C7C6C6C6C7C6
%C6C6C7C6FEC6FEC6C6C6C7C6FEC6FEC6C6C6C7C6C6C6C7C6C6C6C7C6C6C6
%C8BDBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD9ABDBCBDBCBDBCBDBC
%BDBCBDBCBDBCBDBCBDBCBDBCBD7659535952595359525953595259535952
%595359537D5359537D5359525953595259535952595359525953FD2AC6C1
%BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBC
%BCB6BDBCBCB6BDBCBCB6BDBC772E53525352535253525352535253525352
%53525352535253525352535253525352535253525352535253C6C6CCC6C6
%C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CC
%C6C6C6CCC6C6C6C8BDBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD
%BCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD77595359537D5359537D
%5359537D5359537D5359537D5359537D5359537D5359537D5359537D5359
%537D53FD2AC6C1BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBC
%B6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBC772E595253525952535259
%525352595253525952535259525352595253525952535259525352595253
%5259C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6
%C7C6C6C6C7C6C6C6C7C6C6C6C7C6C8BCBDBCBDBCBDBCBDBCBDBCBDBCBDBC
%BDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBDBCBD775952
%595359525953595259535952595359525953595259535952595359525953
%59525953595259535952FD2AC6C1BDB6BDBCBCB6BDBCBCB6BDBCBCB6BDBC
%BCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB6BDBCBCB69B2E5352
%535253525352535253525352535253525352535253525352535253525352
%535253525352535253
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2014-05-13T22:07:11+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2014-05-13T22:07:12+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7vmU6Z2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVjWvfmL5R0Rmjur5ZLlOttb/vZKjsePwqf9YjAS2wwTlyDCdR&#xA;/PyEMV03SWde0lxKFP8AwCBv+JZHicmOi7ykk356+bXqI7WxiHY+nKzfeZKfhjxNg0cfNLIf+chf&#xA;OsZpJa2EwB3JjlVqeFVlA/DLKazpop7pn/OR68lXVNFIX9qW2mqfojdR/wATxpgdL3Fnnl782PI+&#xA;uskUGoC1un2FteD0XqegDEmNj7KxwNEsMgzDFrdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiqS+aPN+i+WrL6zqMtHcH0LZN5ZCOyr4eJO2Alsx4jM7PDvNn5peY9fZ4Y&#xA;5Dp+nNUC1gYgsv8AxZJsW+Ww9sgS7HFp4x8yxbT9M1HUrlbXT7WW7uX+zDAjSOfoUE4G96Do3/OP&#xA;35gagoe5jt9MjO/+lS1en+pCJfuamC2JmE8u/wDnHiz02CKXWvN1tpyzyrbws8ACPK9Ssas80VWP&#xA;E0GNo40vP/OMsc73Mdh5rhubi1k9K4iNrx9OQoHCuVnkKniwPTHx/JeBj+tf845fmDYK0lmLXVIx&#xA;uFt5eElPdZhGPoDHJDNFHAXnOq6Nq2kXRtNUs5rK5H+6p0aNiPEcgKj3GWggsWS+TfzV81eWHSKO&#xA;Y3umrsbC4JZQv/FbbtH9G3scWqeESfQfkvz/AKB5tszLp8np3cYBubGSglj9/wDKX/KH68DgzxmP&#xA;NkuLB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjPnrzxYeVdO9RwJtQnBFn&#xA;a1+0R+0/gi/j0wE024cJmfJ866xrOpaxfy3+ozNPcyndm6AdlUfsqOwGVu2jARFB6j+XP5C6hrCR&#xA;ap5lMlhprUaKyX4bmVexao/dqf8Agj7bHIkoM3vuheXND0GzWz0iyis4AACI1ozU7u5+Jz7sScDW&#xA;Si7m9tLX0vrMyQ+vIsMPNgvOV/soterHsMUPPvzm07R9e07RtHvbuCK3OqRvfs80cbQwm2uI/WId&#xA;l+zI6/TkobKlf5MXF7HBrS6zeW02pTXyqs0U8cn1hYLeKATLxZiefp1+eV5fJti9Gt72zuXnS3mS&#xA;Z7WT0bhUYMY5OIfg9OjcXBp75VTJD6zoWja3ZPY6tZxXtq4IMcyhqV7qeqn3G+EEjktPAfzJ/wCc&#xA;eLrT45dU8o+peWi1aXSm+OdB1/ct/uwD+U/F/rZkQzXzYGDx3TdT1LSNQivrCd7W9t2qkiGjAjYg&#xA;juD0IPXvl7UQCKL6Z/LT8yLLzfp5jlCwazbKDd2w+yw6erHX9knqP2T9BIcDLi4T5M1xanYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUDrmsWejaTc6neNxgtkLMB1Y9FVa92YgDAyhEy&#xA;NB8x+Ytfv9e1efU71qyzH4EH2Y0H2UX2Uf1ysl3EICIoPaPyS/KOJYYPNPmCAPJIBJpVlINlU7rP&#xA;Ip6k9UHYb9aUiSiUnuWRa2Caz581C41MWflFYL9YBLFf3k6sLKOblGqUnRqyNGz0dEUj4vidOJyY&#xA;j3q3N5D1nUonn17Vp9RlClo7Dkbe0LKzFFaCBlQqQEr6hk/aFTsQ8Sr9U8r+R/LeizSW9jaQXEMX&#xA;+iqUiR3lUJwbiAvJucIatOvI9zk8QMpAOLrc3h4ZS7h9vRJ/LHl/yd5k8tWhu7W2mu/R9G4UrG8g&#xA;aNTCGKsG3oAwJHhlee4zLPs7IMmCJ8q+WyLj8hX1h++0DU5tJlLV+qo7TWoBkc09Cb1I9kdR8Cqf&#xA;g2IrUV8fe5tIfTPPWrWOorB5uWGztHVYI7+3WtqbnkQ3rPzcwGoMdGqnJGpIcTAdFtngNdx0ytk8&#xA;X/O/8nYdTtp/M3l+3CarEDJqFnGKC4QbtIigf3o7/wA3+t1vxZK2LCUXz7oWt6joeq2+qafJ6V1b&#xA;NyQ9iOjKw7qw2IzJaZRBFF9ZeU/Mtl5k0G11e02WdaSxVqY5V2dD8j943wOtnHhNJxixdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirxX88fM5nv4PL8DfurSk93Q9ZXHwKf9VDX/ZZCRdho&#xA;8dDiSv8AJnyGvmrzOJLyPnpGmcZ7wHo7E/uoj/rFST7A5Aly5Gn1aAAAAKAdBkGl5h531v8ATOoz&#xA;29te3Fn5f0jnaa3cwF+N3LM8fKzjC7clZUjZ1q4MnFRT1KTAVMvI+qynSZYDpMUcc7GPR7SB45BL&#xA;aqKH1GQGOOJHZq78V5cFAPwYkKypdLurk+pqdy0ldxaW7NFAvsSpEkvgeZ4n+QZG1Yr+Zf1DTdDh&#xA;srK3itjezcnESKnJIhU14gftFczNFG5X3Oh9oM3DiEf5x+78BIPyjlsr7Tr7S7yGO4EEi3ESSqri&#xA;kg4tQMD0KD78r1saILb2BluModxv5s8bSZbf49MuWtz1+rylprdu1OLHlGPD02UeIOYNvQMf846x&#xA;NBoM0a6Olzd25DT2bmsYt+kksZUKZI2/u22HENWRQtQZRG6Cx/yrqI0DULO5kmu38ralGLPTnnaV&#xA;YrFxMyojxtROEj/CjkBlPwj93xpKQv3oD1LKmb5X/Pz8v08ueY11awj4aTrBaQKv2YrkbyIPANXk&#xA;v0gdMy8U7FNUg78hPNjad5hk0Kd6WmqisNTstxGCR/wagr8+OWlxNRCxfc+h8DhOxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2Kqc80cEEk8p4xxKXdvBVFScVAt8pazqc2qard6jMf3l3K8pB7c&#xA;jUL8gNsqd3CNAB9S/kp5aXQ/INizpxu9TH164Pf96B6Q+iILt41yBa5HdMvzGvruDQorXT5ZYtX1&#xA;C5jt9NeAyArLvI0jiIMzRxRRvI68SGAoQa4YsXaXodp5f8rPpj2SXEDRrbRWxYtJcetUelNz9QCr&#xA;yNyPIruzfCNsbsqnek6WlhB8XFrqQL68qrxX4RRUjX9iOMbInYeJJJBKo/AryP8ANHUPrHmJbVT8&#xA;FnEqEf5b/GfwK5ttFGoX3vGdvZuLPw/zR9+7G/yv1L6n5tgjJpHeI9u3zI5r/wAMgGVauNw9zf2P&#xA;l4M4H87Z7jmoe0QuoWCXkQHIxXER521wv2o5KUDDx8COhGx2wgoSi+sl13RHsZ7WH1FLW19Axakd&#xA;F+JYwvpllkWnEFkqrAn+XCDRVB/l1dXH6PvdMvpp5tS0649OeS4eR2eJkU28q+oFKq8YFaADmGI6&#xA;4ZoCz82fLC+Y/IeqWQTldQRm7s6dfWgBcAe7ryT6cccqKyGz47sby4sb23vbZuFxbSJNC/g8bBlP&#xA;3jM1pIt9k6VqEOpaZaahD/dXkMc8f+rIoYfrwOrIo0isUOxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVjn5i3ps/JGsTA0LW5hr/xnIi/43wHk24Bcw+b9Lsmv9TtLFTRrqaOBT7yOF7/ADyt277g&#xA;hijhiSGJQkUahEUdAqigGVtDAr+G+v8A8y1t5pIbyLSrUXNnbyKkSI161ODE+szsgsy3MR7B6fD1&#xA;M+isublca7GjU4WMAm4dQZbgtGrA7fYSNx/s8iqZYFaZlVSzEKqipJ2AAxV85y3/AJm85a9qM3lb&#xA;S21CL13Ml5IwigUE/CvJyoNFptWvtmxOqEAIjo87HsQ5pnJllw8RuhzY3cTebfKGpWl35h0o2kKT&#xA;o0N9Cwli5oeQDFC9K07mvtkI6mMwQ25OxpYiJ4zZjvR/W+nbW5gurWG6gcPBOiyxOOjI4DKR8wc1&#xA;hFPRxNi1XAyS91+r61HINo72IxyeBlh+KOg8Shkqf8kYeiGJTR39j+Y9mYZIbE6xC0d5EgSUSfVm&#xA;9dP98uCymcc2Q0J6noJ/wo6s867HK0vhzzdpi6V5q1jTUFI7O9uIYx/kJIwX/haZnxNhpL6N/Jq/&#xA;N5+XelljV7cSwN/zzlYL/wAJTEuuzipFm2LU7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWF/&#xA;nAzDyFfAGgZ4A3uPWU/wyMuTkaX6w8V/L9Vbz35dDEKP0laGp9p0NPp6ZWXaHk9hj/PPWbO80+21&#xA;aCAC0S+h8zSRqwEV3C1ytrGvxHj6n1Q1Br1+WHgaGT/lzqGqXmsajeaqVbVrm3sXuraEhAnOzgkq&#xA;I2l+yjSspPAmvQ9sElZzYogu9QcNyZp1DdKrSCOi/Lv9ORVG4FYj+bV5c2f5c67NbEiU24iqOoSZ&#xA;1if/AIRzhCY83hf5n3t3pPl/yp5c012t9Gl0iC/nWIlVuLi5Leo0hGz/AGa07cvlkg2RY9+Ul5d6&#xA;hc6t5ZvHafQ7ywuHmt3JZInjAKypXZCD3+XgMcwqj1RDue6/kTe3V3+WGkNcMXaH1oI2PX045nVB&#xA;/sV+H6Mqyj1Mo8mf5WyQV+qm604luJW4YqP5j9XlFPuNcIQxnzLcu3mzyyGR4Hh1BhEHeP41a1uY&#xA;2cIszHiVbYmIEeI6ZKPIoKU+QNW80ap5v15r64v5dMstR1C0txS1FiFhm4xx7AXHNVPXpkpgABAf&#xA;Pn5uf+TK8wf8xbf8RGZGP6Qwlzew/kA7N5DYE1C3swX2HFD+s5Iuv1P1PSsWh2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KsT/NO2Nx5C1VVFWRI5R7enKjH/AIUHAeTdpzUw8B8sXq2HmXSb5jRb&#xA;S9t52PtHKrH9WVO2L6xvvyx8i3y6ot1pSSDWZ47rUv3kymWaHkUequONObbLQGpr1wcRaEss9Rsr&#xA;b8zdXggYTI9pbPKluGlZJow0bxskSPQqnon4qbON+2HorK7c+lrNzHTit1FHcID1Z0rFKf8AYr6X&#xA;35FUxwKg9Y0u11bSrvTLsVtr2F4JadeLqVqK9xWoxSDRfNkev2Fnpo8ped9Gl1az0iWSOw1C1fhd&#xA;W4DEPHv1Wo6E/fQUrhnietF2up7LzY/VEGUDuCO79DGbnzXotvpl1ofkjSJ7IaoPRvdUvGD3UkTG&#xA;npqFJVQ3Q0P0d8lOYG8jfkGGn7Py5TQiYx6yL6g8qaBb+X/LenaNABwsoEjYj9p6Vkf/AGTkt9OQ&#xA;Js24hAvbkm2BUvvT6mq6fAOsRlumP+SkZh4/Mm4qPkcI5IYvrmp2s3nvy1FO/wBWSNp7hEnDRcpR&#xA;E1qiUdVVmL3lF4s1f1zA2KDzTyy8k+VLHWpdbtNMhh1aZpJJbxQebNMSZCd/2iTXImRqk0+RPzIv&#xA;0v8Az95gukPKNr6dUYdCsblFP0hczIDYNR5vd/yMtGg/LyzkIp9ZmnlG1KgSGP8A5l4S67UH1M/x&#xA;aXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhNXsF1HSrywagW7gkgJPb1EK1+iuBMZUQXyhN&#xA;FJDK8MqlJY2KOh6hlNCMrd2C+yfy/wBfTX/Juk6mG5Sy26pcb1PrRfu5a/7NScgWkjdLPzGtRaDT&#xA;fNEajlo0xF4/FWK2lzxSWTcf7qdI5CevFTQjrhj3ITm4ulv7eHU9OR5JrI+oqgCk0biksKODwkqu&#xA;4Ktx5hd9sCptbXMFzbx3EDh4ZVDxuO4O4674qq4FfO/5saV+j/O14QKR3gS6j/56Cj/8lFbNVqY1&#xA;Mvo3YOfxNLHvj6fl+ymE/lZo/wClvPukW5WsUM31qWvTjbgy7/NlC/Tk8YuTX2nl8PBI+VfPZ9X5&#xA;mPCrJpooYnmmcRxRqXkkYgKqqKkknoAMUJXbXKwJNq16jxfWyqopU1jgj5ekJNhwryZ2L04lqE7Z&#xA;LyVIvI0DalqmreaJlBW7cWentxQVgt2bnIOA39SZmA+JvhRaMRhntsgJ95r12HQfLepaxKQFsbd5&#xA;VB/acCkaf7JyFyMRZpJL4dd5JZWdyXkkYsxO5LManM9pfX/lDSDo/lfS9MYcZLW2jSYf8Wcayf8A&#xA;Dk4HVzlZJTjFi7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+efzd8utpPm2a5RaWmp1uYj&#xA;Tb1Cf3y/Pn8X+yyuQdppp8UfczP/AJxz86La31z5VvJOMV6TcaeW6CZV/eR/7NF5D/VPc5AhtmHv&#xA;GpaXp+p231a/gW4t+ayGJ68SyHkvIdxUdDtgtreexzeYfKc0nlWC44xXhP8Ah7VLlfVHAkAQMQCz&#xA;TQL8KqQ/NeJoAr5LnuqbeS9X1y7spbx9NmgdZWW+spFCLI/Ihri0avpkswPqIG4MfiUgk8wQrLrL&#xA;UbK9RmtpQ5Q8ZYyCsiMRXjJGwDo3swBwK8w/PfSuVtpmqqP7t3tZT/rjmn3cWzB1sdgXrfZbP6p4&#xA;/j+g/oYn/wA45aPzv9W1lxtDGlpEfeRvUenyCL9+DAOrL2gy+mMPi9uu760s4xJcyrErHigP2mY9&#xA;FRRuzHso3OZADy7G/M15rZ0iXUYtPkmhgIeDT1oZmI3WeZK7iM/EIRuf2iD8InEC0FJJ9T8yeYTa&#xA;+VlcR36oH1/ULf7EEXIhSjMit60oH7sALQ/GOUdKyoDdWc6To2maRa/VNNt1trYEERJXiOKKgpUm&#xA;nwoBlZNpeI/85Led1Edt5Qs5KuxW61Tj2A3hiPz+2R/q5fgj1YTLzL8pfLB1/wA6Wcbpys7E/XLs&#xA;9uMRBVT/AKz8RTwrmQ42afDF9T4HXuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjH5h&#xA;+Ul8y+XpbaMD6/b/AL6xc7fGBulfBxt9x7YCG7Bl4JX0fOEUt7p98ksZe2vbSUMrbq8csbVHuGVh&#xA;lbtub6w/K78x7Lzloql2WLWrVQuoWvSp6eqg/kb8Dt4VgQ1SFJ55i8n+XvMQj/S9r9YaGOWKBuci&#xA;FBMULleDKOVYkKt1UjamINMWIXWq+ZfJk4029mfVNOuI5pbTUIYxLeRpG6GRprdepQSkeoqslSnJ&#xA;UUGsqBVkkWu+Udas/wBJRTRztEjcZ7dystFMlUjmjKMeRib4Q24p4jBRVA/mD5cnvfJ+oKt7PP8A&#xA;V4/rMUMghYfufj+0IxITwBA+KvzyjURuBdp2Nn8PVQPQmvnsx38nvLk1l5Ds5jdzWrX5e7ljjEPE&#xA;hjxQ8njZ940U/ayrCKi39sZePUHujt+PiydtS8q6TEdQuZkgcApJc3Tl5UAZlZWkkLFQGib4eVPh&#xA;NOmXUS6tjUeveYfNdz+jNIlawtOK3EmqTp6chhYtxNtEaNIVYhRJslU5AuGK5OgOaLtlHl7yZ5e8&#xA;vlX0y3Mc/pejLOzuzSgtzLSVPFnLftUr2+yAMgZEpAS78yfzC0zyVoL3k5WXUZgyadZV+KSSn2iO&#xA;oRK1Y/R1IwwhxFBNPjzUtRv9W1O4v7yRri9vJGkmc7lnc12H6gMzQKan0v8AlJ5HPlfy2Guk46tq&#xA;HGa9qN0FP3cP+wBNfcnAXXZsnEfJnGLU7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q8q/Nn8uHvPU8waPFyulFb+1QbyAD+9QD9oftDv169YSDm6bPXpLybQtd1TQtUg1TS52t7y3aqOO&#xA;hHdWHRlYbEHIueQ+nPy5/OPQvNcUVndsmna7QK1o7UjmbxgY9a/yH4h79cgQ1SjT0LAxYxr/AOX+&#xA;harcx3sMS6fqImjknv7XnBPIiMGKl4HhJNQKM3KngckJKx3zVodp5S0G41WXzDqosIvTi+qhLKdm&#xA;MjQxJGhkhQ0PpIDzkpQfOpG+yYkg2FDy/wCTJ9R0a1M+qavYW8UYt49PlSxidUiQwgFo4paqU6Mr&#xA;7g++U2I7BvnIzkZHmTadaR+X+h2N7Ne3MY1K6MvqWtxeF7iWFSASFaZ5QGMnJuSBftdPFMyxpk+Q&#xA;ZMD/ADG/N/y55Oge35rf62R+606Jh8JPQzsK+mPbqfDvlkMZkxMqfK/mjzRrPmfWJtW1eb1rqXZV&#xA;GyRoPsxxrU8VX+075lxiAKDUTb1T8l/yucyQ+aNbh4otH0q0kG5PUTuD2H7A/wBl4YS4mfL0D2/A&#xA;4jsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzPz/APlHBqjyanoIS31Bvimt&#xA;DRYpT4qeiOfuPt1yJi5eHU8O0uTxa+sL7Trt7W8he2uoj8ccgKsD2O/4HIOwEgRYZ75S/PTzpoKJ&#xA;bXMi6vYIAqw3VfVVR2SYfF/wXLBSDEPUtF/5yM8k3iKNShudMmP2yyevEPk0fxn/AIAYKYmBTDzJ&#xA;+YXkbX9CmsLDXdKLTlfUh1WKRreSMMCyOjekw9jWoOIY8JSXyV5x/L3yd5ai0m7802V08Uksv+jG&#xA;SSONZZCwiiUGZ+KVoKknvkJRlI3TYCApaz/zkj5BskYaet1qkv7HpxGGMn3abgw/4A4RhK8YeV+b&#xA;v+cg/Outo9vpxTRLJ6grbEtOQexnYAj/AGCrlscIDEyLza2tr7ULxYLeKS6vLhvhjQGSR2O/QVJO&#xA;WsCae4flv+SCWTxat5oRJrlaPBpmzxoeoaYjZ2/yR8Pz7C3Dy572D2LFxnYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUr17yxoWvW/oapaJcACkch+GRK/yOKMPvwEM4ZJR&#xA;5F5hr35EXCsZNCv1kTtb3fwsPlIgofpUZExcyGs/nBhOo/l15109iJtJnkUftwATrTx/dF/xwU5E&#xA;c8D1SSXTNShbjNaTRt/K8bKdvmMDYJBJI9L1OaQrDaTSN14pG7Hr7DLmkkJ5pn5aefNSYC30S5UH&#xA;o86/V1p41m4fhiwOWI6s88vf847ajKyy6/qCW0XU21p+8kI8DI4CKfkGxtplqR0et+WfJXlry1B6&#xA;ekWSQyMKSXLfHM/+tIfip7Db2wOLPIZc08xYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;L/r03+T92eRf6Mdd3x/0r2P8i6fuPzd9em/yfux/0Y67vj/pV/kXT9x+bvr03+T92P8Aox13fH/S&#xA;r/Iun7j83fXpv8n7sf8ARjru+P8ApV/kXT9x+bvr03+T92P+jHXd8f8ASr/Iun7j83fXpv8AJ+7H&#xA;/Rjru+P+lX+RdP3H5u+vTf5P3Y/6Mdd3x/0q/wAi6fuPzd9em/yfux/0Y67vj/pV/kXT9x+bvr03&#xA;+T92P+jHXd8f9Kv8i6fuPzd9em/yfux/0Y67vj/pV/kXT9x+aX63rd7Z2XrQ8Q/MDcVFDXN32D7R&#xA;6rVZzDIRw8JPLzDlaTsDTTnRB+bH/wDGut+Mf/Af251/5qbs/wDQto+6X+md/jXW/GP/AID+3H81&#xA;Nf8AQto+6X+md/jXW/GP/gP7cfzU1/0LaPul/pnf411vxj/4D+3H81Nf9C2j7pf6Z3+Ndb8Y/wDg&#xA;P7cfzU1/0LaPul/pnf411vxj/wCA/tx/NTX/AELaPul/pnf411vxj/4D+3H81Nf9C2j7pf6Z3+Nd&#xA;b8Y/+A/tx/NTX/Qto+6X+md/jXW/GP8A4D+3H81Nf9C2j7pf6Z3+Ndb8Y/8AgP7cfzU1/wBC2j7p&#xA;f6ZL9S/MHzFbzIsbRUZORrGDvUjx9sztPIzjZeT7a7NxafNwQBrhB5+9Cf8AKy/M/wDND/yL/ty/&#xA;hdR4MXf8rL8z/wA0P/Iv+3HhXwYu/wCVl+Z/5of+Rf8Abjwr4MXf8rL8z/zQ/wDIv+3HhXwYu/5W&#xA;X5n/AJof+Rf9uPCvgxd/ysvzP/ND/wAi/wC3HhXwYu/5WX5n/mh/5F/248K+DF3/ACsvzP8AzQ/8&#xA;i/7ceFfBi7/lZfmf+aH/AJF/248K+DF3/Ky/M/8AND/yL/tx4V8GL0PPnd7x2KuxV2KoO91jSbE0&#xA;vb2C2NK0mkRD9zEZk4NFmy/3cJS9wJYSyRjzICA/xv5P5hG1mzVjuOcyKKfNiBmUexNbV+Fk/wBK&#xA;Wv8AM4/5w+abW13a3UQltpkniPSSNg6/epIzX5MU4GpAxPns2xkDyVcgydirsVSjzR/xy/8Anov8&#xA;c6b2T/xo/wBQ/fFzuz/7z4MQz0V3jsVdirsVQ0mp6bE3GW7hRvBpFB/E5IQJ6OPPV4YmjOI+IWwa&#xA;vpM7cYL2CVv5UlRj+BwmEhzBWGrwzNRnE+4hF5ByHYq7FXYqlGt/70Rf8Yx/xJs2mj+j4vn/ALTf&#xA;4yP6g/Sl+ZTzzsVdiqjNeWsH97KqHwJ3+7ASAkRJQkuv6REvJ56CtK8HO/0LiJApMCFW21fTLkhY&#xA;blGY9FrRj9BocKKRmKHYq7FXYq9tz52e3diqB1nWtO0awe+1CURQJsO7Mx6Ko7k5laLQ5dTkGPGL&#xA;kfs8z5NeTJGAsvLrnzd5586ai2meWbaaOE/7qt9pONacpptgg+kDtvnp3Zfsrp9OBLIPEyef0j3D&#xA;9f2Olz66UuXpDJdH/wCcadYuEE2t6xHayP8AE8MEbXDVPjIzRiv0HOmFAUHXnIlFh+THlDzHrOq6&#xA;Rp+sX9vfaK7W9y1xbxcCUmkj5KFkBZWKEj296gHiMfiv1Jdq/wCRX5j+VmbUfLl7+kFj+I/U2aG5&#xA;ou+8JNH/ANVWb5ZXmx4c8eHLESHmLZRMoG4lEeS/zklN0ulea0EE4b0xfcfTo9aUnTbjv+0Nh3Hf&#xA;OE7a9juEHJpdx/M/4k9fcfm7TS9pWeHJ8/1vWQQQCDUHcEZ5+Q7dvFKUeaP+OX/z0X+OdN7J/wCN&#xA;H+ofvi53Z/8AefBiGeiu8diqUa75ktNLXgP3t2w+GEHp7se2XY8Rl7nVdo9qw0wr6p9360FoPkz8&#xA;xPPTeraxNFprGn1mYmG1G9Dx2LSU/wAkNmZHHGPJ4zV9p5sx9ctu4cvx72Tax+Qtj5c0CbWvMGvu&#xA;ILcxLNHZWnqkGaVIV4lpELfFIP2cmDbr+NL7f/nHCHVtHh1TQfMQliuFLQLc23BWoxWvOOSSgNP5&#xA;Tj41HcLwMS1ry7+Zf5eyBr+FpNNrxWdSZ7Rt6U5dY69geJOAwhk97n6TtTUac+mVx7juP2fBkPlz&#xA;zVYa3EQn7m7QVlt2NTT+ZT+0MwcuEw9z2vZ3auPVDbaY5j9XeE6yl2jsVSjW/wDeiL/jGP8AiTZt&#xA;NH9HxfP/AGm/xkf1B+lL8ynnlskkcSNJIwVFFSxxUBKrZtc1/UE0zQ7aSeeXZI4hVyB1Zj0RR3JN&#xA;B3OVSm5EcYHN6f5c/wCcaruWNZvMWqC3dt2tbNQ7Cv8ANK/w1+Sn55VaTNC61+V35dWnnOy8oy2+&#xA;qO12sbJqH1iPjzdJW4kCGgYLFX3+jDZAtANteYP+cXbYxM/l7WHWUD4IL9QysfeWILx/5FnAM/ek&#xA;weW6naecPJOojTtetXVDX0w55I6g/ahlFQR7du4GXxmDya5QT2yvre9t1nt25I3UdwfAjxybUQiM&#xA;Vdir23PnZ7dZLLHFE8srBI41LO52AVRUk/LDCBkQBuSgmnj8UGs/mj53SwtGMOmw1KuQSsFspAaV&#xA;h3d9tvGg6Z7L2H2THRYBH/KS3kfPu9w/a87qtSckr6dHvMMvk78vNLt9HsoGFxKheC2jUma6dKKz&#xA;vKQqV3HIswAHtQZuatwSbUCvmvUWtm1fVP0TcR/G+k6VG0ktDWNmlceuzIakrRQvTuK4dkIWfylb&#xA;2jXV1YzajY3s60N2P3sj8v3lJVQStX1JHf7OxYmlcrlLdsjybTXdf0QJJqDprGgxBUm1O3jIuoyx&#xA;4gyxBiH4/t8Ry/yScjQPvZWx78z/AMsNG8+aN+ntB4LrSoXt7hBxW7Vaj05Kgb7URz+rpOEzE0UE&#xA;AiwwD8m/Ol0ZX8qaqzCeAN9RMleY9P7cBrv8NKr4Co8M4L2x7FEf8KxjY/X+iXx5H4O17N1RP7uX&#xA;w/U9azz93CUeaP8Ajl/89F/jnTeyf+NH+ofvi53Z/wDefBiGeiu8S7XtXTS7BptjM/wQIe7HufYd&#xA;csxQ4jTr+0tcNPiMv4jsPemX5N/lWPM0zeZvMSGXTBIfq1u9R9ZlU/Ez/wDFanan7R26Ag7DlsHz&#xA;rNllKRJNyL2C982SNcro/lO1jvbm2dobtiDHa2qxExMpK8SzI9PgQHYfs1U413tCAn0O/wBWhuY7&#xA;/wAwT3Szuk0a2MHK0S4ioU4H05mURvEjgCavLfY9TaoS30O/0gWlro2tSWtragpBZ31vwtSxA4xj&#xA;jHDWor0f5DKrvmG6kdZ+Zobhjo3mq0jsru8pHDBIOdtdJJReCF/tMS3xIyg/MAnAY9QtvC/zg/K+&#xA;byTqMXmTy8WTR5ZfsDc2sp3CVO5jfelf9U9q3QkJiinHklikJwNEI3y7rUWsaXFdpRZPsTxj9mQd&#xA;R/Ee2a7Lj4JU+j9na0anEJjn18imWVuclGt/70Rf8Yx/xJs2mj+j4vn/ALTf4yP6g/Sl+ZTzyUNb&#xA;6jr+uW2h6YnqzzyCKNBsC56sx7KgqSewqcqnJyMcaFvpLQtC8sflj5YRmRpZ5WSO7u405TXEzVoA&#xA;K7KN6CtANz3OVc2JNpLrPmLVL+yjvtUvxbeW9Rcotjp7xSTiEqyMZJh8RCyR/FwpTlTkaZbjx8Vg&#xA;c3D1Wq8HhJ+kminj+VtLlhgk+rahIzJy+sG85yOSFpIJPrD/APEsomac3GQUv+p63pKMNH1KZZC7&#xA;zS6dqxVgUWsjlLly7EkLxLB3ArUjI2DzbFdm8q/mPoF1pl7bMQioZ43AEkEkgJSSGUVVulVddiOv&#xA;cYN4leb5p1vRNU8geb59IviXtiQyTAELLAxPCVR4jcH3BGZkJWLaZRZCCCAQag7gjJtTeKvbc+dn&#xA;t2Gfmvq72HlV4I24y38i29R14ULP94Xj9OdP7I6MZtYJHljHF8eQ++/g4WvycOOu9lX5DeX7TQ/I&#xA;n6ZuSsU+qsbiaZ9uMEZKRKSe3V/9lnrBecmd1eDy0PNUdvqWthpLrVZFuLeI/Yi0+A1SOSJgyH7a&#xA;OVqf3hr9laYbpi9EtbS3tYvTgTipJZySSzMerMxqWY9yciqQ+YfNOk6PJKLmTncGhW2j3c/COv8A&#xA;KPnkoaeeQ7cnE1XaeHTj1H1dw5vPPrGoeetZlhjgSKxtlEtyiHjz4V9ONpaVLk1Ab9kVIGZU4Rwx&#xA;23k6nT6jNrstS9OIbkD7ietsl0J10TX0sI3EOg6wklxpkLsSY7qqmSEFqceYJbh/Ny7nNedx5vTj&#xA;Z4v+eukN5V/Miy8x6cvpjUON4ANh9ZhYCYfJxxZvHkccmCOfDLFLlIEfNRIwkJB67aXMV1aw3MRr&#xA;FOiyRn/JcBh+BzwjLjMJmJ5xNfJ6qMrFpb5o/wCOX/z0X+OdH7J/40f6h++LsOz/AO8+DEM9Fd4w&#xA;/V7a41/zjYaFA1DLLFbKeoVpmHJ/oBFflmdp41G3h/aDUcWfh6QH2nd9K6962heXdP0Py9xgu7h4&#xA;tO04EcvTTiecp3G6RIzciCOXUb5cHm0F5c8h6PBqE156ZdEiSzkDuZFkdAPrFCQCY2lWrhvtuCSN&#xA;hiZKzUAAAAUA2AGRVL3RHRkdQyMCrKwqCDsQQcpb2H675J0ybUDcKJEkuYPq1pMs0iCCZG9WA7cg&#xA;ArV9NqVQ/CNioWYkghXsYR5t8nXuja9we7b1rDU1RePGRGPCQISeJK8JVxOxsLzfNPkZrrSfM2oa&#xA;DdfDIrSRSJ4T2zFWpX2DZLVxuIk7/wBmtQY5jjPKQ+0fst6Fmue3SjW/96Iv+MY/4k2bTR/R8Xz/&#xA;ANpv8ZH9QfpSm7m9C1ll7opI+fb8cySaDz8RZZ9/zjV5cjlu9U8xTLye3C2dqx3ozjnK3z48R9Jz&#xA;GLkTLPpRD5k1jUL95FvtJtD+jdLtCQUeaeMJPMrJxYUYlS3xEBX49cPJrRXmvyzYWPkS5tLWMH0P&#xA;TkZiN2KsFJPgApNB0A2y7Sy/eB1fbMOLTyPdR+1h/wCXfn2CzvY/LOq3SAVK6c8jjkC9CIjU9D+z&#xA;93hk9Zh6jm4vYuslXDIHh6H9FvULq0t7uFobhA8bb0PUEdGB6gjsRmtelYJqGmw+XPq2p2Hp2Eej&#xA;SiHUooEWMXFlPKsjScdx8NWb4VryDBSBlgNoY7/zkh5ettS8nWnmO3AeXTZUrMu4a2uaL1HX94Up&#xA;8z45PCaNImHlHlq6a40eEsavHWNj/q9P+FpmWHGlzTTFD23PnZ7d5f8AnfI4i0eMfYZrhj81EYH/&#xA;ABI533sLEXmPX0f751XaZ+n4/oZYnn918rw+SxokhU6QkH1/lWEr9SEpfaOnIxMr9ftGlc9DEero&#xA;zzeraTBbxXTJAgjjWztgkYA2BeY1qCV+LrscgUJB+ZPmQWMWl6JBcvbXeuXcNrJNEwSWK2ZwsrI5&#xA;2RmrwVu1a9sjxC6cjHp5SxyyV6Y18y+eo/MDak2sQx6RBptxp8DTx3FssqSxyJKqrbzMzMZjMW4H&#xA;nVuRqO+XxkYkEOLqNPDLExkLfRnkry2mgaHFbMB9bl/e3jjvIw+zXwUbDKc+XjlfRr7P0gwYhH+I&#xA;8/egNatrRLrTpQqNLb6ughlIUms7cpE61qPWfttkA5jx/wDO7WbnX/IflfWr61FpeyzzK0G1Yw8a&#xA;ll2eTuo60PiqnbLsQokMZcmceRXZ/JmiFjUiygH0LGAPwGeJ9tgDW5q/1SX3vTaX+6j7greaP+OX&#xA;/wA9F/jmy9k/8aP9Q/fF23Z/958GIZ6K7xjPk/UV0780BqcsDXKWBvbl4VNGK29rLIeOx3UJUDvm&#xA;yxj0h837VP7/ACf1i9p8tecLHzn5o0u/XTZLVLaG9hX1qczKrW0gPRSOCMG/2fzyZFB1ac6p5+8u&#xA;+WNHtkuZvXvzCj/U4iGkLuoYtIakJyY1JJ37VzHy54w583Z6DsnNqd4iofzjy/a8i80/mjfavY6n&#xA;qt2kctvp81tBa6OHl+rRi4Epa5uREUeUr6SovI8at0yWCZmLLLtLRw0+QQib2596VaXr11eLpb2N&#xA;rLC+pxTt+j4mkaLlDKsay26O0kipLyIK1pyU02zY6adEg8nj+3NMJRjKN8V1t1eg6f5D106bPqOs&#xA;zvAIYXmjsIWrI7IpZQ7/ABcenQb/ACODLrByi06LsSR9WUkeXX4otdaTy15lvbLT9PSKC7u9PtX9&#xA;eRI1j9S3uXMhkLENUW60DNUlv5jQ4UrluS9HjxxxjhiKDxjzbGlt+eWorCQwa9Zjx23li5P0r0Lm&#xA;uGe+J2fZBrVw9/6GY5rH0dKNb/3oi/4xj/iTZtNH9HxfP/ab/GR/UH6Uh1r/AI5k3+x/4mMyJ8nQ&#xA;4/qZ5+V3mjzfoPkqNdA0FtYiury4eZ4kkcxuiRIQ5Q9W5x8R/KHPbKaBbZ83rPlFYjp1pI3H121K&#xA;8aZ16vMfrBk5VFerNTIlgnfmeCe48t6rDbp6lxJaTiBAKkyem3AAf61MYSogteXEMkTE8iKfNWo2&#xA;mtHVtLtNO0uK78sTw2zXFw9tG8dxEyK13NPdspZHjkZwx5D06U2phJ5k82+MQAAOT238rNXm1XyJ&#xA;pt1NO1y6+tAJ3JLukE7xRMxNCWaNFJJyiXNuMDHmifNSxG01XkiyI2nEXKt2UGQIe/8AM/b6cYsS&#xA;wbzjqGu3v5b+a4dai9K0gtLU2JMUqM5KxOWLsojb97t8LV8QO9kQOIUxPJ4p5KLfo6Yfs+safPit&#xA;czA48mQ4sXtufOz27z785rBptBtLxRX6rPxf2WVaV/4JVzs/YnUCOolA/wAcftH7CXXdowuAPcXp&#xA;H5bXMHmr8pbSwMxiP1R9KumjoWT019KnxAj4ouJ+Rz0zkXQSG6L8t+ZLePRodTvHKLZxGz1p92WO&#xA;aFjwKt+0gYuvw/zL23wTNbpx45TkIx3J2eNatF5t/M7zNdPpFqz27N6bXUh4QQRKfgQydKjqQtST&#xA;UgZrYiU58Qe5nLT6PTjFM2OvfIvUfK/5VQaW0E2u6pd69fWjrLCtzK5tY5VUcHSIk8mTorOT4imZ&#xA;tkPHZZwlK4Co++2a3d1Ha27TSVKrQBVFWZiaKqjuzE0GRa2HkNqHmvTNJW4Mc+kiTU9URCKerKx4&#xA;xKsgNUYzMeQH2R1BplnS0PLP+cntZW51rRdCgPOW1ikuJkXc8rhlSNfnSImnvlmHYEljPuehaHYf&#xA;o7RbCw2raW8UBp4xoFJ/DPCdbn8bNPJ/PkT8y9VihwxA7ghvNH/HL/56L/HN77J/40f6h++Lsuz/&#xA;AO8+DEM9Fd4xrRNRXy9+aunajK3p2/1pGkkJoBFcL6UjH2Ads2GE3B8+7bw8Gol57/P9r378xbNk&#xA;l0rV2vprK2tpWs7uW2KJKkF7RWdGZX39SOPoNlqclw2KdThy8EroS97HLX8kfJeoPKl1dai8u0qc&#xA;pgvOCT4on4tHUED4WrvyB23GUflou3/0Qajl6fl+1GW35AeTrOb6xY32p2dxxKGWG4jBKN1RgYmV&#xA;lPgRlkMYjycPV9ozz1xiNjqP7WQeXfJujaFJLcW4lub+cBZtQu39Wcov2Yw1AEReyoAPbAZHk4vC&#xA;LvqitYuohwt2J4JxubtgC3CCFudSADXmycadxyPbAEpT5Jb6ymq+YXn5W2q3Ba25caLb2oMKOWAH&#xA;2uBb5U71yUu5AfNdlfDzF+aOo6zHvbvcXNzH/wAYiSkVfoZcs1B4cdO27AxGeqB/mgn9H6WfZrH0&#xA;BKNb/wB6Iv8AjGP+JNm00f0fF8/9pv8AGR/UH6Unv4TNZzRjdmU8R7jcZkyGzoImi9K/5xm16L0N&#xA;X0B2AkDrfW6V3YECKU/Rxj+/MYt8wzezK6PreqaOGbmJjrGmzTyUQqyl7pWeQqKl2kDFa8VdSfYt&#xA;bNrO7gu7ZLiBuUcgqK7EHurDsQdiO2RV5B+cH5cQiKfWNJjdILjk+rWUTMsZO1Z/TUhT/l7e/jmL&#xA;qDOIuJeg7Elp8kvDyxHF/Cf0Hp7vku/ITUI4fJ+o2ty6xDTbuRnZjxVYnjVuRJ7VVjkMBsM+3sfD&#xA;lB74/cnXmS9GpQx6avqCbzFIkMbJWsNlG/GRnVPiBIdz8a0DMFJqMyoivg6IpD/zkRrkOlfl9Ho6&#xA;OTPqsscCKTVzDbkSuxJ3PxKgP+tksIuVomdnjPlW2MGjxlhRpmaUj2Ow/ADMwONLmnGKHtufOz26&#xA;C1nS7fVdKutOuP7q5jKE/wAp6qw91ahzK0Wrlp80csecTf6x8Rs15ICcTE9Xnn5Sec5/Ivmq68v6&#xA;63oabdyCOdm+zDONo5q/yONmPhQ9s9u02phnxxyQNxkHmc2MxNHmHqf5ifl3ca5cfpHTjyidUk1D&#xA;T4pBC140WyFZGDxhxGeNSPiFASBQi0gSFFGn1EsMuKP1d/d7kf5Z8yaHFax2OlzRWSRUEei3gaCW&#xA;JGPwlW41CNXlujezUpkuGmqc5SNyNlNLvVrqITTOtosabu5uXIHwgilIfi+Eg7ZVIbs4cmH65ep5&#xA;iZ9I02V9VvZCoN5byPbWVuFYGQF0LVqtAyh2chiBxWuECt0lNJ73Sfy/8p3Opaxciafm0tzcdJbq&#xA;4avBEDE/FxAUCuwHzOCuI7LyeB+RrHUvPXn+681aqtbeCb6zL14eqP7iFa9owB9A365oPavtQaXT&#xA;eFE/vMgr3R6n9H9jlaDB4k+I8ovcs8keiSjzR/xy/wDnov8AHOm9k/8AGj/UP3xc7s/+8+DEM9Fd&#xA;4xrzrpLXFol7EtZLYESAdTGd6/7E5k6edGnnvaDRHJAZI84c/d+x7J+T/nrT/OHlg6Fq/CbVLOH0&#xA;LqCUAi4t6cFk4n7Xw/C/vv3zLLw0hSmNMvPJ2rPd6tc3b6Xc1t7C8t5jKLcRljEbhJVZ+S20Y5Mo&#xA;KUU8lJ+Iyu2LNrTzAZrR7mCa0v7aOMStcxSmIFd9+LB1WnE1/efdkKVA6jr31SD1L25tNMiZS3rS&#xA;y+q3FaBqLSNa7/zH5HKgG+2Hpo1z5r1L67YNc22kUSDUpbiZ43u19RXmVI0CsvJFALsPshVj4glh&#xA;O6Y1aW/nt+Yll5e8vv5X0pkXVNQi9KWOKgFtasKNUL9lpF+FR4VPhU4oWbKyLzT8vtCew0xrydeN&#xA;xe0YKeqxD7A+mtfuzH1WTilQ6Pcez+hOLFxy+qf3dP1sqzFd+lGt/wC9EX/GMf8AEmzaaP6Pi+f+&#xA;03+Mj+oP0pfmU88lumavqHlHzTaa3Yb+k5fgfsujbSRN7MpP68pnFyIHiD6TuY9C/Mnypa3enXKI&#xA;C4dJmjEskL0pLDJGWX7QPF1OxG/gcrBpiRSW6Tef4Xt/0dqVrNoy6fGsMeqwia5sbgItQZGlB4ij&#xA;Io5MrChVW4jCd0JxdeaLGVIm/S2myQSoxM1TxANKgoJGB6j9vxyEo7M4Gi8+0W1ttP17Um8u2p16&#xA;xv8AgxjhEqWkE8bOql2q6ED1Fdd2YAbCoGUY8XAT0DttZrvzGKPF/eR2Pn5/Yy7y35b0zyTpd1qW&#xA;p3UCLHAommClI4I0LO0cbOzMwZmqSfidtz2AslLidYBT5y88+bLz8xPOhuUV4tLgHpWcTdY7dTUu&#xA;w6c5DufoHbMvHCg1Tkm6IkaKiDiiAKqjoANgMsaV2Kvbc+dnt3YqxHz55Dg8xQC4tysOqwrSOQ/Z&#xA;kXrwen4HtnR9gdvy0UuGXqwy5ju8x+kOHqtKMgsfUx3yZ+bfmryLOuheYLWS702D4VgkNJ4V7ejI&#xA;dnTwU7eBGeq6bU488BPHISiXQ5MJiaOxer235k/lL5qghF/d2lYm9RbXVUWPg5BXf1f3R2PZiMv3&#xA;DSYlj+mP5Fg1bXjr8+kfop5lbR3nm08K0JDcljjjd3+HiKO7cm/lUg5GV9GUfNZ5j/5yA8g6FafV&#xA;tF5avcRLwhgt1MUC02AaVx0/1FbEYSeaTIPI3Hnz82dbW81BzBpULEI4UrbQKT8SwqT8bnvvXxIF&#xA;M1na3ben0ENzxZOkevx7h+A3afSzzH+j3vZ9B0LTtC0uHTdPj9O3hHU7s7H7Tue7H/PbPINdrsmq&#xA;ynLkNyP2eQ8nosWKOOPDHkmOYjalHmj/AI5f/PRf4503sn/jR/qH74ud2f8A3nwYhnorvHEAggio&#xA;PUYqQxDUNH1XQ9Sj1rQJXheBvUQxH95Ee9B+0vt4bHbM3FmB2LxnavYsoEzxC4d3d+x6p5L/AOci&#xA;9LnhjtfNULWl0tFN/boXhf8AynjWrof9UEfLL6eZME98xP8AltrOiald6HPpk2tXa84pInhE7TEK&#xA;oqrvG3Reh9zQmtSCWNFQ03Uvys0XTdOv9Sn0ux1aCGN5lM8M9xHOYwJFrGSzlWJHwrTwyoiRbdmG&#xA;+ef+ck7NYpLLyfA007VX9KXC8UWveKFviY+BenyOWRw97Ez7nnPl7ypqOp6g+ueYmeWWZzNwmJMk&#xA;rk15yV7e38Mqz6gAcMXpuyOwzIjJmFDpHv8Af5eTPcwHsnYqlGt/70Rf8Yx/xJs2mj+j4vn/ALTf&#xA;4yP6g/Sl+ZTzylc20VxC0Uoqp+8HxGJFpBpDaB5h80+SdRN7pE5ELUE0bAtDKo/ZlT+PXwOUShTk&#xA;CQk9k0H/AJyH8oalbfVvMVnJp7yLxnPD6zbMCKGoUc6Hw4HIUgwU9Y87/l5P5w0/XY9XsP0RDBJH&#xA;epIsgkaZqlGWERhmbpUtXbpQjdIJFLEVzUtc/wCcify+0qJ00eObVJqllWCM28Jc9eTyhW38QjZE&#xA;YZHmyMw8Z81+efOn5iXipcsINMiblFZxVW3jPZnJ3kenc/QBmRDGA1ymjNK0q30239KL4nbeSQ9W&#xA;P9PAZY1E2jcUOxV7bnzs9u7FXYqgtU0bStVt/q+o2sdzF2DjdfdWHxKfkcytJrc2nlxYpGJ8v0jk&#xA;fi1zxxmKkLYXf/kzoMzFrO7nta/sNxlUfKvFv+GzqdP7baiIqcYz+w/pH2OFPs6B5EhKJvyGimmR&#xA;5dbbgq8eK2wBO5PUynx8MzP9HZANYd/6/wDx1pPZVn6vs/anmi/kz5N051luI5dSmU1H1lh6YP8A&#xA;xjQKCPZq5qdZ7Ya3MKiRjH9Hn8zf2U5GPs7FHnv72cwwwwxJFCixxIAqRoAqqB0AA2GcxOZkSZGy&#xA;XOAA2C/IpdiqUeaP+OX/AM9F/jnTeyf+NH+ofvi53Z/958GIZ6K7x2KuxVKtR8s6RfsXki9OY9ZY&#xA;jxY/PqD9Iy2GaUXW6rsnBmNkVLvG37Emm8gISTDekDsrx1/EMP1ZcNV5Oon7Mj+GfzH7UFB+VsIY&#xA;G41BmXuscYU/8EWb9WTOs7gwx+y0f4snyH7SyPSfKWh6Wwkt4Oc69J5TzcfLsPoGY888pc3daTsn&#xA;T4DcY3LvO5/HuTjKXZOxV2KpRrf+9EX/ABjH/EmzaaP6Pi+f+03+Mj+oP0pfmU887FWiARQ9MVQc&#xA;+j6fMSTHwY90PH8OmRMAzGQhBT+VbGZQrSyhQa7Fa/qxEaSchK628q6NAQxjMzDoZGqPuFB+GSph&#xA;xFNkRI0CIoRF2VVFAB7AYoXYq7FXYq9tz52e3dirsVdirsVdirsVdirsVdiqUeaP+OX/AM9F/jnT&#xA;eyf+NH+ofvi53Z/958GIZ6K7x2KuxV2KuxV2KuxV2KuxV2KpRrf+9EX/ABjH/EmzaaP6Pi+f+03+&#xA;Mj+oP0pfmU887FXYq7FXYq7FXYq7FXYq7FX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2014-05-13T22:07:12+03:00</xmp:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Compass_Set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>576.000000</stDim:w>
            <stDim:h>576.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:055830CAD1DAE311BF78D37382C7E929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:055830CAD1DAE311BF78D37382C7E929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:055830CAD1DAE311BF78D37382C7E929</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:055830CAD1DAE311BF78D37382C7E929</stEvt:instanceID>
                  <stEvt:when>2014-05-13T22:07:12+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -576 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 576 li
576 576 li
576 0 li
cp
clp
576 0 mo
0 0 li
0 384 li
576 384 li
576 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.729412 .901961 .909804 rgb
ef
288.557 323.289 mo
361.085 323.284 419.881 264.486 419.881 191.954 cv
419.881 119.422 361.085 60.625 288.557 60.6196 cv
288.557 323.289 li
cp
.196078 .207843 .282353 rgb
ef
288.557 323.289 mo
216.027 323.284 157.232 264.486 157.232 191.954 cv
157.232 119.422 216.027 60.625 288.557 60.6196 cv
288.557 323.289 li
cp
.313726 .282353 .32549 rgb
ef
288.556 302.777 mo
349.757 302.773 399.37 253.158 399.37 191.955 cv
399.37 130.751 349.757 81.1362 288.556 81.1323 cv
288.556 302.777 li
cp
.964706 .945098 .917647 rgb
ef
288.556 302.777 mo
227.354 302.773 177.742 253.158 177.742 191.955 cv
177.742 130.751 227.354 81.1362 288.556 81.1323 cv
288.556 302.777 li
cp
.972549 1 1 rgb
ef
295.029 102.952 mo
295.029 103.147 294.995 103.32 294.93 103.476 cv
294.86 103.627 294.77 103.753 294.652 103.857 cv
294.54 103.957 294.405 104.031 294.25 104.078 cv
294.09 104.125 293.934 104.147 293.773 104.147 cv
292.348 104.147 li
292.05 104.147 291.794 104.117 291.577 104.061 cv
291.365 104 291.166 103.892 290.984 103.736 cv
290.798 103.58 290.625 103.368 290.456 103.1 cv
290.287 102.835 290.097 102.489 289.884 102.064 cv
285.809 94.3857 li
285.571 93.9268 285.333 93.4331 285.085 92.9048 cv
284.839 92.3765 284.622 91.8608 284.427 91.3628 cv
284.401 91.3628 li
284.437 91.9736 284.462 92.5796 284.479 93.186 cv
284.497 93.7881 284.505 94.416 284.505 95.0566 cv
284.505 103.654 li
284.505 103.736 284.483 103.814 284.437 103.883 cv
284.388 103.948 284.306 104.004 284.193 104.052 cv
284.081 104.1 283.925 104.134 283.73 104.161 cv
283.535 104.187 283.284 104.199 282.98 104.199 cv
282.682 104.199 282.436 104.187 282.24 104.161 cv
282.045 104.134 281.894 104.1 281.786 104.052 cv
281.673 104.009 281.595 103.948 281.556 103.883 cv
281.513 103.814 281.491 103.736 281.491 103.654 cv
281.491 88.894 li
281.491 88.4956 281.608 88.1968 281.842 87.9976 cv
282.071 87.7988 282.357 87.6987 282.7 87.6987 cv
284.488 87.6987 li
284.808 87.6987 285.081 87.7246 285.302 87.7813 cv
285.523 87.8374 285.718 87.9282 285.891 88.0542 cv
286.064 88.1797 286.229 88.3569 286.381 88.5825 cv
286.532 88.8037 286.688 89.085 286.849 89.4141 cv
290.04 95.4209 li
290.227 95.7847 290.408 96.144 290.59 96.4946 cv
290.772 96.8457 290.949 97.1963 291.114 97.5474 cv
291.283 97.8979 291.447 98.2441 291.607 98.582 cv
291.772 98.9248 291.929 99.2622 292.08 99.6001 cv
292.093 99.6001 li
292.066 99.0068 292.045 98.3872 292.032 97.7461 cv
292.02 97.1016 292.015 96.4863 292.015 95.9014 cv
292.015 88.1924 li
292.015 88.1104 292.041 88.0327 292.093 87.9629 cv
292.141 87.8984 292.228 87.8374 292.344 87.7861 cv
292.466 87.7334 292.621 87.6987 292.816 87.6772 cv
293.011 87.6553 293.262 87.647 293.565 87.647 cv
293.855 87.647 294.099 87.6553 294.293 87.6772 cv
294.487 87.6987 294.635 87.7334 294.743 87.7861 cv
294.848 87.8374 294.926 87.8984 294.965 87.9629 cv
295.008 88.0327 295.029 88.1064 295.029 88.1924 cv
295.029 102.952 li
cp
.196078 .207843 .282353 rgb
ef
293.6 292.906 mo
293.6 293.773 293.439 294.526 293.119 295.181 cv
292.794 295.83 292.36 296.371 291.811 296.81 cv
291.257 297.242 290.615 297.571 289.879 297.792 cv
289.143 298.014 288.355 298.121 287.515 298.121 cv
286.947 298.121 286.423 298.074 285.934 297.979 cv
285.449 297.883 285.02 297.771 284.647 297.637 cv
284.275 297.507 283.963 297.368 283.712 297.221 cv
283.461 297.073 283.283 296.943 283.17 296.835 cv
283.063 296.723 282.985 296.563 282.937 296.354 cv
282.89 296.146 282.868 295.852 282.868 295.462 cv
282.868 295.197 282.876 294.981 282.894 294.804 cv
282.911 294.627 282.937 294.483 282.976 294.371 cv
283.015 294.263 283.067 294.185 283.127 294.137 cv
283.192 294.09 283.266 294.067 283.353 294.067 cv
283.469 294.067 283.638 294.137 283.855 294.28 cv
284.072 294.419 284.349 294.574 284.687 294.743 cv
285.024 294.912 285.431 295.068 285.903 295.207 cv
286.372 295.35 286.917 295.419 287.537 295.419 cv
287.943 295.419 288.307 295.371 288.628 295.275 cv
288.952 295.176 289.225 295.042 289.45 294.864 cv
289.676 294.687 289.845 294.471 289.966 294.211 cv
290.083 293.95 290.144 293.661 290.144 293.34 cv
290.144 292.968 290.044 292.647 289.84 292.383 cv
289.637 292.114 289.372 291.88 289.043 291.673 cv
288.719 291.465 288.346 291.27 287.93 291.088 cv
287.519 290.906 287.09 290.716 286.648 290.512 cv
286.207 290.309 285.777 290.079 285.366 289.819 cv
284.951 289.563 284.578 289.256 284.253 288.896 cv
283.924 288.537 283.66 288.113 283.457 287.619 cv
283.253 287.129 283.153 286.541 283.153 285.856 cv
283.153 285.072 283.301 284.38 283.591 283.782 cv
283.881 283.188 284.275 282.695 284.769 282.301 cv
285.267 281.907 285.847 281.612 286.518 281.417 cv
287.19 281.223 287.904 281.127 288.657 281.127 cv
289.043 281.127 289.433 281.157 289.823 281.218 cv
290.213 281.274 290.577 281.357 290.914 281.457 cv
291.252 281.561 291.551 281.673 291.814 281.798 cv
292.075 281.929 292.248 282.032 292.335 282.119 cv
292.417 282.201 292.473 282.275 292.504 282.331 cv
292.534 282.392 292.56 282.47 292.582 282.569 cv
292.604 282.665 292.616 282.786 292.625 282.938 cv
292.634 283.085 292.638 283.267 292.638 283.487 cv
292.638 283.73 292.634 283.938 292.62 284.107 cv
292.607 284.275 292.586 284.414 292.556 284.526 cv
292.525 284.635 292.481 284.717 292.43 284.765 cv
292.374 284.817 292.3 284.843 292.205 284.843 cv
292.113 284.843 291.967 284.782 291.764 284.666 cv
291.56 284.548 291.309 284.419 291.014 284.275 cv
290.715 284.137 290.373 284.011 289.982 283.899 cv
289.594 283.782 289.169 283.726 288.701 283.726 cv
288.337 283.726 288.021 283.769 287.749 283.86 cv
287.48 283.946 287.255 284.072 287.073 284.228 cv
286.891 284.384 286.752 284.57 286.666 284.791 cv
286.575 285.012 286.531 285.246 286.531 285.488 cv
286.531 285.852 286.631 286.168 286.83 286.432 cv
287.03 286.701 287.298 286.939 287.631 287.147 cv
287.965 287.35 288.346 287.545 288.771 287.728 cv
289.19 287.909 289.623 288.104 290.065 288.303 cv
290.507 288.507 290.94 288.736 291.36 288.996 cv
291.785 289.256 292.161 289.563 292.495 289.923 cv
292.824 290.282 293.093 290.702 293.296 291.191 cv
293.5 291.677 293.6 292.249 293.6 292.906 cv
cp
ef
390.411 199.856 mo
390.411 200.109 390.402 200.317 390.38 200.489 cv
390.357 200.658 390.327 200.795 390.282 200.897 cv
390.238 201.003 390.185 201.079 390.119 201.127 cv
390.057 201.176 389.981 201.198 389.906 201.198 cv
381.479 201.198 li
381.195 201.198 380.957 201.114 380.762 200.946 cv
380.566 200.777 380.47 200.503 380.47 200.122 cv
380.47 185.475 li
380.47 185.094 380.566 184.819 380.762 184.651 cv
380.957 184.483 381.195 184.398 381.479 184.398 cv
389.866 184.398 li
389.941 184.398 390.012 184.42 390.074 184.464 cv
390.132 184.509 390.185 184.584 390.229 184.691 cv
390.27 184.802 390.305 184.939 390.327 185.107 cv
390.349 185.28 390.357 185.492 390.357 185.754 cv
390.357 185.998 390.349 186.202 390.327 186.375 cv
390.305 186.542 390.273 186.68 390.229 186.781 cv
390.185 186.888 390.132 186.964 390.074 187.012 cv
390.012 187.061 389.941 187.083 389.866 187.083 cv
383.872 187.083 li
383.872 191.177 li
388.923 191.177 li
389.002 191.177 389.073 191.199 389.135 191.248 cv
389.201 191.296 389.254 191.367 389.299 191.469 cv
389.344 191.566 389.374 191.7 389.396 191.872 cv
389.419 192.041 389.428 192.244 389.428 192.484 cv
389.428 192.736 389.419 192.945 389.396 193.108 cv
389.374 193.272 389.344 193.405 389.299 193.503 cv
389.254 193.604 389.201 193.676 389.135 193.715 cv
389.073 193.76 389.002 193.782 388.923 193.782 cv
383.872 193.782 li
383.872 198.513 li
389.906 198.513 li
389.985 198.513 390.057 198.536 390.119 198.584 cv
390.185 198.633 390.238 198.708 390.282 198.814 cv
390.327 198.917 390.357 199.054 390.38 199.222 cv
390.402 199.395 390.411 199.604 390.411 199.856 cv
cp
ef
197.482 201.21 mo
197.434 201.401 197.368 201.557 197.283 201.67 cv
197.201 201.785 197.075 201.874 196.908 201.932 cv
196.74 201.993 196.524 202.033 196.264 202.054 cv
195.999 202.074 195.665 202.083 195.261 202.083 cv
194.809 202.083 194.442 202.074 194.169 202.054 cv
193.892 202.033 193.676 201.993 193.517 201.932 cv
193.358 201.874 193.244 201.785 193.17 201.67 cv
193.102 201.557 193.044 201.401 193.004 201.21 cv
190.53 191.414 li
190.505 191.414 li
188.167 201.21 li
188.126 201.394 188.072 201.544 188 201.659 cv
187.93 201.772 187.816 201.862 187.661 201.928 cv
187.505 201.993 187.294 202.033 187.029 202.054 cv
186.761 202.074 186.41 202.083 185.974 202.083 cv
185.509 202.083 185.143 202.074 184.87 202.054 cv
184.596 202.033 184.376 201.993 184.217 201.932 cv
184.059 201.874 183.944 201.785 183.871 201.67 cv
183.801 201.557 183.741 201.401 183.696 201.21 cv
180.187 187.725 li
180.114 187.436 180.077 187.212 180.068 187.049 cv
180.061 186.886 180.105 186.76 180.203 186.674 cv
180.305 186.584 180.468 186.531 180.692 186.511 cv
180.921 186.491 181.234 186.482 181.638 186.482 cv
182.013 186.482 182.306 186.486 182.526 186.499 cv
182.746 186.511 182.909 186.54 183.019 186.584 cv
183.129 186.629 183.207 186.69 183.248 186.775 cv
183.284 186.857 183.317 186.975 183.341 187.126 cv
186.056 198.965 li
186.067 198.965 li
188.883 187.212 li
188.916 187.061 188.957 186.935 189.01 186.841 cv
189.059 186.743 189.148 186.67 189.271 186.621 cv
189.393 186.568 189.564 186.531 189.78 186.511 cv
189.992 186.491 190.281 186.482 190.64 186.482 cv
191.023 186.482 191.324 186.491 191.553 186.507 cv
191.781 186.523 191.957 186.556 192.079 186.609 cv
192.201 186.662 192.291 186.735 192.347 186.829 cv
192.405 186.922 192.445 187.053 192.478 187.212 cv
195.396 198.965 li
195.42 198.965 li
198.11 187.163 li
198.134 187.037 198.167 186.927 198.204 186.833 cv
198.244 186.743 198.321 186.67 198.432 186.621 cv
198.546 186.568 198.705 186.531 198.913 186.511 cv
199.12 186.491 199.41 186.482 199.785 186.482 cv
200.139 186.482 200.412 186.491 200.608 186.511 cv
200.804 186.531 200.942 186.584 201.032 186.674 cv
201.118 186.76 201.158 186.89 201.146 187.061 cv
201.134 187.232 201.093 187.464 201.02 187.762 cv
197.482 201.21 li
cp
ef
288.63 107.589 mo
288.63 117.321 li
288.347 117.321 li
288.347 107.589 li
288.63 107.589 li
cp
ef
266.795 110.438 mo
269.308 119.816 li
269.042 119.887 li
266.53 110.508 li
266.795 110.438 li
cp
ef
246.429 118.825 mo
251.295 127.248 li
251.047 127.389 li
246.199 118.967 li
246.429 118.825 li
cp
ef
215.499 149.667 mo
223.921 154.515 li
223.78 154.763 li
215.357 149.896 li
215.499 149.667 li
cp
ef
207.041 169.998 mo
216.418 172.51 li
216.348 172.775 li
206.97 170.263 li
207.041 169.998 li
cp
ef
204.121 191.815 mo
213.854 191.815 li
213.854 192.098 li
204.121 192.098 li
204.121 191.815 li
cp
ef
206.97 213.667 mo
216.348 211.138 li
216.418 211.403 li
207.041 213.933 li
206.97 213.667 li
cp
ef
215.357 234.016 mo
223.78 229.168 li
223.921 229.397 li
215.499 234.264 li
215.357 234.016 li
cp
ef
246.199 264.947 mo
251.047 256.542 li
251.295 256.666 li
246.429 265.088 li
246.199 264.947 li
cp
ef
266.53 273.404 mo
269.042 264.026 li
269.308 264.097 li
266.795 273.475 li
266.53 273.404 li
cp
ef
310.199 273.475 mo
307.67 264.097 li
307.935 264.026 li
310.465 273.404 li
310.199 273.475 li
cp
ef
330.549 265.088 mo
325.699 256.666 li
325.93 256.542 li
330.796 264.947 li
330.549 265.088 li
cp
ef
361.478 234.264 mo
353.073 229.397 li
353.197 229.168 li
361.62 234.016 li
361.478 234.264 li
cp
ef
369.937 213.933 mo
360.559 211.403 li
360.63 211.138 li
370.007 213.667 li
369.937 213.933 li
cp
ef
370.007 170.263 mo
360.63 172.775 li
360.559 172.51 li
369.937 169.998 li
370.007 170.263 li
cp
ef
361.62 149.896 mo
353.197 154.763 li
353.073 154.515 li
361.478 149.667 li
361.62 149.896 li
cp
ef
330.796 118.967 mo
325.93 127.389 li
325.699 127.248 li
330.549 118.825 li
330.796 118.967 li
cp
ef
310.465 110.508 mo
307.953 119.887 li
307.688 119.816 li
310.199 110.438 li
310.465 110.508 li
cp
ef
288.347 276.324 mo
288.347 266.609 li
288.63 266.609 li
288.63 276.324 li
288.347 276.324 li
cp
ef
225.001 128.486 mo
225.602 127.867 226.593 127.867 227.212 128.486 cv
227.814 129.088 227.814 130.079 227.212 130.698 cv
226.593 131.3 225.602 131.3 225.001 130.698 cv
224.399 130.079 224.399 129.088 225.001 128.486 cv
cp
ef
225.054 255.498 mo
224.452 254.878 224.452 253.887 225.054 253.286 cv
225.673 252.666 226.664 252.666 227.266 253.286 cv
227.884 253.887 227.884 254.878 227.266 255.498 cv
226.664 256.099 225.673 256.099 225.054 255.498 cv
cp
ef
352.065 255.427 mo
351.445 256.046 350.455 256.046 349.853 255.427 cv
349.251 254.825 349.251 253.834 349.853 253.215 cv
350.455 252.613 351.445 252.613 352.065 253.215 cv
352.666 253.834 352.666 254.825 352.065 255.427 cv
cp
ef
352.013 128.433 mo
352.613 129.035 352.613 130.025 352.013 130.627 cv
351.392 131.247 350.402 131.247 349.8 130.627 cv
349.181 130.025 349.181 129.035 349.8 128.433 cv
350.402 127.814 351.392 127.814 352.013 128.433 cv
cp
ef
225.001 128.486 mo
225.602 127.867 226.593 127.867 227.212 128.486 cv
227.814 129.088 227.814 130.079 227.212 130.698 cv
226.593 131.3 225.602 131.3 225.001 130.698 cv
224.399 130.079 224.399 129.088 225.001 128.486 cv
cp
ef
210.739 147.083 mo
211.164 146.34 212.119 146.092 212.88 146.517 cv
213.623 146.942 213.871 147.897 213.446 148.658 cv
213.004 149.401 212.048 149.649 211.305 149.224 cv
210.562 148.799 210.314 147.844 210.739 147.083 cv
cp
ef
201.768 168.759 mo
201.998 167.927 202.847 167.432 203.696 167.644 cv
204.528 167.874 205.023 168.724 204.794 169.555 cv
204.563 170.387 203.714 170.882 202.882 170.67 cv
202.051 170.44 201.556 169.591 201.768 168.759 cv
cp
ef
201.803 215.242 mo
201.573 214.412 202.069 213.544 202.9 213.332 cv
203.732 213.102 204.599 213.597 204.812 214.429 cv
205.042 215.26 204.546 216.127 203.714 216.34 cv
202.882 216.57 202.015 216.074 201.803 215.242 cv
cp
ef
210.774 236.901 mo
210.35 236.157 210.597 235.185 211.358 234.759 cv
212.101 234.335 213.057 234.583 213.481 235.326 cv
213.906 236.086 213.658 237.042 212.915 237.466 cv
212.172 237.892 211.217 237.644 210.774 236.901 cv
cp
ef
225.054 255.498 mo
224.452 254.878 224.452 253.887 225.054 253.286 cv
225.673 252.666 226.664 252.666 227.266 253.286 cv
227.884 253.887 227.884 254.878 227.266 255.498 cv
226.664 256.099 225.673 256.099 225.054 255.498 cv
cp
ef
243.668 269.759 mo
242.925 269.317 242.66 268.361 243.084 267.618 cv
243.527 266.875 244.482 266.609 245.225 267.052 cv
245.968 267.477 246.234 268.432 245.792 269.176 cv
245.367 269.918 244.412 270.184 243.668 269.759 cv
cp
ef
265.326 278.713 mo
264.495 278.483 264 277.633 264.229 276.802 cv
264.441 275.971 265.309 275.475 266.141 275.705 cv
266.972 275.917 267.467 276.784 267.238 277.616 cv
267.025 278.447 266.158 278.942 265.326 278.713 cv
cp
ef
311.81 278.695 mo
310.979 278.925 310.129 278.43 309.898 277.581 cv
309.687 276.749 310.165 275.899 311.014 275.669 cv
311.845 275.458 312.694 275.952 312.925 276.784 cv
313.137 277.616 312.642 278.464 311.81 278.695 cv
cp
ef
333.469 269.706 mo
332.725 270.149 331.77 269.883 331.345 269.14 cv
330.902 268.397 331.168 267.441 331.911 266.999 cv
332.653 266.575 333.609 266.822 334.034 267.583 cv
334.477 268.327 334.211 269.282 333.469 269.706 cv
cp
ef
352.065 255.427 mo
351.445 256.046 350.455 256.046 349.853 255.427 cv
349.251 254.825 349.251 253.834 349.853 253.215 cv
350.455 252.613 351.445 252.613 352.065 253.215 cv
352.666 253.834 352.666 254.825 352.065 255.427 cv
cp
ef
366.327 236.83 mo
365.902 237.573 364.946 237.821 364.187 237.396 cv
363.442 236.971 363.194 236.016 363.619 235.255 cv
364.044 234.512 365 234.264 365.761 234.689 cv
366.504 235.131 366.752 236.086 366.327 236.83 cv
cp
ef
375.28 215.154 mo
375.068 216.003 374.201 216.499 373.369 216.268 cv
372.537 216.039 372.042 215.189 372.272 214.358 cv
372.484 213.525 373.352 213.031 374.184 213.243 cv
375.015 213.473 375.51 214.322 375.28 215.154 cv
cp
ef
375.263 168.671 mo
375.493 169.502 374.997 170.369 374.166 170.582 cv
373.334 170.812 372.467 170.316 372.255 169.484 cv
372.024 168.653 372.521 167.786 373.352 167.574 cv
374.184 167.344 375.05 167.839 375.263 168.671 cv
cp
ef
366.291 147.012 mo
366.716 147.773 366.469 148.729 365.708 149.153 cv
364.964 149.578 364.009 149.331 363.585 148.587 cv
363.142 147.826 363.406 146.871 364.15 146.446 cv
364.894 146.021 365.85 146.27 366.291 147.012 cv
cp
ef
352.013 128.433 mo
352.613 129.035 352.613 130.025 352.013 130.627 cv
351.392 131.247 350.402 131.247 349.8 130.627 cv
349.181 130.025 349.181 129.035 349.8 128.433 cv
350.402 127.814 351.392 127.814 352.013 128.433 cv
cp
ef
333.396 114.171 mo
334.141 114.596 334.405 115.552 333.964 116.295 cv
333.539 117.038 332.584 117.303 331.84 116.861 cv
331.097 116.437 330.831 115.481 331.274 114.738 cv
331.698 113.995 332.653 113.729 333.396 114.171 cv
cp
ef
311.739 105.2 mo
312.571 105.43 313.065 106.279 312.836 107.111 cv
312.624 107.942 311.757 108.438 310.925 108.226 cv
310.093 107.996 309.598 107.146 309.828 106.315 cv
310.04 105.466 310.907 104.97 311.739 105.2 cv
cp
ef
265.256 105.217 mo
266.087 105.005 266.937 105.501 267.167 106.333 cv
267.379 107.164 266.883 108.014 266.052 108.244 cv
265.22 108.456 264.371 107.96 264.141 107.128 cv
263.929 106.297 264.424 105.448 265.256 105.217 cv
cp
ef
243.597 114.207 mo
244.341 113.765 245.296 114.03 245.721 114.773 cv
246.164 115.516 245.897 116.472 245.155 116.914 cv
244.412 117.338 243.456 117.091 243.014 116.33 cv
242.589 115.587 242.854 114.632 243.597 114.207 cv
cp
ef
225.001 128.486 mo
225.602 127.867 226.593 127.867 227.212 128.486 cv
227.814 129.088 227.814 130.079 227.212 130.698 cv
226.593 131.3 225.602 131.3 225.001 130.698 cv
224.399 130.079 224.399 129.088 225.001 128.486 cv
cp
ef
225.054 255.498 mo
224.452 254.878 224.452 253.887 225.054 253.286 cv
225.673 252.666 226.664 252.666 227.266 253.286 cv
227.884 253.887 227.884 254.878 227.266 255.498 cv
226.664 256.099 225.673 256.099 225.054 255.498 cv
cp
ef
283.941 108.492 mo
284.295 108.474 li
284.507 112.632 li
284.171 112.65 li
283.941 108.492 li
cp
ef
279.588 108.845 mo
279.925 108.81 li
280.367 112.95 li
280.013 112.985 li
279.588 108.845 li
cp
ef
275.253 109.429 mo
275.589 109.376 li
276.226 113.481 li
275.89 113.534 li
275.253 109.429 li
cp
ef
270.953 110.243 mo
271.289 110.172 li
272.139 114.225 li
271.803 114.295 li
270.953 110.243 li
cp
ef
262.496 112.526 mo
262.831 112.419 li
264.105 116.365 li
263.787 116.472 li
262.496 112.526 li
cp
ef
258.372 113.995 mo
258.691 113.871 li
260.177 117.746 li
259.859 117.87 li
258.372 113.995 li
cp
ef
254.338 115.675 mo
254.657 115.534 li
256.338 119.32 li
256.019 119.462 li
254.338 115.675 li
cp
ef
250.392 117.568 mo
250.693 117.409 li
252.586 121.108 li
252.286 121.267 li
250.392 117.568 li
cp
ef
242.819 121.957 mo
243.12 121.762 li
245.367 125.249 li
245.084 125.425 li
242.819 121.957 li
cp
ef
239.227 124.434 mo
239.492 124.24 li
241.934 127.602 li
241.669 127.796 li
239.227 124.434 li
cp
ef
235.759 127.106 mo
236.024 126.894 li
238.643 130.114 li
238.377 130.327 li
235.759 127.106 li
cp
ef
232.433 129.955 mo
232.698 129.725 li
235.476 132.821 li
235.21 133.034 li
232.433 129.955 li
cp
ef
229.265 132.98 mo
229.513 132.733 li
232.45 135.67 li
232.202 135.918 li
229.265 132.98 li
cp
ef
226.257 136.166 mo
226.487 135.9 li
229.583 138.678 li
229.354 138.926 li
226.257 136.166 li
cp
ef
223.426 139.492 mo
223.638 139.227 li
226.876 141.828 li
226.646 142.111 li
223.426 139.492 li
cp
ef
220.771 142.96 mo
220.966 142.695 li
224.328 145.137 li
224.133 145.402 li
220.771 142.96 li
cp
ef
218.294 146.57 mo
218.489 146.287 li
221.975 148.552 li
221.78 148.835 li
218.294 146.57 li
cp
ef
213.942 154.161 mo
214.101 153.86 li
217.799 155.736 li
217.64 156.054 li
213.942 154.161 li
cp
ef
212.066 158.125 mo
212.207 157.806 li
215.994 159.487 li
215.853 159.806 li
212.066 158.125 li
cp
ef
210.403 162.159 mo
210.526 161.84 li
214.402 163.327 li
214.278 163.645 li
210.403 162.159 li
cp
ef
208.952 166.299 mo
209.058 165.963 li
213.004 167.255 li
212.898 167.574 li
208.952 166.299 li
cp
ef
206.704 174.74 mo
206.775 174.421 li
210.827 175.271 li
210.756 175.606 li
206.704 174.74 li
cp
ef
205.908 179.058 mo
205.961 178.721 li
210.066 179.358 li
210.014 179.694 li
205.908 179.058 li
cp
ef
205.342 183.392 mo
205.377 183.056 li
209.518 183.48 li
209.482 183.817 li
205.342 183.392 li
cp
ef
205.023 187.763 mo
205.042 187.409 li
209.182 187.621 li
209.164 187.975 li
205.023 187.763 li
cp
ef
205.042 196.504 mo
205.023 196.168 li
209.164 195.938 li
209.182 196.292 li
205.042 196.504 li
cp
ef
205.377 200.857 mo
205.342 200.521 li
209.482 200.096 li
209.518 200.432 li
205.377 200.857 li
cp
ef
205.961 205.209 mo
205.908 204.856 li
210.014 204.219 li
210.066 204.556 li
205.961 205.209 li
cp
ef
206.775 209.51 mo
206.704 209.173 li
210.756 208.307 li
210.827 208.643 li
206.775 209.51 li
cp
ef
209.058 217.949 mo
208.952 217.631 li
212.898 216.34 li
213.004 216.658 li
209.058 217.949 li
cp
ef
210.526 222.073 mo
210.403 221.754 li
214.278 220.268 li
214.402 220.586 li
210.526 222.073 li
cp
ef
212.207 226.107 mo
212.066 225.807 li
215.853 224.108 li
215.994 224.426 li
212.207 226.107 li
cp
ef
214.101 230.053 mo
213.942 229.752 li
217.64 227.859 li
217.799 228.177 li
214.101 230.053 li
cp
ef
218.489 237.625 mo
218.294 237.344 li
221.78 235.078 li
221.975 235.361 li
218.489 237.625 li
cp
ef
220.966 241.218 mo
220.771 240.952 li
224.133 238.511 li
224.328 238.794 li
220.966 241.218 li
cp
ef
223.638 244.686 mo
223.426 244.421 li
226.646 241.82 li
226.876 242.085 li
223.638 244.686 li
cp
ef
226.487 248.013 mo
226.257 247.765 li
229.354 244.987 li
229.583 245.234 li
226.487 248.013 li
cp
ef
229.513 251.18 mo
229.265 250.932 li
232.202 247.995 li
232.45 248.243 li
229.513 251.18 li
cp
ef
232.698 254.188 mo
232.433 253.958 li
235.21 250.88 li
235.476 251.109 li
232.698 254.188 li
cp
ef
236.024 257.02 mo
235.759 256.807 li
238.377 253.586 li
238.643 253.799 li
236.024 257.02 li
cp
ef
239.51 259.674 mo
239.227 259.479 li
241.669 256.117 li
241.934 256.33 li
239.51 259.674 li
cp
ef
243.12 262.151 mo
242.819 261.956 li
245.084 258.488 li
245.367 258.665 li
243.12 262.151 li
cp
ef
250.693 266.503 mo
250.392 266.344 li
252.286 262.646 li
252.586 262.806 li
250.693 266.503 li
cp
ef
254.657 268.379 mo
254.338 268.238 li
256.019 264.451 li
256.338 264.593 li
254.657 268.379 li
cp
ef
258.691 270.042 mo
258.372 269.918 li
259.859 266.043 li
260.177 266.168 li
258.691 270.042 li
cp
ef
262.831 271.511 mo
262.496 271.387 li
263.787 267.441 li
264.105 267.547 li
262.831 271.511 li
cp
ef
271.289 273.74 mo
270.953 273.67 li
271.803 269.618 li
272.139 269.689 li
271.289 273.74 li
cp
ef
275.589 274.537 mo
275.253 274.484 li
275.89 270.379 li
276.244 270.432 li
275.589 274.537 li
cp
ef
279.925 275.103 mo
279.588 275.068 li
280.013 270.945 li
280.367 270.98 li
279.925 275.103 li
cp
ef
284.295 275.439 mo
283.941 275.421 li
284.171 271.264 li
284.507 271.281 li
284.295 275.439 li
cp
ef
293.036 275.421 mo
292.7 275.439 li
292.487 271.281 li
292.823 271.264 li
293.036 275.421 li
cp
ef
297.406 275.068 mo
297.053 275.103 li
296.628 270.98 li
296.964 270.945 li
297.406 275.068 li
cp
ef
301.741 274.484 mo
301.405 274.537 li
300.751 270.432 li
301.087 270.379 li
301.741 274.484 li
cp
ef
306.041 273.67 mo
305.705 273.74 li
304.838 269.689 li
305.174 269.618 li
306.041 273.67 li
cp
ef
314.481 271.387 mo
314.163 271.494 li
312.871 267.547 li
313.207 267.441 li
314.481 271.387 li
cp
ef
318.604 269.918 mo
318.285 270.042 li
316.8 266.168 li
317.118 266.043 li
318.604 269.918 li
cp
ef
322.639 268.238 mo
322.338 268.379 li
320.639 264.593 li
320.958 264.451 li
322.639 268.238 li
cp
ef
326.585 266.344 mo
326.284 266.503 li
324.408 262.806 li
324.709 262.646 li
326.585 266.344 li
cp
ef
334.157 261.956 mo
333.875 262.151 li
331.61 258.665 li
331.893 258.488 li
334.157 261.956 li
cp
ef
337.768 259.479 mo
337.484 259.674 li
335.043 256.312 li
335.326 256.117 li
337.768 259.479 li
cp
ef
341.219 256.807 mo
340.953 257.02 li
338.352 253.799 li
338.617 253.586 li
341.219 256.807 li
cp
ef
344.545 253.958 mo
344.297 254.188 li
341.52 251.109 li
341.767 250.88 li
344.545 253.958 li
cp
ef
347.713 250.932 mo
347.464 251.18 li
344.545 248.243 li
344.774 247.995 li
347.713 250.932 li
cp
ef
350.72 247.765 mo
350.49 248.013 li
347.411 245.234 li
347.642 244.987 li
350.72 247.765 li
cp
ef
353.551 244.421 mo
353.339 244.686 li
350.118 242.085 li
350.331 241.82 li
353.551 244.421 li
cp
ef
356.205 240.952 mo
356.011 241.218 li
352.648 238.776 li
352.861 238.511 li
356.205 240.952 li
cp
ef
358.683 237.344 mo
358.506 237.625 li
355.02 235.361 li
355.197 235.078 li
358.683 237.344 li
cp
ef
363.035 229.752 mo
362.895 230.053 li
359.196 228.177 li
359.337 227.859 li
363.035 229.752 li
cp
ef
364.911 225.788 mo
364.787 226.107 li
360.982 224.426 li
361.124 224.108 li
364.911 225.788 li
cp
ef
366.592 221.754 mo
366.469 222.073 li
362.593 220.586 li
362.717 220.268 li
366.592 221.754 li
cp
ef
368.043 217.614 mo
367.937 217.949 li
363.991 216.658 li
364.098 216.34 li
368.043 217.614 li
cp
ef
370.29 209.173 mo
370.22 209.51 li
366.15 208.643 li
366.221 208.307 li
370.29 209.173 li
cp
ef
371.069 204.856 mo
371.016 205.192 li
366.928 204.556 li
366.981 204.219 li
371.069 204.856 li
cp
ef
371.635 200.521 mo
371.6 200.857 li
367.477 200.432 li
367.513 200.096 li
371.635 200.521 li
cp
ef
371.972 196.168 mo
371.953 196.504 li
367.813 196.292 li
367.831 195.938 li
371.972 196.168 li
cp
ef
371.953 187.409 mo
371.972 187.745 li
367.831 187.975 li
367.813 187.621 li
371.953 187.409 li
cp
ef
371.6 183.056 mo
371.635 183.392 li
367.513 183.817 li
367.477 183.48 li
371.6 183.056 li
cp
ef
371.016 178.704 mo
371.069 179.058 li
366.981 179.694 li
366.928 179.358 li
371.016 178.704 li
cp
ef
370.22 174.404 mo
370.29 174.74 li
366.221 175.606 li
366.15 175.271 li
370.22 174.404 li
cp
ef
367.937 165.963 mo
368.043 166.299 li
364.098 167.574 li
363.991 167.255 li
367.937 165.963 li
cp
ef
366.469 161.84 mo
366.592 162.159 li
362.717 163.645 li
362.593 163.327 li
366.469 161.84 li
cp
ef
364.77 157.806 mo
364.911 158.125 li
361.124 159.806 li
360.982 159.487 li
364.77 157.806 li
cp
ef
362.895 153.86 mo
363.035 154.161 li
359.337 156.054 li
359.196 155.736 li
362.895 153.86 li
cp
ef
358.487 146.287 mo
358.683 146.57 li
355.197 148.835 li
355.02 148.552 li
358.487 146.287 li
cp
ef
356.011 142.695 mo
356.205 142.96 li
352.861 145.402 li
352.648 145.137 li
356.011 142.695 li
cp
ef
353.339 139.227 mo
353.551 139.492 li
350.331 142.093 li
350.118 141.828 li
353.339 139.227 li
cp
ef
350.49 135.9 mo
350.72 136.147 li
347.642 138.926 li
347.411 138.678 li
350.49 135.9 li
cp
ef
347.464 132.733 mo
347.713 132.98 li
344.774 135.918 li
344.545 135.67 li
347.464 132.733 li
cp
ef
344.297 129.725 mo
344.545 129.955 li
341.767 133.034 li
341.52 132.821 li
344.297 129.725 li
cp
ef
340.953 126.894 mo
341.219 127.106 li
338.617 130.327 li
338.352 130.114 li
340.953 126.894 li
cp
ef
337.484 124.24 mo
337.75 124.434 li
335.326 127.796 li
335.043 127.602 li
337.484 124.24 li
cp
ef
333.875 121.762 mo
334.157 121.957 li
331.893 125.425 li
331.61 125.249 li
333.875 121.762 li
cp
ef
326.284 117.409 mo
326.585 117.568 li
324.709 121.267 li
324.408 121.108 li
326.284 117.409 li
cp
ef
322.338 115.534 mo
322.639 115.675 li
320.958 119.462 li
320.639 119.32 li
322.338 115.534 li
cp
ef
318.285 113.871 mo
318.604 113.995 li
317.118 117.87 li
316.8 117.746 li
318.285 113.871 li
cp
ef
314.163 112.419 mo
314.481 112.526 li
313.207 116.472 li
312.871 116.365 li
314.163 112.419 li
cp
ef
305.705 110.172 mo
306.041 110.243 li
305.174 114.295 li
304.838 114.225 li
305.705 110.172 li
cp
ef
301.405 109.376 mo
301.741 109.429 li
301.087 113.534 li
300.751 113.481 li
301.405 109.376 li
cp
ef
297.053 108.81 mo
297.406 108.845 li
296.964 112.985 li
296.628 112.95 li
297.053 108.81 li
cp
ef
292.7 108.474 mo
293.036 108.492 li
292.823 112.65 li
292.47 112.632 li
292.7 108.474 li
cp
ef
233.423 138.094 mo
233.583 138.271 li
233.795 138.13 233.989 138.042 234.148 138.042 cv
234.308 138.042 234.538 138.094 234.856 138.236 cv
239.634 140.359 li
239.793 140.2 li
238.377 136.36 li
242.041 137.971 li
242.217 137.776 li
240.041 132.857 li
239.864 132.415 239.864 132.061 240.094 131.76 cv
239.935 131.583 li
238.625 132.875 li
238.803 133.051 li
238.979 132.875 239.121 132.786 239.227 132.786 cv
239.316 132.769 239.404 132.786 239.458 132.839 cv
239.563 132.945 239.652 133.104 239.758 133.317 cv
241.155 136.449 li
237.864 135.033 li
237.793 134.998 237.723 134.945 237.67 134.892 cv
237.563 134.785 237.511 134.68 237.511 134.573 cv
237.528 134.414 237.635 134.219 237.847 134.007 cv
237.67 133.848 li
235.724 135.794 li
235.9 135.953 li
236.078 135.776 236.237 135.688 236.343 135.67 cv
236.52 135.617 236.75 135.652 236.998 135.759 cv
237.829 136.113 li
238.873 138.943 li
235.617 137.458 li
235.44 137.387 235.299 137.298 235.193 137.209 cv
235.122 137.121 235.069 137.033 235.086 136.944 cv
235.086 136.838 235.157 136.714 235.299 136.537 cv
235.14 136.378 li
233.423 138.094 li
233.423 138.094 li
cp
230.999 142.005 mo
230.893 140.961 231.07 140.2 231.512 139.775 cv
231.725 139.545 231.973 139.404 232.255 139.369 cv
232.521 139.315 232.839 139.369 233.193 139.527 cv
233.441 139.651 233.742 139.881 234.113 140.253 cv
235.882 142.022 li
236.148 142.288 236.343 142.429 236.467 142.482 cv
236.573 142.536 236.697 142.536 236.803 142.5 cv
236.926 142.465 237.068 142.359 237.263 142.164 cv
237.44 142.324 li
235.405 144.358 li
235.229 144.199 li
235.317 144.11 li
235.511 143.916 235.617 143.756 235.635 143.615 cv
235.652 143.491 235.617 143.35 235.529 143.208 cv
235.511 143.155 235.37 142.996 235.14 142.766 cv
233.441 141.067 li
233.07 140.696 232.733 140.465 232.468 140.395 cv
232.202 140.324 231.955 140.395 231.725 140.625 cv
231.371 140.979 231.211 141.527 231.265 142.271 cv
233.441 144.464 li
233.724 144.748 233.901 144.889 234.007 144.924 cv
234.131 144.978 234.255 144.978 234.379 144.942 cv
234.485 144.907 234.644 144.783 234.875 144.553 cv
235.051 144.712 li
232.999 146.765 li
232.839 146.605 li
232.928 146.499 li
233.14 146.305 233.229 146.11 233.193 145.933 cv
233.158 145.738 232.999 145.508 232.698 145.208 cv
231.176 143.686 li
230.681 143.19 230.362 142.89 230.238 142.819 cv
230.096 142.73 229.99 142.677 229.902 142.695 cv
229.832 142.695 229.743 142.748 229.672 142.819 cv
229.583 142.907 229.495 143.031 229.424 143.19 cv
229.194 143.084 li
229.938 141.333 li
230.132 141.156 li
230.999 142.005 li
230.999 142.005 li
cp
ef
341.307 242.934 mo
340.988 242.563 340.847 242.173 340.847 241.784 cv
340.847 241.395 340.97 241.077 341.219 240.829 cv
341.378 240.669 341.59 240.563 341.838 240.51 cv
342.067 240.458 342.314 240.475 342.563 240.563 cv
342.723 240.634 342.935 240.793 343.218 241.042 cv
341.307 242.934 li
341.307 242.934 li
cp
341.554 243.2 mo
344.403 240.351 li
343.89 239.837 343.342 239.59 342.74 239.572 cv
342.138 239.572 341.607 239.803 341.147 240.263 cv
340.599 240.811 340.351 241.448 340.387 242.208 cv
340.422 242.953 340.776 243.695 341.483 244.385 cv
342.138 245.04 342.828 245.376 343.571 245.412 cv
344.297 245.447 344.916 245.217 345.412 244.722 cv
345.872 244.279 346.084 243.731 346.049 243.076 cv
346.014 242.439 345.819 241.891 345.465 241.413 cv
345.235 241.466 li
345.465 241.961 345.553 242.386 345.5 242.723 cv
345.447 243.076 345.288 243.377 345.022 243.642 cv
344.616 244.049 344.085 244.227 343.447 244.191 cv
342.793 244.138 342.174 243.801 341.554 243.2 cv
341.554 243.2 li
341.554 243.2 li
cp
338.281 243.129 mo
339.679 244.527 li
339.52 244.686 li
338.971 244.35 338.528 244.208 338.192 244.227 cv
337.856 244.244 337.556 244.385 337.272 244.668 cv
337.077 244.881 336.954 245.093 336.937 245.341 cv
336.918 245.571 336.972 245.766 337.112 245.89 cv
337.272 246.066 337.467 246.155 337.679 246.19 cv
337.909 246.226 338.228 246.155 338.635 246.013 cv
339.607 245.677 li
340.528 245.359 341.219 245.447 341.696 245.942 cv
342.067 246.313 342.244 246.756 342.174 247.27 cv
342.121 247.783 341.926 248.208 341.571 248.561 cv
341.324 248.809 340.988 249.057 340.581 249.287 cv
340.457 249.357 340.351 249.428 340.299 249.5 cv
340.227 249.552 340.209 249.658 340.245 249.764 cv
340.104 249.906 li
338.617 248.438 li
338.776 248.296 li
339.271 248.632 339.749 248.792 340.209 248.756 cv
340.652 248.738 341.023 248.579 341.324 248.278 cv
341.52 248.083 341.643 247.854 341.643 247.605 cv
341.661 247.34 341.571 247.128 341.396 246.969 cv
341.2 246.756 340.953 246.65 340.67 246.667 cv
340.369 246.667 339.908 246.774 339.254 247.004 cv
338.617 247.216 338.14 247.305 337.821 247.27 cv
337.521 247.234 337.237 247.093 336.972 246.827 cv
336.635 246.491 336.459 246.084 336.477 245.625 cv
336.477 245.164 336.652 244.757 337.024 244.385 cv
337.184 244.227 337.414 244.067 337.715 243.907 cv
337.927 243.801 338.051 243.713 338.086 243.66 cv
338.14 243.625 338.175 243.571 338.175 243.518 cv
338.175 243.466 338.157 243.394 338.122 243.289 cv
338.281 243.129 li
338.281 243.129 li
cp
ef
343.111 139.563 mo
343.483 139.244 343.872 139.085 344.262 139.103 cv
344.651 139.103 344.97 139.227 345.218 139.475 cv
345.376 139.633 345.482 139.846 345.536 140.076 cv
345.589 140.324 345.57 140.572 345.482 140.819 cv
345.412 140.961 345.253 141.191 345.005 141.456 cv
343.111 139.563 li
343.111 139.563 li
cp
342.846 139.811 mo
345.695 142.66 li
346.208 142.146 346.456 141.598 346.474 140.996 cv
346.474 140.395 346.243 139.864 345.783 139.404 cv
345.253 138.855 344.598 138.607 343.836 138.643 cv
343.094 138.661 342.351 139.032 341.661 139.74 cv
341.006 140.395 340.67 141.084 340.634 141.81 cv
340.599 142.554 340.829 143.173 341.324 143.668 cv
341.784 144.11 342.333 144.323 342.97 144.288 cv
343.607 144.27 344.155 144.075 344.633 143.721 cv
344.598 143.491 li
344.085 143.721 343.66 143.81 343.324 143.756 cv
342.97 143.704 342.669 143.544 342.403 143.261 cv
341.997 142.872 341.82 142.341 341.855 141.687 cv
341.908 141.05 342.244 140.412 342.846 139.811 cv
342.846 139.811 li
342.846 139.811 li
cp
339.572 134.91 mo
340.634 134.821 341.378 134.998 341.82 135.422 cv
342.031 135.652 342.174 135.9 342.227 136.184 cv
342.279 136.449 342.21 136.767 342.05 137.121 cv
341.943 137.369 341.696 137.67 341.324 138.042 cv
339.555 139.811 li
339.307 140.059 339.147 140.253 339.096 140.395 cv
339.06 140.5 339.06 140.607 339.077 140.731 cv
339.112 140.837 339.236 140.996 339.432 141.191 cv
339.254 141.368 li
337.219 139.333 li
337.396 139.156 li
337.484 139.244 li
337.662 139.439 337.821 139.545 337.962 139.563 cv
338.104 139.581 338.245 139.545 338.369 139.457 cv
338.44 139.421 338.582 139.298 338.812 139.068 cv
340.51 137.369 li
340.882 136.997 341.111 136.661 341.183 136.396 cv
341.253 136.13 341.183 135.883 340.953 135.652 cv
340.599 135.299 340.051 135.139 339.307 135.175 cv
337.131 137.369 li
336.848 137.652 336.688 137.829 336.652 137.935 cv
336.617 138.059 336.617 138.183 336.635 138.289 cv
336.671 138.413 336.812 138.572 337.024 138.802 cv
336.865 138.962 li
334.813 136.927 li
334.989 136.75 li
335.078 136.855 li
335.29 137.051 335.485 137.157 335.662 137.121 cv
335.84 137.086 336.087 136.927 336.37 136.625 cv
337.909 135.086 li
338.404 134.591 338.688 134.29 338.776 134.148 cv
338.865 134.024 338.9 133.918 338.9 133.83 cv
338.883 133.742 338.847 133.67 338.759 133.582 cv
338.688 133.511 338.564 133.423 338.404 133.352 cv
338.494 133.122 li
340.245 133.865 li
340.439 134.061 li
339.572 134.91 li
339.572 134.91 li
cp
ef
236.13 241.643 mo
235.954 241.82 li
236.095 242.032 236.184 242.227 236.184 242.386 cv
236.184 242.545 236.13 242.775 235.989 243.076 cv
233.866 247.871 li
234.025 248.031 li
237.864 246.597 li
236.272 250.277 li
236.449 250.455 li
241.368 248.278 li
241.811 248.083 242.182 248.101 242.465 248.331 cv
242.642 248.154 li
241.351 246.863 li
241.173 247.022 li
241.351 247.199 241.439 247.34 241.457 247.447 cv
241.457 247.553 241.439 247.641 241.386 247.694 cv
241.28 247.783 241.121 247.889 240.908 247.995 cv
237.776 249.393 li
239.192 246.102 li
239.227 246.013 239.28 245.942 239.333 245.89 cv
239.439 245.783 239.546 245.73 239.652 245.748 cv
239.811 245.766 240.005 245.872 240.218 246.066 cv
240.395 245.907 li
238.431 243.961 li
238.271 244.12 li
238.449 244.314 238.537 244.457 238.572 244.562 cv
238.607 244.757 238.59 244.969 238.484 245.217 cv
238.112 246.066 li
235.281 247.11 li
236.768 243.837 li
236.838 243.66 236.926 243.518 237.015 243.43 cv
237.104 243.341 237.192 243.306 237.298 243.306 cv
237.387 243.323 237.511 243.394 237.688 243.536 cv
237.847 243.377 li
236.13 241.643 li
236.13 241.643 li
cp
235.546 240.829 mo
234.148 242.227 li
234.007 242.085 li
234.326 241.536 234.485 241.095 234.467 240.758 cv
234.45 240.421 234.29 240.121 234.025 239.837 cv
233.813 239.625 233.6 239.52 233.353 239.502 cv
233.123 239.484 232.928 239.537 232.786 239.678 cv
232.627 239.837 232.521 240.033 232.503 240.245 cv
232.468 240.458 232.539 240.775 232.68 241.201 cv
233.016 242.173 li
233.317 243.076 233.229 243.784 232.751 244.261 cv
232.379 244.633 231.937 244.792 231.424 244.739 cv
230.911 244.686 230.486 244.491 230.132 244.138 cv
229.884 243.89 229.637 243.554 229.407 243.146 cv
229.336 243.005 229.265 242.917 229.194 242.846 cv
229.123 242.793 229.035 242.775 228.929 242.81 cv
228.77 242.651 li
230.255 241.183 li
230.397 241.325 li
230.062 241.838 229.902 242.315 229.938 242.757 cv
229.955 243.217 230.114 243.589 230.397 243.872 cv
230.61 244.085 230.84 244.191 231.088 244.208 cv
231.335 244.208 231.565 244.138 231.725 243.961 cv
231.937 243.748 232.025 243.5 232.025 243.217 cv
232.025 242.934 231.901 242.475 231.689 241.82 cv
231.477 241.165 231.371 240.687 231.424 240.386 cv
231.459 240.086 231.601 239.784 231.866 239.537 cv
232.202 239.2 232.609 239.024 233.07 239.024 cv
233.529 239.024 233.936 239.219 234.308 239.59 cv
234.467 239.75 234.626 239.979 234.785 240.28 cv
234.892 240.475 234.98 240.599 235.016 240.652 cv
235.069 240.705 235.122 240.723 235.175 240.74 cv
235.21 240.74 235.299 240.723 235.405 240.687 cv
235.546 240.829 li
235.546 240.829 li
cp
ef
347.553 132.928 mo
347.553 132.928 li
332.459 117.816 311.58 108.474 288.524 108.474 cv
265.486 108.474 244.606 117.816 229.495 132.928 cv
214.402 148.039 205.059 168.901 205.059 191.957 cv
205.059 215.012 214.402 235.874 229.495 250.985 cv
244.606 266.096 265.486 275.439 288.524 275.439 cv
311.58 275.439 332.459 266.096 347.553 250.985 cv
362.664 235.874 372.007 215.012 372.007 191.957 cv
372.007 168.901 362.664 148.039 347.553 132.928 cv
cp
288.524 106.704 mo
312.075 106.704 333.379 116.259 348.809 131.671 cv
364.238 147.101 373.775 168.423 373.775 191.957 cv
373.775 215.49 364.238 236.812 348.809 252.242 cv
333.379 267.671 312.075 277.209 288.524 277.209 cv
264.99 277.209 243.687 267.671 228.256 252.242 cv
212.827 236.812 203.29 215.49 203.29 191.957 cv
203.29 168.423 212.827 147.101 228.256 131.671 cv
243.687 116.259 264.99 106.704 288.524 106.704 cv
288.524 106.704 li
cp
ef
335.556 144.942 mo
335.556 144.942 li
323.523 132.91 306.891 125.46 288.524 125.46 cv
270.175 125.46 253.542 132.91 241.509 144.942 cv
229.478 156.975 222.028 173.589 222.028 191.957 cv
222.028 210.324 229.478 226.938 241.509 238.971 cv
253.542 251.021 270.175 258.452 288.524 258.452 cv
306.891 258.452 323.523 251.021 335.556 238.971 cv
347.588 226.938 355.038 210.324 355.038 191.957 cv
355.038 173.589 347.588 156.975 335.556 144.942 cv
cp
288.524 125.071 mo
306.997 125.071 323.718 132.556 335.821 144.659 cv
347.924 156.762 355.427 173.484 355.427 191.957 cv
355.427 210.429 347.924 227.15 335.821 239.254 cv
323.718 251.357 306.997 258.842 288.524 258.842 cv
270.068 258.842 253.347 251.357 241.227 239.254 cv
229.123 227.15 221.639 210.429 221.639 191.957 cv
221.639 173.484 229.123 156.762 241.227 144.659 cv
253.347 132.556 270.068 125.071 288.524 125.071 cv
288.524 125.071 li
cp
ef
362.473 191.781 mo
372.204 191.781 li
372.204 192.064 li
362.473 192.064 li
362.473 191.781 li
cp
ef
288.557 107.843 mo
277.451 149.899 li
269.219 181.091 li
288.557 191.955 li
288.557 107.843 li
cp
.184314 .741176 .788235 rgb
ef
288.557 107.843 mo
299.688 149.899 li
307.92 181.091 li
288.557 191.955 li
288.557 107.843 li
cp
.152941 .619608 .647059 rgb
ef
288.557 276.065 mo
277.451 234.01 li
269.219 202.818 li
288.557 191.954 li
288.557 276.065 li
cp
.886275 .262745 .282353 rgb
ef
288.557 276.065 mo
299.688 234.01 li
307.92 202.818 li
288.557 191.954 li
288.557 276.065 li
cp
.678431 .145098 .184314 rgb
ef
288.557 214.463 mo
300.987 214.462 311.063 204.385 311.063 191.954 cv
311.063 179.523 300.987 169.446 288.557 169.445 cv
288.557 214.463 li
cp
.196078 .207843 .282353 rgb
ef
288.557 214.463 mo
276.126 214.462 266.05 204.385 266.05 191.954 cv
266.05 179.523 276.126 169.446 288.557 169.445 cv
288.557 214.463 li
cp
.313726 .282353 .32549 rgb
ef
288.557 208.72 mo
297.815 208.719 305.32 201.213 305.32 191.954 cv
305.32 182.695 297.815 175.189 288.557 175.189 cv
288.557 208.72 li
cp
.898039 .854902 .788235 rgb
ef
288.557 208.72 mo
279.298 208.719 271.792 201.213 271.792 191.954 cv
271.792 182.695 279.298 175.189 288.557 175.189 cv
288.557 208.72 li
cp
.972549 1 1 rgb
ef
288.557 203.667 mo
295.024 203.666 300.269 198.423 300.269 191.954 cv
300.269 185.486 295.024 180.242 288.557 180.242 cv
288.557 203.667 li
cp
.196078 .207843 .282353 rgb
ef
288.557 203.667 mo
282.088 203.666 276.845 198.423 276.845 191.954 cv
276.845 185.486 282.088 180.242 288.557 180.242 cv
288.557 203.667 li
cp
.313726 .282353 .32549 rgb
ef
192 384 mo
0 384 li
0 576 li
192 576 li
192 384 li
cp
1 .815686 .0235294 rgb
ef
576 384 mo
384 384 li
384 576 li
576 576 li
576 384 li
cp
.415686 .466667 .541176 rgb
ef
384 384 mo
192 384 li
192 576 li
384 576 li
384 384 li
cp
1 .380392 .47451 rgb
ef
96 548.646 mo
133.909 548.643 164.64 517.91 164.64 480 cv
164.64 442.09 133.909 411.357 96 411.354 cv
96 548.646 li
cp
.196078 .207843 .282353 rgb
ef
96 548.646 mo
58.0908 548.643 27.3599 517.91 27.3599 480 cv
27.3599 442.09 58.0908 411.357 96 411.354 cv
96 548.646 li
cp
.313726 .282353 .32549 rgb
ef
95.9995 537.924 mo
127.988 537.922 153.919 511.989 153.919 480 cv
153.919 448.011 127.988 422.078 95.9995 422.076 cv
95.9995 537.924 li
cp
.964706 .945098 .917647 rgb
ef
95.9995 537.924 mo
64.0112 537.922 38.0796 511.989 38.0796 480 cv
38.0796 448.011 64.0112 422.078 95.9995 422.076 cv
95.9995 537.924 li
cp
.972549 1 1 rgb
ef
99.3833 433.48 mo
99.3833 433.582 99.3652 433.673 99.3311 433.755 cv
99.2949 433.834 99.2471 433.899 99.186 433.953 cv
99.1274 434.006 99.0571 434.044 98.9756 434.069 cv
98.8916 434.094 98.8101 434.105 98.7266 434.105 cv
97.9814 434.105 li
97.8257 434.105 97.6919 434.09 97.5791 434.06 cv
97.4678 434.028 97.3643 433.972 97.269 433.89 cv
97.1719 433.809 97.0811 433.698 96.9927 433.558 cv
96.9048 433.42 96.8047 433.238 96.6938 433.017 cv
94.564 429.003 li
94.4395 428.763 94.3149 428.505 94.1855 428.229 cv
94.0566 427.953 93.9434 427.684 93.8418 427.423 cv
93.8281 427.423 li
93.8462 427.742 93.8599 428.06 93.8687 428.376 cv
93.8779 428.69 93.8828 429.019 93.8828 429.354 cv
93.8828 433.847 li
93.8828 433.89 93.8711 433.931 93.8462 433.967 cv
93.8213 434.002 93.7783 434.03 93.7192 434.056 cv
93.6606 434.08 93.5791 434.099 93.4775 434.112 cv
93.3755 434.126 93.2441 434.133 93.0859 434.133 cv
92.9297 434.133 92.8008 434.126 92.6987 434.112 cv
92.5967 434.099 92.5176 434.08 92.4609 434.056 cv
92.4023 434.033 92.3613 434.002 92.3413 433.967 cv
92.3184 433.931 92.3066 433.89 92.3066 433.847 cv
92.3066 426.133 li
92.3066 425.925 92.3682 425.769 92.4907 425.664 cv
92.6104 425.56 92.7598 425.508 92.9385 425.508 cv
93.8735 425.508 li
94.041 425.508 94.1836 425.521 94.2988 425.551 cv
94.4146 425.581 94.5166 425.628 94.6069 425.694 cv
94.6973 425.759 94.7837 425.853 94.8628 425.97 cv
94.9414 426.086 95.0234 426.232 95.1074 426.404 cv
96.7754 429.544 li
96.873 429.734 96.9678 429.922 97.063 430.105 cv
97.1582 430.289 97.251 430.472 97.3364 430.655 cv
97.4253 430.839 97.5112 431.02 97.5947 431.196 cv
97.6807 431.376 97.7622 431.552 97.8413 431.729 cv
97.8481 431.729 li
97.8345 431.418 97.8232 431.095 97.8164 430.76 cv
97.8096 430.423 97.8076 430.101 97.8076 429.795 cv
97.8076 425.766 li
97.8076 425.724 97.8213 425.683 97.8481 425.646 cv
97.873 425.612 97.9185 425.581 97.98 425.554 cv
98.043 425.526 98.1245 425.508 98.2266 425.497 cv
98.3281 425.485 98.4595 425.48 98.6182 425.48 cv
98.77 425.48 98.8965 425.485 98.9985 425.497 cv
99.1001 425.508 99.1768 425.526 99.2334 425.554 cv
99.2881 425.581 99.3286 425.612 99.3496 425.646 cv
99.3721 425.683 99.3833 425.721 99.3833 425.766 cv
99.3833 433.48 li
cp
.196078 .207843 .282353 rgb
ef
98.6357 532.765 mo
98.6357 533.218 98.5522 533.611 98.3848 533.954 cv
98.2144 534.293 97.9883 534.576 97.7007 534.805 cv
97.4111 535.031 97.0762 535.203 96.6914 535.319 cv
96.3066 535.435 95.8945 535.49 95.4551 535.49 cv
95.1587 535.49 94.8848 535.466 94.6289 535.416 cv
94.3755 535.366 94.1514 535.308 93.957 535.237 cv
93.7622 535.17 93.5991 535.097 93.4678 535.02 cv
93.3369 534.943 93.2441 534.875 93.1846 534.818 cv
93.1284 534.76 93.0874 534.676 93.063 534.567 cv
93.0381 534.459 93.0264 534.305 93.0264 534.101 cv
93.0264 533.963 93.0313 533.85 93.04 533.757 cv
93.0488 533.664 93.063 533.589 93.083 533.53 cv
93.103 533.474 93.1309 533.433 93.1621 533.408 cv
93.1963 533.384 93.2349 533.372 93.2798 533.372 cv
93.3413 533.372 93.4292 533.408 93.5425 533.482 cv
93.6563 533.555 93.8008 533.636 93.9771 533.726 cv
94.1538 533.813 94.3667 533.895 94.6133 533.968 cv
94.8579 534.042 95.1431 534.078 95.4668 534.078 cv
95.6797 534.078 95.8696 534.053 96.0371 534.003 cv
96.2065 533.951 96.3496 533.882 96.4673 533.788 cv
96.585 533.695 96.6729 533.583 96.7363 533.447 cv
96.7979 533.311 96.8296 533.159 96.8296 532.991 cv
96.8296 532.797 96.7773 532.63 96.6709 532.491 cv
96.5645 532.351 96.4263 532.229 96.2544 532.12 cv
96.085 532.012 95.8901 531.909 95.6729 531.814 cv
95.4575 531.72 95.2334 531.62 95.0029 531.514 cv
94.7715 531.407 94.5474 531.287 94.333 531.151 cv
94.1152 531.018 93.9209 530.856 93.751 530.669 cv
93.5786 530.481 93.4409 530.26 93.3345 530.001 cv
93.228 529.746 93.1758 529.438 93.1758 529.08 cv
93.1758 528.67 93.2529 528.309 93.4043 527.996 cv
93.5562 527.686 93.7622 527.428 94.02 527.222 cv
94.2808 527.016 94.5835 526.861 94.9346 526.76 cv
95.2856 526.658 95.6587 526.608 96.0527 526.608 cv
96.2544 526.608 96.458 526.624 96.6621 526.655 cv
96.8657 526.686 97.0562 526.729 97.2324 526.78 cv
97.4092 526.835 97.5649 526.894 97.7031 526.959 cv
97.8389 527.027 97.9292 527.081 97.9746 527.127 cv
98.0176 527.17 98.0474 527.208 98.063 527.237 cv
98.0791 527.269 98.0928 527.311 98.1035 527.362 cv
98.1152 527.412 98.1216 527.476 98.1265 527.555 cv
98.1313 527.631 98.1333 527.727 98.1333 527.842 cv
98.1333 527.969 98.1313 528.077 98.124 528.166 cv
98.1172 528.254 98.106 528.326 98.0903 528.385 cv
98.0747 528.441 98.0513 528.484 98.0244 528.51 cv
97.9956 528.537 97.957 528.551 97.9067 528.551 cv
97.8594 528.551 97.7822 528.519 97.6758 528.458 cv
97.5698 528.396 97.4385 528.328 97.2847 528.254 cv
97.1284 528.182 96.9497 528.115 96.7456 528.057 cv
96.542 527.996 96.3198 527.967 96.0757 527.967 cv
95.8853 527.967 95.7202 527.989 95.5776 528.036 cv
95.4375 528.082 95.3193 528.147 95.2246 528.229 cv
95.1294 528.311 95.0566 528.407 95.0112 528.523 cv
94.9644 528.639 94.9414 528.761 94.9414 528.888 cv
94.9414 529.077 94.9937 529.243 95.0977 529.381 cv
95.2017 529.521 95.3423 529.646 95.5166 529.755 cv
95.6909 529.861 95.8901 529.963 96.1118 530.058 cv
96.3315 530.153 96.5576 530.255 96.7886 530.359 cv
97.0195 530.466 97.2456 530.585 97.4653 530.721 cv
97.6875 530.856 97.8838 531.018 98.0586 531.206 cv
98.2305 531.394 98.3711 531.613 98.4775 531.868 cv
98.584 532.122 98.6357 532.421 98.6357 532.765 cv
cp
ef
149.237 484.13 mo
149.237 484.262 149.232 484.371 149.221 484.461 cv
149.209 484.549 149.192 484.621 149.17 484.674 cv
149.146 484.729 149.119 484.769 149.084 484.794 cv
149.052 484.819 149.012 484.831 148.973 484.831 cv
144.568 484.831 li
144.42 484.831 144.295 484.787 144.193 484.699 cv
144.092 484.611 144.041 484.468 144.041 484.269 cv
144.041 476.613 li
144.041 476.414 144.092 476.271 144.193 476.183 cv
144.295 476.095 144.42 476.051 144.568 476.051 cv
148.952 476.051 li
148.992 476.051 149.028 476.063 149.061 476.085 cv
149.091 476.108 149.119 476.147 149.142 476.203 cv
149.163 476.262 149.181 476.333 149.192 476.421 cv
149.205 476.512 149.209 476.622 149.209 476.759 cv
149.209 476.887 149.205 476.993 149.192 477.083 cv
149.181 477.171 149.165 477.243 149.142 477.296 cv
149.119 477.352 149.091 477.392 149.061 477.417 cv
149.028 477.442 148.992 477.454 148.952 477.454 cv
145.819 477.454 li
145.819 479.594 li
148.459 479.594 li
148.5 479.594 148.538 479.604 148.57 479.63 cv
148.604 479.656 148.632 479.693 148.656 479.746 cv
148.679 479.797 148.695 479.867 148.707 479.957 cv
148.718 480.045 148.723 480.151 148.723 480.276 cv
148.723 480.409 148.718 480.518 148.707 480.604 cv
148.695 480.688 148.679 480.758 148.656 480.81 cv
148.632 480.862 148.604 480.899 148.57 480.92 cv
148.538 480.943 148.5 480.955 148.459 480.955 cv
145.819 480.955 li
145.819 483.428 li
148.973 483.428 li
149.015 483.428 149.052 483.439 149.084 483.465 cv
149.119 483.491 149.146 483.53 149.17 483.585 cv
149.192 483.639 149.209 483.711 149.221 483.799 cv
149.232 483.889 149.237 483.998 149.237 484.13 cv
cp
ef
48.3975 484.838 mo
48.3721 484.938 48.3379 485.019 48.2935 485.078 cv
48.251 485.138 48.1846 485.185 48.0972 485.215 cv
48.0103 485.247 47.8975 485.268 47.7607 485.278 cv
47.6221 485.289 47.4482 485.294 47.2368 485.294 cv
47.0005 485.294 46.8086 485.289 46.666 485.278 cv
46.5215 485.268 46.4087 485.247 46.3257 485.215 cv
46.2422 485.185 46.1826 485.138 46.1445 485.078 cv
46.1079 485.019 46.0781 484.938 46.0571 484.838 cv
44.7637 479.718 li
44.751 479.718 li
43.5283 484.838 li
43.5073 484.934 43.4795 485.012 43.4414 485.072 cv
43.4048 485.132 43.3452 485.178 43.2642 485.213 cv
43.1831 485.247 43.0728 485.268 42.9346 485.278 cv
42.7939 485.289 42.6108 485.294 42.3828 485.294 cv
42.1396 485.294 41.9482 485.289 41.8052 485.278 cv
41.6626 485.268 41.5479 485.247 41.4648 485.215 cv
41.3818 485.185 41.3218 485.138 41.2837 485.078 cv
41.2471 485.019 41.2153 484.938 41.1919 484.838 cv
39.3579 477.789 li
39.3193 477.638 39.3003 477.521 39.2959 477.436 cv
39.292 477.351 39.3154 477.284 39.3662 477.24 cv
39.4199 477.192 39.5049 477.165 39.6221 477.154 cv
39.7412 477.144 39.9053 477.14 40.1157 477.14 cv
40.312 477.14 40.4658 477.142 40.5806 477.148 cv
40.6958 477.154 40.7808 477.17 40.8384 477.192 cv
40.8955 477.216 40.9365 477.249 40.958 477.293 cv
40.9766 477.336 40.9941 477.397 41.0068 477.477 cv
42.4253 483.664 li
42.4316 483.664 li
43.9038 477.521 li
43.9204 477.442 43.9419 477.376 43.9697 477.327 cv
43.9951 477.276 44.042 477.238 44.1055 477.212 cv
44.1699 477.185 44.2588 477.165 44.3716 477.154 cv
44.4829 477.144 44.6338 477.14 44.8213 477.14 cv
45.0215 477.14 45.1792 477.144 45.2983 477.152 cv
45.418 477.161 45.5098 477.178 45.5732 477.206 cv
45.6372 477.233 45.6841 477.271 45.7139 477.321 cv
45.7437 477.369 45.7651 477.438 45.7822 477.521 cv
47.3071 483.664 li
47.3198 483.664 li
48.7256 477.495 li
48.7388 477.43 48.7554 477.372 48.7749 477.323 cv
48.7959 477.276 48.8364 477.238 48.894 477.212 cv
48.9536 477.185 49.0366 477.165 49.1455 477.154 cv
49.2539 477.144 49.4053 477.14 49.6011 477.14 cv
49.7861 477.14 49.9287 477.144 50.0317 477.154 cv
50.1333 477.165 50.2061 477.192 50.2529 477.24 cv
50.2979 477.284 50.3193 477.353 50.3125 477.442 cv
50.3062 477.531 50.2847 477.653 50.2466 477.809 cv
48.3975 484.838 li
cp
ef
96.0386 435.904 mo
96.0386 440.99 li
95.8906 440.99 li
95.8906 435.904 li
96.0386 435.904 li
cp
ef
84.626 437.394 mo
85.939 442.295 li
85.8008 442.332 li
84.4873 437.43 li
84.626 437.394 li
cp
ef
73.981 441.777 mo
76.5239 446.18 li
76.395 446.253 li
73.8608 441.851 li
73.981 441.777 li
cp
ef
57.8145 457.897 mo
62.2168 460.432 li
62.1426 460.561 li
57.7402 458.018 li
57.8145 457.897 li
cp
ef
53.3936 468.523 mo
58.2954 469.837 li
58.2583 469.976 li
53.3569 468.662 li
53.3936 468.523 li
cp
ef
51.8677 479.927 mo
56.9546 479.927 li
56.9546 480.074 li
51.8677 480.074 li
51.8677 479.927 li
cp
ef
53.3569 491.349 mo
58.2583 490.026 li
58.2954 490.165 li
53.3936 491.487 li
53.3569 491.349 li
cp
ef
57.7402 501.984 mo
62.1426 499.451 li
62.2168 499.57 li
57.8145 502.114 li
57.7402 501.984 li
cp
ef
73.8608 518.151 mo
76.395 513.758 li
76.5239 513.823 li
73.981 518.225 li
73.8608 518.151 li
cp
ef
84.4873 522.571 mo
85.8008 517.67 li
85.939 517.707 li
84.626 522.609 li
84.4873 522.571 li
cp
ef
107.313 522.609 mo
105.99 517.707 li
106.128 517.67 li
107.451 522.571 li
107.313 522.609 li
cp
ef
117.948 518.225 mo
115.414 513.823 li
115.534 513.758 li
118.078 518.151 li
117.948 518.225 li
cp
ef
134.114 502.114 mo
129.721 499.57 li
129.786 499.451 li
134.188 501.984 li
134.114 502.114 li
cp
ef
138.535 491.487 mo
133.634 490.165 li
133.671 490.026 li
138.572 491.349 li
138.535 491.487 li
cp
ef
138.572 468.662 mo
133.671 469.976 li
133.634 469.837 li
138.535 468.523 li
138.572 468.662 li
cp
ef
134.188 458.018 mo
129.786 460.561 li
129.721 460.432 li
134.114 457.897 li
134.188 458.018 li
cp
ef
118.078 441.851 mo
115.534 446.253 li
115.414 446.18 li
117.948 441.777 li
118.078 441.851 li
cp
ef
107.451 437.43 mo
106.138 442.332 li
105.999 442.295 li
107.313 437.394 li
107.451 437.43 li
cp
ef
95.8906 524.098 mo
95.8906 519.021 li
96.0386 519.021 li
96.0386 524.098 li
95.8906 524.098 li
cp
ef
62.7808 446.826 mo
63.0952 446.503 63.6133 446.503 63.937 446.826 cv
64.2515 447.141 64.2515 447.659 63.937 447.982 cv
63.6133 448.297 63.0952 448.297 62.7808 447.982 cv
62.4663 447.659 62.4663 447.141 62.7808 446.826 cv
cp
ef
62.8086 513.212 mo
62.4941 512.889 62.4941 512.371 62.8086 512.057 cv
63.1323 511.732 63.6504 511.732 63.9648 512.057 cv
64.2881 512.371 64.2881 512.889 63.9648 513.212 cv
63.6504 513.526 63.1323 513.526 62.8086 513.212 cv
cp
ef
129.194 513.176 mo
128.871 513.499 128.353 513.499 128.038 513.176 cv
127.724 512.86 127.724 512.343 128.038 512.02 cv
128.353 511.705 128.871 511.705 129.194 512.02 cv
129.508 512.343 129.508 512.86 129.194 513.176 cv
cp
ef
129.167 446.799 mo
129.48 447.113 129.48 447.631 129.167 447.945 cv
128.843 448.27 128.325 448.27 128.01 447.945 cv
127.687 447.631 127.687 447.113 128.01 446.799 cv
128.325 446.476 128.843 446.476 129.167 446.799 cv
cp
ef
62.7808 446.826 mo
63.0952 446.503 63.6133 446.503 63.937 446.826 cv
64.2515 447.141 64.2515 447.659 63.937 447.982 cv
63.6133 448.297 63.0952 448.297 62.7808 447.982 cv
62.4663 447.659 62.4663 447.141 62.7808 446.826 cv
cp
ef
55.3267 456.547 mo
55.5488 456.158 56.0479 456.028 56.4458 456.251 cv
56.834 456.473 56.9634 456.973 56.7417 457.37 cv
56.5107 457.759 56.0107 457.888 55.6226 457.666 cv
55.2344 457.443 55.1045 456.944 55.3267 456.547 cv
cp
ef
50.6377 467.876 mo
50.7578 467.441 51.2017 467.183 51.646 467.294 cv
52.0806 467.414 52.3394 467.857 52.2192 468.292 cv
52.0991 468.727 51.6548 468.986 51.2202 468.875 cv
50.7856 468.755 50.5269 468.311 50.6377 467.876 cv
cp
ef
50.6563 492.172 mo
50.5361 491.737 50.7949 491.284 51.2295 491.173 cv
51.6646 491.053 52.1172 491.312 52.2285 491.747 cv
52.3486 492.182 52.0898 492.635 51.6548 492.745 cv
51.2202 492.866 50.7671 492.606 50.6563 492.172 cv
cp
ef
55.3452 503.492 mo
55.1235 503.104 55.2524 502.595 55.6499 502.373 cv
56.0386 502.151 56.5381 502.281 56.7603 502.669 cv
56.9819 503.066 56.853 503.565 56.4639 503.788 cv
56.0757 504.01 55.5762 503.881 55.3452 503.492 cv
cp
ef
62.8086 513.212 mo
62.4941 512.889 62.4941 512.371 62.8086 512.057 cv
63.1323 511.732 63.6504 511.732 63.9648 512.057 cv
64.2881 512.371 64.2881 512.889 63.9648 513.212 cv
63.6504 513.526 63.1323 513.526 62.8086 513.212 cv
cp
ef
72.5376 520.666 mo
72.1499 520.436 72.0112 519.937 72.2329 519.548 cv
72.4639 519.159 72.9639 519.021 73.3516 519.252 cv
73.7407 519.474 73.8789 519.973 73.6479 520.361 cv
73.4258 520.75 72.9268 520.889 72.5376 520.666 cv
cp
ef
83.8584 525.347 mo
83.4238 525.227 83.1646 524.782 83.2847 524.348 cv
83.3955 523.913 83.8486 523.654 84.2837 523.773 cv
84.7183 523.885 84.9775 524.338 84.8569 524.772 cv
84.7461 525.207 84.2925 525.466 83.8584 525.347 cv
cp
ef
108.154 525.337 mo
107.719 525.457 107.275 525.198 107.155 524.755 cv
107.044 524.32 107.294 523.876 107.738 523.756 cv
108.172 523.645 108.616 523.903 108.736 524.338 cv
108.848 524.772 108.589 525.217 108.154 525.337 cv
cp
ef
119.475 520.639 mo
119.086 520.87 118.586 520.731 118.364 520.343 cv
118.133 519.954 118.272 519.455 118.66 519.224 cv
119.049 519.002 119.548 519.131 119.771 519.529 cv
120.001 519.918 119.862 520.417 119.475 520.639 cv
cp
ef
129.194 513.176 mo
128.871 513.499 128.353 513.499 128.038 513.176 cv
127.724 512.86 127.724 512.343 128.038 512.02 cv
128.353 511.705 128.871 511.705 129.194 512.02 cv
129.508 512.343 129.508 512.86 129.194 513.176 cv
cp
ef
136.648 503.455 mo
136.426 503.844 135.927 503.973 135.53 503.751 cv
135.141 503.529 135.011 503.029 135.233 502.632 cv
135.456 502.244 135.955 502.114 136.353 502.336 cv
136.741 502.567 136.871 503.066 136.648 503.455 cv
cp
ef
141.328 492.126 mo
141.217 492.569 140.764 492.828 140.33 492.708 cv
139.895 492.588 139.636 492.145 139.756 491.71 cv
139.867 491.274 140.32 491.016 140.755 491.127 cv
141.189 491.247 141.448 491.69 141.328 492.126 cv
cp
ef
141.319 467.83 mo
141.439 468.265 141.181 468.718 140.746 468.829 cv
140.312 468.949 139.858 468.689 139.747 468.256 cv
139.626 467.821 139.886 467.367 140.32 467.257 cv
140.755 467.137 141.208 467.396 141.319 467.83 cv
cp
ef
136.629 456.51 mo
136.852 456.907 136.723 457.407 136.325 457.629 cv
135.937 457.851 135.437 457.722 135.215 457.333 cv
134.984 456.936 135.123 456.436 135.511 456.214 cv
135.899 455.992 136.399 456.121 136.629 456.51 cv
cp
ef
129.167 446.799 mo
129.48 447.113 129.48 447.631 129.167 447.945 cv
128.843 448.27 128.325 448.27 128.01 447.945 cv
127.687 447.631 127.687 447.113 128.01 446.799 cv
128.325 446.476 128.843 446.476 129.167 446.799 cv
cp
ef
119.437 439.345 mo
119.826 439.566 119.964 440.066 119.733 440.454 cv
119.511 440.843 119.012 440.981 118.624 440.751 cv
118.235 440.528 118.096 440.029 118.328 439.641 cv
118.549 439.252 119.049 439.113 119.437 439.345 cv
cp
ef
108.117 434.655 mo
108.552 434.776 108.811 435.22 108.69 435.654 cv
108.58 436.089 108.126 436.348 107.691 436.237 cv
107.257 436.117 106.998 435.673 107.118 435.238 cv
107.229 434.794 107.682 434.535 108.117 434.655 cv
cp
ef
83.8213 434.665 mo
84.2559 434.554 84.7002 434.813 84.8203 435.247 cv
84.9312 435.683 84.6719 436.126 84.2373 436.246 cv
83.8027 436.357 83.3589 436.099 83.2383 435.663 cv
83.1274 435.229 83.3867 434.785 83.8213 434.665 cv
cp
ef
72.501 439.363 mo
72.8896 439.132 73.3892 439.271 73.6108 439.659 cv
73.8423 440.048 73.7031 440.547 73.3149 440.778 cv
72.9268 441 72.4272 440.87 72.1958 440.473 cv
71.9741 440.085 72.1128 439.585 72.501 439.363 cv
cp
ef
62.7808 446.826 mo
63.0952 446.503 63.6133 446.503 63.937 446.826 cv
64.2515 447.141 64.2515 447.659 63.937 447.982 cv
63.6133 448.297 63.0952 448.297 62.7808 447.982 cv
62.4663 447.659 62.4663 447.141 62.7808 446.826 cv
cp
ef
62.8086 513.212 mo
62.4941 512.889 62.4941 512.371 62.8086 512.057 cv
63.1323 511.732 63.6504 511.732 63.9648 512.057 cv
64.2881 512.371 64.2881 512.889 63.9648 513.212 cv
63.6504 513.526 63.1323 513.526 62.8086 513.212 cv
cp
ef
93.5874 436.376 mo
93.7725 436.367 li
93.8833 438.54 li
93.708 438.549 li
93.5874 436.376 li
cp
ef
91.3125 436.561 mo
91.4883 436.542 li
91.7197 438.706 li
91.5342 438.725 li
91.3125 436.561 li
cp
ef
89.0469 436.866 mo
89.2222 436.838 li
89.5552 438.983 li
89.3799 439.012 li
89.0469 436.866 li
cp
ef
86.7993 437.291 mo
86.9746 437.255 li
87.4189 439.372 li
87.2432 439.409 li
86.7993 437.291 li
cp
ef
82.3789 438.484 mo
82.5542 438.429 li
83.2202 440.491 li
83.0537 440.547 li
82.3789 438.484 li
cp
ef
80.2231 439.252 mo
80.3901 439.188 li
81.167 441.213 li
81.0005 441.277 li
80.2231 439.252 li
cp
ef
78.1152 440.131 mo
78.2817 440.057 li
79.1602 442.036 li
78.9932 442.109 li
78.1152 440.131 li
cp
ef
76.0522 441.12 mo
76.2095 441.037 li
77.1992 442.971 li
77.042 443.053 li
76.0522 441.12 li
cp
ef
72.0942 443.414 mo
72.2515 443.312 li
73.4258 445.135 li
73.2783 445.227 li
72.0942 443.414 li
cp
ef
70.2168 444.709 mo
70.3555 444.607 li
71.6318 446.364 li
71.4927 446.466 li
70.2168 444.709 li
cp
ef
68.4038 446.105 mo
68.543 445.994 li
69.9116 447.678 li
69.7725 447.788 li
68.4038 446.105 li
cp
ef
66.665 447.594 mo
66.8042 447.474 li
68.2559 449.093 li
68.1172 449.203 li
66.665 447.594 li
cp
ef
65.0098 449.176 mo
65.1392 449.047 li
66.6748 450.582 li
66.5449 450.711 li
65.0098 449.176 li
cp
ef
63.4375 450.841 mo
63.5581 450.702 li
65.1763 452.153 li
65.0562 452.283 li
63.4375 450.841 li
cp
ef
61.958 452.579 mo
62.0688 452.44 li
63.7612 453.8 li
63.6411 453.948 li
61.958 452.579 li
cp
ef
60.5703 454.392 mo
60.6724 454.253 li
62.4292 455.529 li
62.3276 455.668 li
60.5703 454.392 li
cp
ef
59.2754 456.278 mo
59.3774 456.131 li
61.1992 457.314 li
61.0977 457.462 li
59.2754 456.278 li
cp
ef
57.001 460.246 mo
57.084 460.089 li
59.0171 461.069 li
58.9336 461.236 li
57.001 460.246 li
cp
ef
56.0205 462.318 mo
56.0942 462.151 li
58.0732 463.03 li
57.9995 463.196 li
56.0205 462.318 li
cp
ef
55.1509 464.427 mo
55.2153 464.26 li
57.2412 465.037 li
57.1763 465.203 li
55.1509 464.427 li
cp
ef
54.3926 466.59 mo
54.4478 466.415 li
56.5107 467.09 li
56.4546 467.257 li
54.3926 466.59 li
cp
ef
53.2178 471.002 mo
53.2549 470.836 li
55.3726 471.28 li
55.3359 471.455 li
53.2178 471.002 li
cp
ef
52.8018 473.259 mo
52.8291 473.083 li
54.9751 473.416 li
54.9478 473.592 li
52.8018 473.259 li
cp
ef
52.5059 475.524 mo
52.5244 475.349 li
54.6885 475.57 li
54.6699 475.747 li
52.5059 475.524 li
cp
ef
52.3394 477.809 mo
52.3486 477.624 li
54.5127 477.735 li
54.5034 477.92 li
52.3394 477.809 li
cp
ef
52.3486 482.378 mo
52.3394 482.202 li
54.5034 482.082 li
54.5127 482.267 li
52.3486 482.378 li
cp
ef
52.5244 484.653 mo
52.5059 484.478 li
54.6699 484.255 li
54.6885 484.431 li
52.5244 484.653 li
cp
ef
52.8291 486.928 mo
52.8018 486.743 li
54.9478 486.41 li
54.9751 486.586 li
52.8291 486.928 li
cp
ef
53.2549 489.176 mo
53.2178 489 li
55.3359 488.547 li
55.3726 488.723 li
53.2549 489.176 li
cp
ef
54.4478 493.587 mo
54.3926 493.42 li
56.4546 492.745 li
56.5107 492.912 li
54.4478 493.587 li
cp
ef
55.2153 495.742 mo
55.1509 495.575 li
57.1763 494.799 li
57.2412 494.965 li
55.2153 495.742 li
cp
ef
56.0942 497.851 mo
56.0205 497.693 li
57.9995 496.806 li
58.0732 496.972 li
56.0942 497.851 li
cp
ef
57.084 499.913 mo
57.001 499.756 li
58.9336 498.766 li
59.0171 498.933 li
57.084 499.913 li
cp
ef
59.3774 503.871 mo
59.2754 503.724 li
61.0977 502.539 li
61.1992 502.688 li
59.3774 503.871 li
cp
ef
60.6724 505.749 mo
60.5703 505.609 li
62.3276 504.334 li
62.4292 504.481 li
60.6724 505.749 li
cp
ef
62.0688 507.562 mo
61.958 507.423 li
63.6411 506.063 li
63.7612 506.202 li
62.0688 507.562 li
cp
ef
63.5581 509.3 mo
63.4375 509.171 li
65.0562 507.719 li
65.1763 507.848 li
63.5581 509.3 li
cp
ef
65.1392 510.956 mo
65.0098 510.826 li
66.5449 509.291 li
66.6748 509.42 li
65.1392 510.956 li
cp
ef
66.8042 512.528 mo
66.665 512.407 li
68.1172 510.799 li
68.2559 510.919 li
66.8042 512.528 li
cp
ef
68.543 514.008 mo
68.4038 513.896 li
69.7725 512.214 li
69.9116 512.325 li
68.543 514.008 li
cp
ef
70.3643 515.395 mo
70.2168 515.293 li
71.4927 513.536 li
71.6318 513.647 li
70.3643 515.395 li
cp
ef
72.2515 516.689 mo
72.0942 516.588 li
73.2783 514.775 li
73.4258 514.868 li
72.2515 516.689 li
cp
ef
76.2095 518.965 mo
76.0522 518.882 li
77.042 516.948 li
77.1992 517.032 li
76.2095 518.965 li
cp
ef
78.2817 519.945 mo
78.1152 519.871 li
78.9932 517.892 li
79.1602 517.966 li
78.2817 519.945 li
cp
ef
80.3901 520.814 mo
80.2231 520.75 li
81.0005 518.725 li
81.167 518.789 li
80.3901 520.814 li
cp
ef
82.5542 521.582 mo
82.3789 521.518 li
83.0537 519.455 li
83.2202 519.511 li
82.5542 521.582 li
cp
ef
86.9746 522.747 mo
86.7993 522.711 li
87.2432 520.593 li
87.4189 520.63 li
86.9746 522.747 li
cp
ef
89.2222 523.164 mo
89.0469 523.136 li
89.3799 520.99 li
89.5645 521.019 li
89.2222 523.164 li
cp
ef
91.4883 523.46 mo
91.3125 523.441 li
91.5342 521.286 li
91.7197 521.305 li
91.4883 523.46 li
cp
ef
93.7725 523.636 mo
93.5874 523.626 li
93.708 521.453 li
93.8833 521.462 li
93.7725 523.636 li
cp
ef
98.3413 523.626 mo
98.1655 523.636 li
98.0547 521.462 li
98.23 521.453 li
98.3413 523.626 li
cp
ef
100.625 523.441 mo
100.44 523.46 li
100.219 521.305 li
100.395 521.286 li
100.625 523.441 li
cp
ef
102.892 523.136 mo
102.716 523.164 li
102.374 521.019 li
102.549 520.99 li
102.892 523.136 li
cp
ef
105.139 522.711 mo
104.963 522.747 li
104.51 520.63 li
104.686 520.593 li
105.139 522.711 li
cp
ef
109.551 521.518 mo
109.384 521.573 li
108.709 519.511 li
108.884 519.455 li
109.551 521.518 li
cp
ef
111.705 520.75 mo
111.539 520.814 li
110.762 518.789 li
110.929 518.725 li
111.705 520.75 li
cp
ef
113.814 519.871 mo
113.657 519.945 li
112.769 517.966 li
112.936 517.892 li
113.814 519.871 li
cp
ef
115.876 518.882 mo
115.719 518.965 li
114.739 517.032 li
114.896 516.948 li
115.876 518.882 li
cp
ef
119.834 516.588 mo
119.687 516.689 li
118.503 514.868 li
118.65 514.775 li
119.834 516.588 li
cp
ef
121.721 515.293 mo
121.573 515.395 li
120.297 513.638 li
120.445 513.536 li
121.721 515.293 li
cp
ef
123.525 513.896 mo
123.387 514.008 li
122.027 512.325 li
122.166 512.214 li
123.525 513.896 li
cp
ef
125.264 512.407 mo
125.134 512.528 li
123.682 510.919 li
123.812 510.799 li
125.264 512.407 li
cp
ef
126.919 510.826 mo
126.79 510.956 li
125.264 509.42 li
125.384 509.291 li
126.919 510.826 li
cp
ef
128.491 509.171 mo
128.371 509.3 li
126.762 507.848 li
126.882 507.719 li
128.491 509.171 li
cp
ef
129.971 507.423 mo
129.86 507.562 li
128.177 506.202 li
128.288 506.063 li
129.971 507.423 li
cp
ef
131.358 505.609 mo
131.257 505.749 li
129.5 504.473 li
129.61 504.334 li
131.358 505.609 li
cp
ef
132.653 503.724 mo
132.561 503.871 li
130.739 502.688 li
130.832 502.539 li
132.653 503.724 li
cp
ef
134.928 499.756 mo
134.854 499.913 li
132.921 498.933 li
132.995 498.766 li
134.928 499.756 li
cp
ef
135.909 497.685 mo
135.844 497.851 li
133.855 496.972 li
133.929 496.806 li
135.909 497.685 li
cp
ef
136.787 495.575 mo
136.723 495.742 li
134.697 494.965 li
134.762 494.799 li
136.787 495.575 li
cp
ef
137.546 493.411 mo
137.49 493.587 li
135.428 492.912 li
135.483 492.745 li
137.546 493.411 li
cp
ef
138.72 489 mo
138.683 489.176 li
136.556 488.723 li
136.593 488.547 li
138.72 489 li
cp
ef
139.127 486.743 mo
139.1 486.919 li
136.963 486.586 li
136.991 486.41 li
139.127 486.743 li
cp
ef
139.423 484.478 mo
139.405 484.653 li
137.25 484.431 li
137.268 484.255 li
139.423 484.478 li
cp
ef
139.599 482.202 mo
139.59 482.378 li
137.426 482.267 li
137.435 482.082 li
139.599 482.202 li
cp
ef
139.59 477.624 mo
139.599 477.8 li
137.435 477.92 li
137.426 477.735 li
139.59 477.624 li
cp
ef
139.405 475.349 mo
139.423 475.524 li
137.268 475.747 li
137.25 475.57 li
139.405 475.349 li
cp
ef
139.1 473.073 mo
139.127 473.259 li
136.991 473.592 li
136.963 473.416 li
139.1 473.073 li
cp
ef
138.683 470.826 mo
138.72 471.002 li
136.593 471.455 li
136.556 471.28 li
138.683 470.826 li
cp
ef
137.49 466.415 mo
137.546 466.59 li
135.483 467.257 li
135.428 467.09 li
137.49 466.415 li
cp
ef
136.723 464.26 mo
136.787 464.427 li
134.762 465.203 li
134.697 465.037 li
136.723 464.26 li
cp
ef
135.834 462.151 mo
135.909 462.318 li
133.929 463.196 li
133.855 463.03 li
135.834 462.151 li
cp
ef
134.854 460.089 mo
134.928 460.246 li
132.995 461.236 li
132.921 461.069 li
134.854 460.089 li
cp
ef
132.551 456.131 mo
132.653 456.278 li
130.832 457.462 li
130.739 457.314 li
132.551 456.131 li
cp
ef
131.257 454.253 mo
131.358 454.392 li
129.61 455.668 li
129.5 455.529 li
131.257 454.253 li
cp
ef
129.86 452.44 mo
129.971 452.579 li
128.288 453.938 li
128.177 453.8 li
129.86 452.44 li
cp
ef
128.371 450.702 mo
128.491 450.831 li
126.882 452.283 li
126.762 452.153 li
128.371 450.702 li
cp
ef
126.79 449.047 mo
126.919 449.176 li
125.384 450.711 li
125.264 450.582 li
126.79 449.047 li
cp
ef
125.134 447.474 mo
125.264 447.594 li
123.812 449.203 li
123.682 449.093 li
125.134 447.474 li
cp
ef
123.387 445.994 mo
123.525 446.105 li
122.166 447.788 li
122.027 447.678 li
123.387 445.994 li
cp
ef
121.573 444.607 mo
121.712 444.709 li
120.445 446.466 li
120.297 446.364 li
121.573 444.607 li
cp
ef
119.687 443.312 mo
119.834 443.414 li
118.65 445.227 li
118.503 445.135 li
119.687 443.312 li
cp
ef
115.719 441.037 mo
115.876 441.12 li
114.896 443.053 li
114.739 442.971 li
115.719 441.037 li
cp
ef
113.657 440.057 mo
113.814 440.131 li
112.936 442.109 li
112.769 442.036 li
113.657 440.057 li
cp
ef
111.539 439.188 mo
111.705 439.252 li
110.929 441.277 li
110.762 441.213 li
111.539 439.188 li
cp
ef
109.384 438.429 mo
109.551 438.484 li
108.884 440.547 li
108.709 440.491 li
109.384 438.429 li
cp
ef
104.963 437.255 mo
105.139 437.291 li
104.686 439.409 li
104.51 439.372 li
104.963 437.255 li
cp
ef
102.716 436.838 mo
102.892 436.866 li
102.549 439.012 li
102.374 438.983 li
102.716 436.838 li
cp
ef
100.44 436.542 mo
100.625 436.561 li
100.395 438.725 li
100.219 438.706 li
100.44 436.542 li
cp
ef
98.1655 436.367 mo
98.3413 436.376 li
98.23 438.549 li
98.0454 438.54 li
98.1655 436.367 li
cp
ef
67.1836 451.849 mo
67.2666 451.941 li
67.3774 451.867 67.479 451.821 67.5625 451.821 cv
67.6455 451.821 67.7661 451.849 67.9321 451.923 cv
70.4297 453.032 li
70.5127 452.949 li
69.7725 450.942 li
71.6875 451.784 li
71.7793 451.682 li
70.6426 449.111 li
70.5498 448.88 70.5498 448.694 70.6699 448.538 cv
70.5864 448.445 li
69.9023 449.12 li
69.9946 449.213 li
70.0869 449.12 70.1611 449.074 70.2168 449.074 cv
70.2632 449.064 70.3091 449.074 70.3369 449.102 cv
70.3926 449.157 70.4385 449.24 70.4941 449.352 cv
71.2246 450.988 li
69.5049 450.249 li
69.4673 450.23 69.4307 450.202 69.4028 450.175 cv
69.3472 450.119 69.3198 450.063 69.3198 450.008 cv
69.3286 449.925 69.3843 449.823 69.4951 449.712 cv
69.4028 449.629 li
68.3857 450.646 li
68.478 450.729 li
68.5703 450.637 68.6538 450.591 68.7095 450.582 cv
68.8018 450.554 68.9214 450.572 69.0513 450.628 cv
69.4858 450.813 li
70.0317 452.292 li
68.3301 451.516 li
68.2373 451.479 68.1636 451.433 68.1084 451.386 cv
68.0713 451.34 68.0435 451.294 68.0527 451.247 cv
68.0527 451.192 68.0894 451.127 68.1636 451.034 cv
68.0801 450.951 li
67.1836 451.849 li
67.1836 451.849 li
cp
65.9165 453.893 mo
65.8608 453.347 65.9531 452.949 66.1841 452.727 cv
66.2954 452.607 66.4248 452.533 66.5728 452.515 cv
66.7109 452.486 66.8779 452.515 67.063 452.598 cv
67.1924 452.662 67.3496 452.782 67.5439 452.977 cv
68.4688 453.901 li
68.6074 454.041 68.7095 454.114 68.7739 454.143 cv
68.8296 454.17 68.8945 454.17 68.9497 454.151 cv
69.0142 454.133 69.0884 454.077 69.1904 453.976 cv
69.2822 454.059 li
68.2192 455.122 li
68.1265 455.039 li
68.1729 454.993 li
68.2739 454.892 68.3301 454.808 68.3394 454.734 cv
68.3486 454.669 68.3301 454.595 68.2837 454.521 cv
68.2739 454.493 68.2002 454.41 68.0801 454.29 cv
67.1924 453.402 li
66.9985 453.208 66.8223 453.088 66.6841 453.051 cv
66.5449 453.014 66.4155 453.051 66.2954 453.171 cv
66.1104 453.355 66.0273 453.643 66.0547 454.031 cv
67.1924 455.178 li
67.3403 455.326 67.4326 455.4 67.4883 455.418 cv
67.5532 455.446 67.6177 455.446 67.6826 455.428 cv
67.7383 455.409 67.8213 455.345 67.9419 455.225 cv
68.0342 455.308 li
66.9609 456.38 li
66.8779 456.297 li
66.9243 456.241 li
67.0352 456.14 67.0815 456.038 67.063 455.945 cv
67.0444 455.844 66.9609 455.724 66.8042 455.566 cv
66.0088 454.771 li
65.7495 454.512 65.583 454.354 65.5186 454.318 cv
65.4443 454.271 65.3887 454.244 65.3428 454.253 cv
65.3057 454.253 65.2593 454.281 65.2222 454.318 cv
65.1763 454.364 65.1299 454.429 65.0933 454.512 cv
64.9727 454.457 li
65.3613 453.541 li
65.4629 453.448 li
65.9165 453.893 li
65.9165 453.893 li
cp
ef
123.571 506.646 mo
123.405 506.451 123.331 506.248 123.331 506.045 cv
123.331 505.841 123.395 505.675 123.525 505.545 cv
123.608 505.462 123.719 505.407 123.849 505.379 cv
123.969 505.351 124.098 505.36 124.228 505.407 cv
124.312 505.443 124.422 505.526 124.57 505.656 cv
123.571 506.646 li
123.571 506.646 li
cp
123.701 506.785 mo
125.19 505.296 li
124.921 505.027 124.635 504.897 124.32 504.889 cv
124.005 504.889 123.729 505.009 123.488 505.249 cv
123.201 505.536 123.072 505.869 123.09 506.267 cv
123.109 506.655 123.294 507.043 123.664 507.403 cv
124.005 507.746 124.367 507.922 124.755 507.94 cv
125.134 507.959 125.458 507.839 125.717 507.58 cv
125.958 507.349 126.068 507.063 126.05 506.72 cv
126.031 506.387 125.93 506.101 125.745 505.851 cv
125.625 505.878 li
125.745 506.137 125.791 506.359 125.763 506.535 cv
125.735 506.72 125.652 506.877 125.513 507.016 cv
125.301 507.229 125.023 507.321 124.69 507.303 cv
124.348 507.274 124.024 507.099 123.701 506.785 cv
123.701 506.785 li
123.701 506.785 li
cp
121.989 506.748 mo
122.72 507.479 li
122.637 507.562 li
122.351 507.386 122.119 507.312 121.943 507.321 cv
121.768 507.33 121.61 507.403 121.462 507.553 cv
121.361 507.663 121.296 507.774 121.287 507.904 cv
121.277 508.024 121.305 508.126 121.379 508.19 cv
121.462 508.282 121.564 508.329 121.675 508.348 cv
121.795 508.366 121.962 508.329 122.175 508.255 cv
122.683 508.079 li
123.165 507.913 123.525 507.959 123.775 508.218 cv
123.969 508.412 124.062 508.644 124.024 508.912 cv
123.997 509.18 123.895 509.402 123.709 509.587 cv
123.58 509.716 123.405 509.846 123.192 509.966 cv
123.127 510.003 123.072 510.04 123.044 510.077 cv
123.007 510.104 122.998 510.16 123.017 510.216 cv
122.942 510.289 li
122.166 509.522 li
122.249 509.448 li
122.508 509.624 122.757 509.707 122.998 509.688 cv
123.229 509.68 123.423 509.596 123.58 509.439 cv
123.682 509.337 123.747 509.217 123.747 509.087 cv
123.756 508.948 123.709 508.838 123.618 508.755 cv
123.516 508.644 123.387 508.588 123.238 508.598 cv
123.081 508.598 122.84 508.652 122.499 508.773 cv
122.166 508.884 121.916 508.93 121.749 508.912 cv
121.592 508.894 121.444 508.819 121.305 508.681 cv
121.129 508.505 121.037 508.292 121.046 508.052 cv
121.046 507.812 121.139 507.599 121.333 507.403 cv
121.417 507.321 121.537 507.237 121.694 507.154 cv
121.805 507.099 121.87 507.053 121.888 507.025 cv
121.916 507.007 121.934 506.979 121.934 506.951 cv
121.934 506.924 121.925 506.886 121.906 506.831 cv
121.989 506.748 li
121.989 506.748 li
cp
ef
124.515 452.616 mo
124.709 452.449 124.912 452.366 125.116 452.376 cv
125.319 452.376 125.485 452.44 125.615 452.57 cv
125.698 452.653 125.754 452.765 125.781 452.885 cv
125.81 453.014 125.8 453.144 125.754 453.272 cv
125.717 453.347 125.634 453.467 125.504 453.605 cv
124.515 452.616 li
124.515 452.616 li
cp
124.375 452.746 mo
125.865 454.234 li
126.133 453.966 126.263 453.68 126.272 453.365 cv
126.272 453.051 126.151 452.773 125.911 452.533 cv
125.634 452.246 125.292 452.116 124.894 452.136 cv
124.505 452.145 124.117 452.339 123.756 452.709 cv
123.414 453.051 123.238 453.411 123.22 453.791 cv
123.201 454.179 123.321 454.503 123.58 454.762 cv
123.821 454.993 124.108 455.104 124.44 455.086 cv
124.773 455.076 125.06 454.975 125.31 454.789 cv
125.292 454.669 li
125.023 454.789 124.801 454.836 124.626 454.808 cv
124.44 454.78 124.283 454.697 124.145 454.549 cv
123.932 454.346 123.839 454.068 123.858 453.726 cv
123.886 453.394 124.062 453.06 124.375 452.746 cv
124.375 452.746 li
124.375 452.746 li
cp
122.665 450.184 mo
123.22 450.138 123.608 450.23 123.839 450.452 cv
123.95 450.572 124.024 450.702 124.052 450.85 cv
124.08 450.988 124.043 451.155 123.959 451.34 cv
123.904 451.469 123.775 451.627 123.58 451.821 cv
122.656 452.746 li
122.526 452.875 122.442 452.977 122.416 453.051 cv
122.396 453.106 122.396 453.162 122.406 453.227 cv
122.425 453.282 122.489 453.365 122.591 453.467 cv
122.499 453.56 li
121.435 452.496 li
121.527 452.403 li
121.573 452.449 li
121.666 452.552 121.749 452.607 121.823 452.616 cv
121.897 452.625 121.971 452.607 122.036 452.561 cv
122.073 452.542 122.147 452.478 122.267 452.357 cv
123.155 451.469 li
123.349 451.275 123.469 451.1 123.507 450.961 cv
123.543 450.822 123.507 450.692 123.387 450.572 cv
123.201 450.387 122.915 450.304 122.526 450.322 cv
121.389 451.469 li
121.241 451.617 121.157 451.71 121.139 451.765 cv
121.12 451.83 121.12 451.895 121.129 451.95 cv
121.148 452.015 121.222 452.099 121.333 452.219 cv
121.25 452.302 li
120.177 451.238 li
120.27 451.146 li
120.316 451.201 li
120.426 451.303 120.529 451.358 120.621 451.34 cv
120.714 451.321 120.843 451.238 120.991 451.081 cv
121.795 450.276 li
122.055 450.018 122.203 449.86 122.249 449.786 cv
122.295 449.722 122.313 449.666 122.313 449.619 cv
122.304 449.573 122.286 449.536 122.239 449.49 cv
122.203 449.453 122.138 449.407 122.055 449.37 cv
122.101 449.25 li
123.017 449.638 li
123.118 449.74 li
122.665 450.184 li
122.665 450.184 li
cp
ef
68.5981 505.971 mo
68.5059 506.063 li
68.5796 506.174 68.626 506.275 68.626 506.359 cv
68.626 506.442 68.5981 506.563 68.5244 506.72 cv
67.4146 509.227 li
67.4976 509.31 li
69.5049 508.561 li
68.6724 510.484 li
68.7646 510.576 li
71.3354 509.439 li
71.5669 509.337 71.7612 509.347 71.9092 509.467 cv
72.0015 509.374 li
71.3267 508.699 li
71.2339 508.782 li
71.3267 508.875 71.3726 508.948 71.3818 509.004 cv
71.3818 509.06 71.3726 509.106 71.3447 509.134 cv
71.2896 509.18 71.2065 509.235 71.0952 509.291 cv
69.458 510.021 li
70.1987 508.302 li
70.2168 508.255 70.2441 508.218 70.2725 508.19 cv
70.3276 508.135 70.3833 508.106 70.4385 508.116 cv
70.522 508.126 70.6235 508.182 70.7344 508.282 cv
70.8271 508.199 li
69.8008 507.183 li
69.7173 507.266 li
69.8101 507.367 69.856 507.441 69.8745 507.496 cv
69.8926 507.599 69.8838 507.709 69.8286 507.839 cv
69.6343 508.282 li
68.1538 508.828 li
68.9312 507.117 li
68.9683 507.025 69.0142 506.951 69.061 506.905 cv
69.1069 506.858 69.1533 506.84 69.2085 506.84 cv
69.2549 506.849 69.3198 506.886 69.4121 506.96 cv
69.4951 506.877 li
68.5981 505.971 li
68.5981 505.971 li
cp
68.293 505.545 mo
67.5625 506.275 li
67.4883 506.202 li
67.6553 505.915 67.7383 505.685 67.729 505.508 cv
67.7197 505.332 67.6362 505.176 67.4976 505.027 cv
67.3867 504.916 67.2759 504.861 67.146 504.853 cv
67.0259 504.843 66.9243 504.87 66.8501 504.944 cv
66.7671 505.027 66.7109 505.129 66.7021 505.24 cv
66.6841 505.351 66.7207 505.518 66.7949 505.739 cv
66.9707 506.248 li
67.1279 506.72 67.0815 507.09 66.8315 507.339 cv
66.6377 507.534 66.4063 507.617 66.1382 507.589 cv
65.8701 507.562 65.6479 507.46 65.4629 507.274 cv
65.334 507.146 65.2041 506.97 65.084 506.757 cv
65.0469 506.683 65.0098 506.636 64.9727 506.6 cv
64.936 506.572 64.8896 506.563 64.834 506.581 cv
64.7505 506.498 li
65.5278 505.73 li
65.6016 505.805 li
65.4258 506.072 65.3428 506.322 65.3613 506.553 cv
65.3706 506.794 65.4536 506.988 65.6016 507.136 cv
65.7129 507.247 65.833 507.303 65.9624 507.312 cv
66.0918 507.312 66.2124 507.274 66.2954 507.183 cv
66.4063 507.071 66.4526 506.941 66.4526 506.794 cv
66.4526 506.646 66.3877 506.405 66.2769 506.063 cv
66.166 505.721 66.1104 505.472 66.1382 505.313 cv
66.1567 505.157 66.2305 504.999 66.3696 504.87 cv
66.5449 504.694 66.7578 504.602 66.9985 504.602 cv
67.2388 504.602 67.4512 504.703 67.6455 504.897 cv
67.729 504.981 67.812 505.102 67.895 505.259 cv
67.9512 505.36 67.9971 505.425 68.0151 505.453 cv
68.0435 505.48 68.0713 505.49 68.0991 505.499 cv
68.1172 505.499 68.1636 505.49 68.2192 505.472 cv
68.293 505.545 li
68.293 505.545 li
cp
ef
126.836 449.147 mo
126.836 449.147 li
118.947 441.25 108.034 436.367 95.9829 436.367 cv
83.9414 436.367 73.0283 441.25 65.1299 449.147 cv
57.2412 457.046 52.3579 467.95 52.3579 480.001 cv
52.3579 492.052 57.2412 502.955 65.1299 510.854 cv
73.0283 518.752 83.9414 523.636 95.9829 523.636 cv
108.034 523.636 118.947 518.752 126.836 510.854 cv
134.734 502.955 139.618 492.052 139.618 480.001 cv
139.618 467.95 134.734 457.046 126.836 449.147 cv
cp
95.9829 435.441 mo
108.292 435.441 119.428 440.436 127.493 448.491 cv
135.557 456.556 140.542 467.701 140.542 480.001 cv
140.542 492.302 135.557 503.445 127.493 511.511 cv
119.428 519.575 108.292 524.561 95.9829 524.561 cv
83.6826 524.561 72.5474 519.575 64.4829 511.511 cv
56.418 503.445 51.4331 492.302 51.4331 480.001 cv
51.4331 467.701 56.418 456.556 64.4829 448.491 cv
72.5474 440.436 83.6826 435.441 95.9829 435.441 cv
95.9829 435.441 li
cp
ef
120.565 455.428 mo
120.565 455.428 li
114.276 449.139 105.583 445.245 95.9829 445.245 cv
86.3921 445.245 77.6987 449.139 71.4097 455.428 cv
65.1211 461.717 61.2275 470.401 61.2275 480.001 cv
61.2275 489.601 65.1211 498.285 71.4097 504.574 cv
77.6987 510.872 86.3921 514.757 95.9829 514.757 cv
105.583 514.757 114.276 510.872 120.565 504.574 cv
126.854 498.285 130.748 489.601 130.748 480.001 cv
130.748 470.401 126.854 461.717 120.565 455.428 cv
cp
95.9829 445.042 mo
105.639 445.042 114.378 448.954 120.704 455.28 cv
127.03 461.605 130.952 470.346 130.952 480.001 cv
130.952 489.656 127.03 498.396 120.704 504.722 cv
114.378 511.048 105.639 514.96 95.9829 514.96 cv
86.3369 514.96 77.5972 511.048 71.2617 504.722 cv
64.936 498.396 61.0239 489.656 61.0239 480.001 cv
61.0239 470.346 64.936 461.605 71.2617 455.28 cv
77.5972 448.954 86.3369 445.042 95.9829 445.042 cv
95.9829 445.042 li
cp
ef
134.634 479.909 mo
139.721 479.909 li
139.721 480.057 li
134.634 480.057 li
134.634 479.909 li
cp
ef
127.225 449.053 mo
107.526 460.403 li
92.9175 468.823 li
96 480 li
127.225 449.053 li
cp
.184314 .741176 .788235 rgb
ef
127.225 449.053 mo
115.708 468.658 li
107.157 483.191 li
96 480 li
127.225 449.053 li
cp
.152941 .619608 .647059 rgb
ef
64.7754 510.947 mo
76.3018 491.351 li
84.8521 476.818 li
96 480 li
64.7754 510.947 li
cp
.886275 .262745 .282353 rgb
ef
64.7754 510.947 mo
84.4834 499.605 li
99.0918 491.186 li
96 480 li
64.7754 510.947 li
cp
.678431 .145098 .184314 rgb
ef
87.644 488.281 mo
92.2183 492.896 99.666 492.929 104.281 488.354 cv
108.896 483.781 108.929 476.333 104.356 471.718 cv
87.644 488.281 li
cp
.196078 .207843 .282353 rgb
ef
87.644 488.281 mo
83.0708 483.666 83.104 476.218 87.7188 471.645 cv
92.334 467.07 99.7822 467.104 104.356 471.718 cv
87.644 488.281 li
cp
.313726 .282353 .32549 rgb
ef
89.7759 486.168 mo
93.1831 489.604 98.731 489.63 102.168 486.223 cv
105.605 482.816 105.63 477.269 102.224 473.831 cv
89.7759 486.168 li
cp
.898039 .854902 .788235 rgb
ef
89.7759 486.168 mo
86.3701 482.73 86.395 477.183 89.832 473.776 cv
93.269 470.37 98.8169 470.395 102.224 473.831 cv
89.7759 486.168 li
cp
.972549 1 1 rgb
ef
91.6519 484.31 mo
94.0322 486.71 97.9077 486.728 100.309 484.348 cv
102.71 481.968 102.728 478.092 100.348 475.69 cv
91.6519 484.31 li
cp
.196078 .207843 .282353 rgb
ef
91.6519 484.31 mo
89.2725 481.908 89.2896 478.032 91.6909 475.652 cv
94.0923 473.272 97.9683 473.289 100.348 475.69 cv
91.6519 484.31 li
cp
.313726 .282353 .32549 rgb
ef
287.537 549.104 mo
325.446 549.102 356.177 518.369 356.177 480.459 cv
356.177 442.549 325.446 411.816 287.537 411.813 cv
287.537 549.104 li
cp
.196078 .207843 .282353 rgb
ef
287.537 549.104 mo
249.628 549.102 218.896 518.369 218.896 480.459 cv
218.896 442.549 249.628 411.816 287.537 411.813 cv
287.537 549.104 li
cp
.313726 .282353 .32549 rgb
ef
287.537 538.384 mo
319.525 538.381 345.456 512.448 345.456 480.459 cv
345.456 448.47 319.525 422.537 287.537 422.535 cv
287.537 538.384 li
cp
.964706 .945098 .917647 rgb
ef
287.537 538.384 mo
255.548 538.381 229.617 512.448 229.617 480.459 cv
229.617 448.47 255.548 422.537 287.537 422.535 cv
287.537 538.384 li
cp
.972549 1 1 rgb
ef
290.92 433.939 mo
290.92 434.041 290.902 434.132 290.868 434.214 cv
290.832 434.293 290.784 434.358 290.723 434.413 cv
290.664 434.465 290.594 434.504 290.513 434.528 cv
290.429 434.553 290.347 434.564 290.264 434.564 cv
289.519 434.564 li
289.362 434.564 289.229 434.549 289.116 434.52 cv
289.005 434.487 288.901 434.432 288.806 434.35 cv
288.709 434.268 288.618 434.157 288.529 434.017 cv
288.441 433.879 288.342 433.697 288.231 433.476 cv
286.101 429.462 li
285.977 429.223 285.852 428.965 285.723 428.688 cv
285.594 428.412 285.48 428.143 285.379 427.883 cv
285.365 427.883 li
285.383 428.201 285.397 428.519 285.406 428.835 cv
285.415 429.15 285.419 429.478 285.419 429.813 cv
285.419 434.307 li
285.419 434.35 285.408 434.391 285.383 434.427 cv
285.358 434.461 285.315 434.489 285.256 434.515 cv
285.198 434.54 285.116 434.558 285.014 434.571 cv
284.913 434.585 284.781 434.592 284.623 434.592 cv
284.467 434.592 284.337 434.585 284.235 434.571 cv
284.134 434.558 284.055 434.54 283.998 434.515 cv
283.939 434.492 283.898 434.461 283.878 434.427 cv
283.855 434.391 283.844 434.35 283.844 434.307 cv
283.844 426.592 li
283.844 426.384 283.905 426.228 284.027 426.123 cv
284.147 426.02 284.297 425.968 284.476 425.968 cv
285.411 425.968 li
285.578 425.968 285.721 425.98 285.836 426.011 cv
285.951 426.04 286.053 426.087 286.144 426.153 cv
286.234 426.219 286.321 426.312 286.4 426.429 cv
286.479 426.545 286.561 426.691 286.645 426.863 cv
288.313 430.003 li
288.41 430.193 288.505 430.382 288.6 430.564 cv
288.695 430.748 288.788 430.932 288.874 431.114 cv
288.962 431.298 289.048 431.479 289.132 431.656 cv
289.218 431.835 289.3 432.011 289.379 432.188 cv
289.386 432.188 li
289.372 431.878 289.36 431.554 289.354 431.219 cv
289.347 430.882 289.345 430.56 289.345 430.255 cv
289.345 426.226 li
289.345 426.183 289.358 426.142 289.386 426.105 cv
289.41 426.071 289.456 426.04 289.517 426.013 cv
289.58 425.985 289.661 425.968 289.764 425.956 cv
289.865 425.944 289.997 425.94 290.155 425.94 cv
290.307 425.94 290.434 425.944 290.535 425.956 cv
290.637 425.968 290.714 425.985 290.771 426.013 cv
290.825 426.04 290.866 426.071 290.887 426.105 cv
290.909 426.142 290.92 426.181 290.92 426.226 cv
290.92 433.939 li
cp
.196078 .207843 .282353 rgb
ef
290.173 533.224 mo
290.173 533.678 290.089 534.071 289.922 534.413 cv
289.752 534.753 289.525 535.035 289.238 535.265 cv
288.948 535.49 288.613 535.662 288.229 535.778 cv
287.844 535.894 287.432 535.95 286.992 535.95 cv
286.696 535.95 286.422 535.925 286.166 535.875 cv
285.913 535.825 285.688 535.767 285.494 535.696 cv
285.299 535.629 285.136 535.556 285.005 535.479 cv
284.874 535.402 284.781 535.334 284.722 535.277 cv
284.665 535.219 284.625 535.135 284.6 535.026 cv
284.575 534.918 284.563 534.764 284.563 534.56 cv
284.563 534.422 284.568 534.309 284.577 534.216 cv
284.586 534.123 284.6 534.049 284.62 533.989 cv
284.64 533.933 284.668 533.893 284.699 533.867 cv
284.733 533.843 284.772 533.831 284.817 533.831 cv
284.878 533.831 284.966 533.867 285.08 533.942 cv
285.193 534.015 285.338 534.096 285.514 534.185 cv
285.691 534.272 285.903 534.354 286.15 534.427 cv
286.395 534.501 286.68 534.537 287.004 534.537 cv
287.216 534.537 287.406 534.513 287.574 534.463 cv
287.744 534.41 287.887 534.341 288.004 534.248 cv
288.122 534.155 288.21 534.042 288.273 533.906 cv
288.335 533.77 288.367 533.618 288.367 533.451 cv
288.367 533.256 288.314 533.089 288.208 532.95 cv
288.102 532.811 287.963 532.688 287.792 532.579 cv
287.622 532.471 287.427 532.369 287.209 532.273 cv
286.995 532.179 286.771 532.079 286.54 531.973 cv
286.309 531.866 286.084 531.746 285.87 531.61 cv
285.652 531.478 285.458 531.316 285.288 531.128 cv
285.116 530.94 284.978 530.719 284.872 530.461 cv
284.765 530.205 284.713 529.897 284.713 529.539 cv
284.713 529.13 284.79 528.768 284.941 528.455 cv
285.093 528.145 285.299 527.887 285.557 527.681 cv
285.817 527.475 286.121 527.321 286.472 527.219 cv
286.823 527.117 287.196 527.067 287.59 527.067 cv
287.792 527.067 287.995 527.083 288.199 527.115 cv
288.402 527.145 288.593 527.188 288.77 527.239 cv
288.946 527.294 289.103 527.353 289.24 527.418 cv
289.376 527.486 289.466 527.54 289.512 527.586 cv
289.555 527.629 289.584 527.667 289.601 527.696 cv
289.616 527.729 289.63 527.77 289.641 527.821 cv
289.652 527.871 289.659 527.935 289.663 528.014 cv
289.668 528.091 289.67 528.186 289.67 528.301 cv
289.67 528.428 289.668 528.536 289.661 528.625 cv
289.654 528.713 289.643 528.785 289.627 528.845 cv
289.611 528.901 289.589 528.944 289.562 528.969 cv
289.532 528.996 289.494 529.01 289.443 529.01 cv
289.396 529.01 289.319 528.978 289.213 528.917 cv
289.106 528.855 288.976 528.788 288.821 528.713 cv
288.665 528.641 288.487 528.575 288.283 528.516 cv
288.079 528.455 287.857 528.426 287.612 528.426 cv
287.422 528.426 287.257 528.448 287.115 528.495 cv
286.975 528.541 286.856 528.606 286.762 528.688 cv
286.667 528.77 286.594 528.867 286.548 528.982 cv
286.501 529.098 286.479 529.22 286.479 529.347 cv
286.479 529.537 286.531 529.702 286.635 529.84 cv
286.739 529.98 286.879 530.105 287.054 530.214 cv
287.228 530.32 287.427 530.422 287.649 530.518 cv
287.869 530.612 288.095 530.714 288.326 530.818 cv
288.557 530.925 288.782 531.045 289.002 531.181 cv
289.225 531.316 289.421 531.478 289.596 531.665 cv
289.768 531.853 289.908 532.072 290.015 532.328 cv
290.121 532.582 290.173 532.881 290.173 533.224 cv
cp
ef
340.774 484.589 mo
340.774 484.721 340.77 484.83 340.758 484.92 cv
340.746 485.008 340.729 485.08 340.707 485.133 cv
340.684 485.188 340.655 485.229 340.621 485.253 cv
340.589 485.279 340.549 485.29 340.51 485.29 cv
336.105 485.29 li
335.957 485.29 335.832 485.247 335.73 485.159 cv
335.629 485.07 335.578 484.928 335.578 484.729 cv
335.578 477.072 li
335.578 476.873 335.629 476.729 335.73 476.642 cv
335.832 476.554 335.957 476.51 336.105 476.51 cv
340.489 476.51 li
340.528 476.51 340.565 476.521 340.598 476.544 cv
340.628 476.567 340.655 476.606 340.679 476.663 cv
340.699 476.721 340.718 476.792 340.729 476.88 cv
340.741 476.971 340.746 477.081 340.746 477.219 cv
340.746 477.346 340.741 477.452 340.729 477.543 cv
340.718 477.631 340.702 477.702 340.679 477.756 cv
340.655 477.811 340.628 477.851 340.598 477.876 cv
340.565 477.901 340.528 477.913 340.489 477.913 cv
337.355 477.913 li
337.355 480.053 li
339.996 480.053 li
340.037 480.053 340.074 480.064 340.106 480.09 cv
340.142 480.115 340.169 480.152 340.192 480.206 cv
340.216 480.257 340.232 480.326 340.244 480.416 cv
340.255 480.504 340.26 480.61 340.26 480.735 cv
340.26 480.868 340.255 480.977 340.244 481.063 cv
340.232 481.147 340.216 481.218 340.192 481.269 cv
340.169 481.321 340.142 481.358 340.106 481.38 cv
340.074 481.402 340.037 481.414 339.996 481.414 cv
337.355 481.414 li
337.355 483.888 li
340.51 483.888 li
340.552 483.888 340.589 483.899 340.621 483.924 cv
340.655 483.95 340.684 483.989 340.707 484.045 cv
340.729 484.099 340.746 484.17 340.758 484.258 cv
340.77 484.349 340.774 484.457 340.774 484.589 cv
cp
ef
239.935 485.297 mo
239.909 485.396 239.875 485.478 239.831 485.538 cv
239.788 485.598 239.722 485.644 239.634 485.674 cv
239.547 485.706 239.434 485.727 239.298 485.738 cv
239.159 485.748 238.985 485.753 238.774 485.753 cv
238.538 485.753 238.346 485.748 238.203 485.738 cv
238.059 485.727 237.945 485.706 237.862 485.674 cv
237.779 485.644 237.72 485.598 237.682 485.538 cv
237.645 485.478 237.615 485.396 237.594 485.297 cv
236.301 480.177 li
236.288 480.177 li
235.065 485.297 li
235.044 485.393 235.017 485.472 234.978 485.531 cv
234.942 485.591 234.882 485.638 234.801 485.672 cv
234.72 485.706 234.61 485.727 234.471 485.738 cv
234.331 485.748 234.147 485.753 233.92 485.753 cv
233.677 485.753 233.485 485.748 233.342 485.738 cv
233.2 485.727 233.084 485.706 233.001 485.674 cv
232.918 485.644 232.859 485.598 232.82 485.538 cv
232.784 485.478 232.752 485.396 232.729 485.297 cv
230.895 478.248 li
230.856 478.097 230.837 477.98 230.833 477.895 cv
230.829 477.81 230.853 477.744 230.903 477.699 cv
230.957 477.652 231.042 477.624 231.159 477.613 cv
231.278 477.604 231.442 477.599 231.653 477.599 cv
231.849 477.599 232.003 477.602 232.118 477.607 cv
232.232 477.613 232.317 477.629 232.375 477.652 cv
232.433 477.676 232.473 477.708 232.495 477.752 cv
232.514 477.795 232.531 477.856 232.543 477.936 cv
233.962 484.123 li
233.969 484.123 li
235.44 477.98 li
235.458 477.901 235.479 477.836 235.507 477.786 cv
235.532 477.735 235.579 477.697 235.643 477.672 cv
235.707 477.644 235.796 477.624 235.909 477.613 cv
236.02 477.604 236.171 477.599 236.358 477.599 cv
236.559 477.599 236.716 477.604 236.835 477.612 cv
236.955 477.62 237.047 477.637 237.11 477.665 cv
237.174 477.692 237.221 477.731 237.251 477.78 cv
237.281 477.829 237.302 477.897 237.319 477.98 cv
238.844 484.123 li
238.857 484.123 li
240.263 477.955 li
240.275 477.889 240.292 477.831 240.312 477.782 cv
240.333 477.735 240.374 477.697 240.431 477.672 cv
240.491 477.644 240.574 477.624 240.683 477.613 cv
240.791 477.604 240.942 477.599 241.138 477.599 cv
241.323 477.599 241.466 477.604 241.569 477.613 cv
241.67 477.624 241.743 477.652 241.79 477.699 cv
241.834 477.744 241.856 477.812 241.85 477.901 cv
241.843 477.99 241.822 478.112 241.784 478.268 cv
239.935 485.297 li
cp
ef
287.576 436.363 mo
287.576 441.45 li
287.428 441.45 li
287.428 436.363 li
287.576 436.363 li
cp
ef
276.163 437.853 mo
277.476 442.754 li
277.338 442.791 li
276.024 437.89 li
276.163 437.853 li
cp
ef
265.518 442.236 mo
268.061 446.639 li
267.932 446.713 li
265.397 442.311 li
265.518 442.236 li
cp
ef
249.352 458.356 mo
253.754 460.891 li
253.68 461.02 li
249.277 458.477 li
249.352 458.356 li
cp
ef
244.931 468.982 mo
249.833 470.296 li
249.795 470.435 li
244.894 469.122 li
244.931 468.982 li
cp
ef
243.405 480.387 mo
248.492 480.387 li
248.492 480.534 li
243.405 480.534 li
243.405 480.387 li
cp
ef
244.894 491.809 mo
249.795 490.485 li
249.833 490.624 li
244.931 491.947 li
244.894 491.809 li
cp
ef
249.277 502.443 mo
253.68 499.91 li
253.754 500.03 li
249.352 502.573 li
249.277 502.443 li
cp
ef
265.397 518.61 mo
267.932 514.217 li
268.061 514.282 li
265.518 518.684 li
265.397 518.61 li
cp
ef
276.024 523.031 mo
277.338 518.129 li
277.476 518.166 li
276.163 523.068 li
276.024 523.031 li
cp
ef
298.85 523.068 mo
297.527 518.166 li
297.666 518.129 li
298.988 523.031 li
298.85 523.068 li
cp
ef
309.485 518.684 mo
306.951 514.282 li
307.071 514.217 li
309.614 518.61 li
309.485 518.684 li
cp
ef
325.651 502.573 mo
321.258 500.03 li
321.323 499.91 li
325.726 502.443 li
325.651 502.573 li
cp
ef
330.072 491.947 mo
325.171 490.624 li
325.208 490.485 li
330.109 491.809 li
330.072 491.947 li
cp
ef
330.109 469.122 mo
325.208 470.435 li
325.171 470.296 li
330.072 468.982 li
330.109 469.122 li
cp
ef
325.726 458.477 mo
321.323 461.02 li
321.258 460.891 li
325.651 458.356 li
325.726 458.477 li
cp
ef
309.614 442.311 mo
307.071 446.713 li
306.951 446.639 li
309.485 442.236 li
309.614 442.311 li
cp
ef
298.988 437.89 mo
297.675 442.791 li
297.536 442.754 li
298.85 437.853 li
298.988 437.89 li
cp
ef
287.428 524.557 mo
287.428 519.479 li
287.576 519.479 li
287.576 524.557 li
287.428 524.557 li
cp
ef
254.318 447.286 mo
254.632 446.962 255.15 446.962 255.474 447.286 cv
255.789 447.601 255.789 448.118 255.474 448.441 cv
255.15 448.756 254.632 448.756 254.318 448.441 cv
254.003 448.118 254.003 447.601 254.318 447.286 cv
cp
ef
254.346 513.672 mo
254.031 513.348 254.031 512.83 254.346 512.516 cv
254.669 512.191 255.188 512.191 255.502 512.516 cv
255.825 512.83 255.825 513.348 255.502 513.672 cv
255.188 513.986 254.669 513.986 254.346 513.672 cv
cp
ef
320.731 513.635 mo
320.407 513.958 319.89 513.958 319.575 513.635 cv
319.261 513.32 319.261 512.802 319.575 512.479 cv
319.89 512.164 320.407 512.164 320.731 512.479 cv
321.045 512.802 321.045 513.32 320.731 513.635 cv
cp
ef
320.704 447.258 mo
321.018 447.572 321.018 448.09 320.704 448.404 cv
320.38 448.729 319.862 448.729 319.547 448.404 cv
319.224 448.09 319.224 447.572 319.547 447.258 cv
319.862 446.935 320.38 446.935 320.704 447.258 cv
cp
ef
254.318 447.286 mo
254.632 446.962 255.15 446.962 255.474 447.286 cv
255.789 447.601 255.789 448.118 255.474 448.441 cv
255.15 448.756 254.632 448.756 254.318 448.441 cv
254.003 448.118 254.003 447.601 254.318 447.286 cv
cp
ef
246.864 457.006 mo
247.085 456.617 247.585 456.488 247.983 456.71 cv
248.371 456.932 248.5 457.432 248.279 457.829 cv
248.048 458.218 247.548 458.348 247.16 458.125 cv
246.771 457.903 246.642 457.403 246.864 457.006 cv
cp
ef
242.175 468.335 mo
242.295 467.9 242.739 467.642 243.183 467.753 cv
243.617 467.873 243.876 468.317 243.756 468.752 cv
243.636 469.186 243.192 469.445 242.757 469.334 cv
242.322 469.214 242.063 468.771 242.175 468.335 cv
cp
ef
242.193 492.631 mo
242.073 492.197 242.332 491.743 242.767 491.633 cv
243.202 491.513 243.654 491.771 243.766 492.206 cv
243.886 492.641 243.626 493.094 243.192 493.204 cv
242.757 493.325 242.304 493.065 242.193 492.631 cv
cp
ef
246.882 503.951 mo
246.66 503.563 246.79 503.055 247.187 502.832 cv
247.576 502.61 248.075 502.74 248.297 503.128 cv
248.519 503.525 248.39 504.025 248.001 504.247 cv
247.613 504.47 247.113 504.34 246.882 503.951 cv
cp
ef
254.346 513.672 mo
254.031 513.348 254.031 512.83 254.346 512.516 cv
254.669 512.191 255.188 512.191 255.502 512.516 cv
255.825 512.83 255.825 513.348 255.502 513.672 cv
255.188 513.986 254.669 513.986 254.346 513.672 cv
cp
ef
264.075 521.126 mo
263.687 520.895 263.548 520.396 263.77 520.007 cv
264.001 519.618 264.501 519.479 264.889 519.711 cv
265.277 519.933 265.416 520.433 265.185 520.82 cv
264.963 521.209 264.464 521.348 264.075 521.126 cv
cp
ef
275.395 525.806 mo
274.96 525.686 274.702 525.241 274.822 524.807 cv
274.933 524.372 275.386 524.113 275.821 524.233 cv
276.255 524.345 276.514 524.797 276.394 525.232 cv
276.283 525.667 275.83 525.926 275.395 525.806 cv
cp
ef
299.691 525.796 mo
299.257 525.916 298.813 525.658 298.692 525.214 cv
298.581 524.779 298.831 524.335 299.274 524.215 cv
299.709 524.104 300.153 524.362 300.273 524.797 cv
300.385 525.232 300.126 525.676 299.691 525.796 cv
cp
ef
311.012 521.098 mo
310.623 521.329 310.123 521.19 309.901 520.802 cv
309.67 520.414 309.809 519.914 310.197 519.683 cv
310.586 519.461 311.085 519.591 311.308 519.988 cv
311.538 520.377 311.399 520.876 311.012 521.098 cv
cp
ef
320.731 513.635 mo
320.407 513.958 319.89 513.958 319.575 513.635 cv
319.261 513.32 319.261 512.802 319.575 512.479 cv
319.89 512.164 320.407 512.164 320.731 512.479 cv
321.045 512.802 321.045 513.32 320.731 513.635 cv
cp
ef
328.186 503.914 mo
327.963 504.303 327.464 504.433 327.066 504.21 cv
326.678 503.988 326.548 503.489 326.771 503.091 cv
326.992 502.703 327.492 502.573 327.89 502.795 cv
328.278 503.026 328.407 503.525 328.186 503.914 cv
cp
ef
332.865 492.585 mo
332.755 493.028 332.301 493.288 331.866 493.167 cv
331.432 493.048 331.173 492.604 331.293 492.169 cv
331.404 491.733 331.857 491.476 332.292 491.586 cv
332.727 491.706 332.985 492.15 332.865 492.585 cv
cp
ef
332.856 468.289 mo
332.977 468.724 332.718 469.177 332.283 469.288 cv
331.849 469.408 331.395 469.148 331.284 468.715 cv
331.164 468.28 331.423 467.826 331.857 467.716 cv
332.292 467.596 332.744 467.854 332.856 468.289 cv
cp
ef
328.167 456.969 mo
328.389 457.367 328.26 457.866 327.862 458.088 cv
327.474 458.31 326.974 458.181 326.752 457.792 cv
326.521 457.395 326.659 456.895 327.048 456.673 cv
327.437 456.451 327.937 456.581 328.167 456.969 cv
cp
ef
320.704 447.258 mo
321.018 447.572 321.018 448.09 320.704 448.404 cv
320.38 448.729 319.862 448.729 319.547 448.404 cv
319.224 448.09 319.224 447.572 319.547 447.258 cv
319.862 446.935 320.38 446.935 320.704 447.258 cv
cp
ef
310.974 439.804 mo
311.362 440.025 311.501 440.525 311.271 440.913 cv
311.048 441.302 310.549 441.44 310.16 441.21 cv
309.772 440.988 309.633 440.488 309.864 440.1 cv
310.086 439.711 310.586 439.573 310.974 439.804 cv
cp
ef
299.654 435.114 mo
300.089 435.235 300.348 435.679 300.228 436.113 cv
300.116 436.548 299.663 436.808 299.229 436.696 cv
298.794 436.576 298.535 436.132 298.655 435.697 cv
298.766 435.254 299.219 434.994 299.654 435.114 cv
cp
ef
275.358 435.124 mo
275.793 435.013 276.237 435.272 276.357 435.707 cv
276.468 436.142 276.209 436.585 275.774 436.705 cv
275.34 436.816 274.896 436.558 274.775 436.123 cv
274.665 435.688 274.924 435.244 275.358 435.124 cv
cp
ef
264.038 439.822 mo
264.426 439.591 264.926 439.729 265.148 440.118 cv
265.379 440.507 265.24 441.006 264.852 441.237 cv
264.464 441.459 263.964 441.33 263.733 440.933 cv
263.511 440.544 263.65 440.044 264.038 439.822 cv
cp
ef
254.318 447.286 mo
254.632 446.962 255.15 446.962 255.474 447.286 cv
255.789 447.601 255.789 448.118 255.474 448.441 cv
255.15 448.756 254.632 448.756 254.318 448.441 cv
254.003 448.118 254.003 447.601 254.318 447.286 cv
cp
ef
254.346 513.672 mo
254.031 513.348 254.031 512.83 254.346 512.516 cv
254.669 512.191 255.188 512.191 255.502 512.516 cv
255.825 512.83 255.825 513.348 255.502 513.672 cv
255.188 513.986 254.669 513.986 254.346 513.672 cv
cp
ef
285.125 436.835 mo
285.31 436.826 li
285.42 438.999 li
285.245 439.009 li
285.125 436.835 li
cp
ef
282.85 437.02 mo
283.025 437.001 li
283.256 439.166 li
283.071 439.184 li
282.85 437.02 li
cp
ef
280.583 437.325 mo
280.759 437.297 li
281.092 439.443 li
280.917 439.471 li
280.583 437.325 li
cp
ef
278.336 437.751 mo
278.512 437.714 li
278.956 439.832 li
278.78 439.868 li
278.336 437.751 li
cp
ef
273.916 438.943 mo
274.091 438.889 li
274.757 440.951 li
274.591 441.006 li
273.916 438.943 li
cp
ef
271.76 439.711 mo
271.927 439.646 li
272.704 441.672 li
272.537 441.737 li
271.76 439.711 li
cp
ef
269.652 440.59 mo
269.818 440.516 li
270.697 442.495 li
270.53 442.569 li
269.652 440.59 li
cp
ef
267.589 441.579 mo
267.747 441.496 li
268.736 443.43 li
268.579 443.513 li
267.589 441.579 li
cp
ef
263.631 443.873 mo
263.789 443.771 li
264.963 445.594 li
264.815 445.686 li
263.631 443.873 li
cp
ef
261.754 445.168 mo
261.893 445.066 li
263.169 446.823 li
263.03 446.926 li
261.754 445.168 li
cp
ef
259.941 446.564 mo
260.08 446.453 li
261.449 448.137 li
261.31 448.248 li
259.941 446.564 li
cp
ef
258.202 448.054 mo
258.341 447.934 li
259.793 449.552 li
259.654 449.663 li
258.202 448.054 li
cp
ef
256.547 449.635 mo
256.676 449.506 li
258.211 451.041 li
258.082 451.17 li
256.547 449.635 li
cp
ef
254.975 451.3 mo
255.095 451.161 li
256.713 452.612 li
256.593 452.742 li
254.975 451.3 li
cp
ef
253.495 453.038 mo
253.606 452.899 li
255.298 454.26 li
255.178 454.407 li
253.495 453.038 li
cp
ef
252.107 454.852 mo
252.209 454.712 li
253.966 455.989 li
253.865 456.127 li
252.107 454.852 li
cp
ef
250.813 456.738 mo
250.915 456.59 li
252.736 457.773 li
252.635 457.922 li
250.813 456.738 li
cp
ef
248.538 460.705 mo
248.621 460.548 li
250.554 461.528 li
250.47 461.695 li
248.538 460.705 li
cp
ef
247.557 462.777 mo
247.631 462.61 li
249.61 463.489 li
249.537 463.655 li
247.557 462.777 li
cp
ef
246.688 464.886 mo
246.752 464.719 li
248.778 465.496 li
248.713 465.663 li
246.688 464.886 li
cp
ef
245.93 467.05 mo
245.984 466.874 li
248.048 467.549 li
247.992 467.716 li
245.93 467.05 li
cp
ef
244.755 471.461 mo
244.792 471.295 li
246.91 471.739 li
246.873 471.914 li
244.755 471.461 li
cp
ef
244.339 473.718 mo
244.366 473.543 li
246.512 473.875 li
246.484 474.051 li
244.339 473.718 li
cp
ef
244.043 475.983 mo
244.062 475.809 li
246.226 476.03 li
246.207 476.206 li
244.043 475.983 li
cp
ef
243.876 478.269 mo
243.886 478.083 li
246.05 478.194 li
246.041 478.379 li
243.876 478.269 li
cp
ef
243.886 482.837 mo
243.876 482.661 li
246.041 482.541 li
246.05 482.726 li
243.886 482.837 li
cp
ef
244.062 485.112 mo
244.043 484.937 li
246.207 484.714 li
246.226 484.891 li
244.062 485.112 li
cp
ef
244.366 487.388 mo
244.339 487.202 li
246.484 486.869 li
246.512 487.045 li
244.366 487.388 li
cp
ef
244.792 489.635 mo
244.755 489.459 li
246.873 489.006 li
246.91 489.182 li
244.792 489.635 li
cp
ef
245.984 494.046 mo
245.93 493.88 li
247.992 493.204 li
248.048 493.371 li
245.984 494.046 li
cp
ef
246.752 496.201 mo
246.688 496.034 li
248.713 495.258 li
248.778 495.424 li
246.752 496.201 li
cp
ef
247.631 498.31 mo
247.557 498.152 li
249.537 497.265 li
249.61 497.431 li
247.631 498.31 li
cp
ef
248.621 500.372 mo
248.538 500.215 li
250.47 499.226 li
250.554 499.392 li
248.621 500.372 li
cp
ef
250.915 504.33 mo
250.813 504.183 li
252.635 502.998 li
252.736 503.146 li
250.915 504.33 li
cp
ef
252.209 506.208 mo
252.107 506.069 li
253.865 504.793 li
253.966 504.94 li
252.209 506.208 li
cp
ef
253.606 508.021 mo
253.495 507.882 li
255.178 506.522 li
255.298 506.661 li
253.606 508.021 li
cp
ef
255.095 509.76 mo
254.975 509.63 li
256.593 508.178 li
256.713 508.308 li
255.095 509.76 li
cp
ef
256.676 511.415 mo
256.547 511.285 li
258.082 509.75 li
258.211 509.88 li
256.676 511.415 li
cp
ef
258.341 512.987 mo
258.202 512.867 li
259.654 511.258 li
259.793 511.378 li
258.341 512.987 li
cp
ef
260.08 514.467 mo
259.941 514.355 li
261.31 512.673 li
261.449 512.784 li
260.08 514.467 li
cp
ef
261.901 515.854 mo
261.754 515.752 li
263.03 513.995 li
263.169 514.106 li
261.901 515.854 li
cp
ef
263.789 517.149 mo
263.631 517.047 li
264.815 515.234 li
264.963 515.327 li
263.789 517.149 li
cp
ef
267.747 519.424 mo
267.589 519.341 li
268.579 517.408 li
268.736 517.491 li
267.747 519.424 li
cp
ef
269.818 520.404 mo
269.652 520.33 li
270.53 518.351 li
270.697 518.426 li
269.818 520.404 li
cp
ef
271.927 521.273 mo
271.76 521.209 li
272.537 519.184 li
272.704 519.249 li
271.927 521.273 li
cp
ef
274.091 522.041 mo
273.916 521.977 li
274.591 519.914 li
274.757 519.97 li
274.091 522.041 li
cp
ef
278.512 523.207 mo
278.336 523.17 li
278.78 521.052 li
278.956 521.089 li
278.512 523.207 li
cp
ef
280.759 523.623 mo
280.583 523.595 li
280.917 521.449 li
281.102 521.478 li
280.759 523.623 li
cp
ef
283.025 523.919 mo
282.85 523.9 li
283.071 521.745 li
283.256 521.764 li
283.025 523.919 li
cp
ef
285.31 524.095 mo
285.125 524.085 li
285.245 521.912 li
285.42 521.922 li
285.31 524.095 li
cp
ef
289.878 524.085 mo
289.702 524.095 li
289.592 521.922 li
289.768 521.912 li
289.878 524.085 li
cp
ef
292.163 523.9 mo
291.978 523.919 li
291.756 521.764 li
291.932 521.745 li
292.163 523.9 li
cp
ef
294.429 523.595 mo
294.253 523.623 li
293.91 521.478 li
294.086 521.449 li
294.429 523.595 li
cp
ef
296.676 523.17 mo
296.5 523.207 li
296.047 521.089 li
296.223 521.052 li
296.676 523.17 li
cp
ef
301.088 521.977 mo
300.921 522.032 li
300.246 519.97 li
300.422 519.914 li
301.088 521.977 li
cp
ef
303.242 521.209 mo
303.075 521.273 li
302.299 519.249 li
302.466 519.184 li
303.242 521.209 li
cp
ef
305.352 520.33 mo
305.194 520.404 li
304.306 518.426 li
304.473 518.351 li
305.352 520.33 li
cp
ef
307.413 519.341 mo
307.256 519.424 li
306.275 517.491 li
306.434 517.408 li
307.413 519.341 li
cp
ef
311.372 517.047 mo
311.225 517.149 li
310.04 515.327 li
310.188 515.234 li
311.372 517.047 li
cp
ef
313.259 515.752 mo
313.11 515.854 li
311.834 514.097 li
311.982 513.995 li
313.259 515.752 li
cp
ef
315.063 514.355 mo
314.924 514.467 li
313.563 512.784 li
313.702 512.673 li
315.063 514.355 li
cp
ef
316.801 512.867 mo
316.671 512.987 li
315.219 511.378 li
315.349 511.258 li
316.801 512.867 li
cp
ef
318.456 511.285 mo
318.326 511.415 li
316.801 509.88 li
316.921 509.75 li
318.456 511.285 li
cp
ef
320.028 509.63 mo
319.908 509.76 li
318.299 508.308 li
318.419 508.178 li
320.028 509.63 li
cp
ef
321.508 507.882 mo
321.397 508.021 li
319.714 506.661 li
319.825 506.522 li
321.508 507.882 li
cp
ef
322.896 506.069 mo
322.794 506.208 li
321.037 504.932 li
321.147 504.793 li
322.896 506.069 li
cp
ef
324.19 504.183 mo
324.098 504.33 li
322.275 503.146 li
322.368 502.998 li
324.19 504.183 li
cp
ef
326.465 500.215 mo
326.392 500.372 li
324.459 499.392 li
324.532 499.226 li
326.465 500.215 li
cp
ef
327.445 498.144 mo
327.381 498.31 li
325.393 497.431 li
325.467 497.265 li
327.445 498.144 li
cp
ef
328.324 496.034 mo
328.26 496.201 li
326.234 495.424 li
326.299 495.258 li
328.324 496.034 li
cp
ef
329.083 493.87 mo
329.027 494.046 li
326.965 493.371 li
327.021 493.204 li
329.083 493.87 li
cp
ef
330.257 489.459 mo
330.22 489.635 li
328.093 489.182 li
328.13 489.006 li
330.257 489.459 li
cp
ef
330.664 487.202 mo
330.637 487.378 li
328.5 487.045 li
328.527 486.869 li
330.664 487.202 li
cp
ef
330.96 484.937 mo
330.941 485.112 li
328.786 484.891 li
328.806 484.714 li
330.96 484.937 li
cp
ef
331.136 482.661 mo
331.127 482.837 li
328.963 482.726 li
328.972 482.541 li
331.136 482.661 li
cp
ef
331.127 478.083 mo
331.136 478.259 li
328.972 478.379 li
328.963 478.194 li
331.127 478.083 li
cp
ef
330.941 475.809 mo
330.96 475.983 li
328.806 476.206 li
328.786 476.03 li
330.941 475.809 li
cp
ef
330.637 473.533 mo
330.664 473.718 li
328.527 474.051 li
328.5 473.875 li
330.637 473.533 li
cp
ef
330.22 471.285 mo
330.257 471.461 li
328.13 471.914 li
328.093 471.739 li
330.22 471.285 li
cp
ef
329.027 466.874 mo
329.083 467.05 li
327.021 467.716 li
326.965 467.549 li
329.027 466.874 li
cp
ef
328.26 464.719 mo
328.324 464.886 li
326.299 465.663 li
326.234 465.496 li
328.26 464.719 li
cp
ef
327.371 462.61 mo
327.445 462.777 li
325.467 463.655 li
325.393 463.489 li
327.371 462.61 li
cp
ef
326.392 460.548 mo
326.465 460.705 li
324.532 461.695 li
324.459 461.528 li
326.392 460.548 li
cp
ef
324.088 456.59 mo
324.19 456.738 li
322.368 457.922 li
322.275 457.773 li
324.088 456.59 li
cp
ef
322.794 454.712 mo
322.896 454.852 li
321.147 456.127 li
321.037 455.989 li
322.794 454.712 li
cp
ef
321.397 452.899 mo
321.508 453.038 li
319.825 454.398 li
319.714 454.26 li
321.397 452.899 li
cp
ef
319.908 451.161 mo
320.028 451.29 li
318.419 452.742 li
318.299 452.612 li
319.908 451.161 li
cp
ef
318.326 449.506 mo
318.456 449.635 li
316.921 451.17 li
316.801 451.041 li
318.326 449.506 li
cp
ef
316.671 447.934 mo
316.801 448.054 li
315.349 449.663 li
315.219 449.552 li
316.671 447.934 li
cp
ef
314.924 446.453 mo
315.063 446.564 li
313.702 448.248 li
313.563 448.137 li
314.924 446.453 li
cp
ef
313.11 445.066 mo
313.249 445.168 li
311.982 446.926 li
311.834 446.823 li
313.11 445.066 li
cp
ef
311.225 443.771 mo
311.372 443.873 li
310.188 445.686 li
310.04 445.594 li
311.225 443.771 li
cp
ef
307.256 441.496 mo
307.413 441.579 li
306.434 443.513 li
306.275 443.43 li
307.256 441.496 li
cp
ef
305.194 440.516 mo
305.352 440.59 li
304.473 442.569 li
304.306 442.495 li
305.194 440.516 li
cp
ef
303.075 439.646 mo
303.242 439.711 li
302.466 441.737 li
302.299 441.672 li
303.075 439.646 li
cp
ef
300.921 438.889 mo
301.088 438.943 li
300.422 441.006 li
300.246 440.951 li
300.921 438.889 li
cp
ef
296.5 437.714 mo
296.676 437.751 li
296.223 439.868 li
296.047 439.832 li
296.5 437.714 li
cp
ef
294.253 437.297 mo
294.429 437.325 li
294.086 439.471 li
293.91 439.443 li
294.253 437.297 li
cp
ef
291.978 437.001 mo
292.163 437.02 li
291.932 439.184 li
291.756 439.166 li
291.978 437.001 li
cp
ef
289.702 436.826 mo
289.878 436.835 li
289.768 439.009 li
289.582 438.999 li
289.702 436.826 li
cp
ef
258.72 452.308 mo
258.803 452.4 li
258.915 452.326 259.016 452.28 259.1 452.28 cv
259.183 452.28 259.303 452.308 259.469 452.382 cv
261.967 453.491 li
262.05 453.408 li
261.31 451.401 li
263.224 452.243 li
263.316 452.142 li
262.18 449.57 li
262.087 449.339 262.087 449.154 262.207 448.997 cv
262.124 448.904 li
261.439 449.58 li
261.532 449.672 li
261.624 449.58 261.698 449.533 261.754 449.533 cv
261.8 449.523 261.846 449.533 261.874 449.561 cv
261.93 449.616 261.976 449.699 262.031 449.811 cv
262.762 451.447 li
261.042 450.708 li
261.004 450.689 260.968 450.661 260.94 450.634 cv
260.884 450.578 260.856 450.523 260.856 450.468 cv
260.866 450.384 260.921 450.282 261.032 450.172 cv
260.94 450.088 li
259.923 451.105 li
260.015 451.188 li
260.107 451.097 260.191 451.05 260.246 451.041 cv
260.339 451.013 260.458 451.031 260.588 451.087 cv
261.023 451.271 li
261.568 452.752 li
259.867 451.975 li
259.774 451.938 259.701 451.892 259.646 451.846 cv
259.608 451.799 259.581 451.753 259.589 451.707 cv
259.589 451.651 259.626 451.586 259.701 451.494 cv
259.617 451.411 li
258.72 452.308 li
258.72 452.308 li
cp
257.453 454.352 mo
257.397 453.806 257.49 453.408 257.721 453.187 cv
257.833 453.066 257.962 452.992 258.11 452.974 cv
258.248 452.946 258.415 452.974 258.6 453.057 cv
258.729 453.121 258.887 453.242 259.081 453.436 cv
260.005 454.36 li
260.145 454.5 260.246 454.573 260.311 454.602 cv
260.367 454.629 260.432 454.629 260.487 454.61 cv
260.551 454.593 260.625 454.537 260.728 454.435 cv
260.819 454.519 li
259.756 455.582 li
259.664 455.499 li
259.71 455.452 li
259.811 455.351 259.867 455.268 259.876 455.193 cv
259.885 455.128 259.867 455.055 259.82 454.98 cv
259.811 454.953 259.737 454.869 259.617 454.749 cv
258.729 453.861 li
258.535 453.668 258.359 453.547 258.221 453.51 cv
258.082 453.473 257.953 453.51 257.833 453.63 cv
257.647 453.815 257.564 454.102 257.592 454.49 cv
258.729 455.637 li
258.877 455.785 258.97 455.859 259.025 455.878 cv
259.09 455.905 259.155 455.905 259.22 455.887 cv
259.275 455.868 259.358 455.804 259.479 455.684 cv
259.571 455.767 li
258.498 456.84 li
258.415 456.756 li
258.461 456.701 li
258.572 456.599 258.619 456.497 258.6 456.405 cv
258.582 456.303 258.498 456.183 258.341 456.026 cv
257.546 455.23 li
257.287 454.971 257.12 454.814 257.056 454.777 cv
256.981 454.731 256.926 454.703 256.879 454.712 cv
256.843 454.712 256.796 454.74 256.759 454.777 cv
256.713 454.823 256.667 454.888 256.63 454.971 cv
256.51 454.916 li
256.898 454 li
257 453.908 li
257.453 454.352 li
257.453 454.352 li
cp
ef
315.108 507.104 mo
314.941 506.91 314.867 506.707 314.867 506.504 cv
314.867 506.301 314.933 506.134 315.063 506.005 cv
315.146 505.921 315.256 505.866 315.386 505.838 cv
315.506 505.811 315.635 505.819 315.765 505.866 cv
315.849 505.903 315.959 505.986 316.106 506.115 cv
315.108 507.104 li
315.108 507.104 li
cp
315.237 507.244 mo
316.727 505.755 li
316.458 505.486 316.172 505.356 315.857 505.348 cv
315.543 505.348 315.266 505.469 315.025 505.709 cv
314.738 505.995 314.608 506.328 314.627 506.726 cv
314.646 507.114 314.831 507.503 315.201 507.863 cv
315.543 508.205 315.903 508.381 316.292 508.4 cv
316.671 508.418 316.995 508.298 317.254 508.039 cv
317.494 507.809 317.605 507.521 317.587 507.179 cv
317.568 506.847 317.467 506.56 317.281 506.31 cv
317.161 506.337 li
317.281 506.597 317.328 506.818 317.3 506.994 cv
317.272 507.179 317.189 507.336 317.051 507.475 cv
316.838 507.688 316.561 507.78 316.228 507.762 cv
315.886 507.733 315.562 507.559 315.237 507.244 cv
315.237 507.244 li
315.237 507.244 li
cp
313.526 507.207 mo
314.257 507.938 li
314.174 508.021 li
313.888 507.845 313.656 507.771 313.48 507.78 cv
313.305 507.789 313.147 507.863 313 508.012 cv
312.897 508.122 312.833 508.233 312.824 508.363 cv
312.814 508.483 312.842 508.585 312.916 508.649 cv
313 508.742 313.102 508.788 313.212 508.807 cv
313.332 508.825 313.499 508.788 313.712 508.714 cv
314.22 508.539 li
314.701 508.372 315.063 508.418 315.312 508.677 cv
315.506 508.871 315.599 509.103 315.562 509.371 cv
315.534 509.639 315.432 509.861 315.246 510.046 cv
315.117 510.176 314.941 510.305 314.729 510.426 cv
314.664 510.462 314.608 510.499 314.581 510.536 cv
314.544 510.563 314.534 510.619 314.554 510.675 cv
314.479 510.749 li
313.702 509.981 li
313.785 509.907 li
314.045 510.083 314.294 510.166 314.534 510.147 cv
314.766 510.139 314.96 510.055 315.117 509.898 cv
315.219 509.796 315.284 509.676 315.284 509.546 cv
315.293 509.408 315.246 509.297 315.154 509.214 cv
315.053 509.103 314.924 509.048 314.775 509.057 cv
314.618 509.057 314.378 509.111 314.036 509.232 cv
313.702 509.343 313.452 509.39 313.286 509.371 cv
313.129 509.353 312.981 509.278 312.842 509.14 cv
312.666 508.964 312.574 508.751 312.584 508.511 cv
312.584 508.271 312.676 508.058 312.87 507.863 cv
312.953 507.78 313.073 507.697 313.23 507.613 cv
313.342 507.559 313.406 507.512 313.425 507.484 cv
313.452 507.466 313.472 507.438 313.472 507.41 cv
313.472 507.383 313.462 507.345 313.443 507.29 cv
313.526 507.207 li
313.526 507.207 li
cp
ef
316.052 453.075 mo
316.246 452.909 316.449 452.825 316.653 452.835 cv
316.856 452.835 317.022 452.899 317.152 453.029 cv
317.235 453.112 317.291 453.224 317.318 453.344 cv
317.347 453.473 317.337 453.603 317.291 453.732 cv
317.254 453.806 317.171 453.927 317.041 454.064 cv
316.052 453.075 li
316.052 453.075 li
cp
315.913 453.205 mo
317.402 454.694 li
317.67 454.426 317.8 454.139 317.809 453.824 cv
317.809 453.51 317.688 453.232 317.448 452.992 cv
317.171 452.705 316.828 452.576 316.431 452.595 cv
316.042 452.604 315.654 452.798 315.293 453.168 cv
314.951 453.51 314.775 453.87 314.757 454.25 cv
314.738 454.639 314.858 454.962 315.117 455.221 cv
315.357 455.452 315.645 455.563 315.978 455.545 cv
316.311 455.535 316.598 455.434 316.847 455.249 cv
316.828 455.128 li
316.561 455.249 316.338 455.295 316.163 455.268 cv
315.978 455.239 315.82 455.156 315.682 455.009 cv
315.469 454.805 315.376 454.527 315.395 454.186 cv
315.423 453.853 315.599 453.52 315.913 453.205 cv
315.913 453.205 li
315.913 453.205 li
cp
314.202 450.643 mo
314.757 450.597 315.146 450.689 315.376 450.911 cv
315.487 451.031 315.562 451.161 315.589 451.309 cv
315.617 451.447 315.58 451.614 315.496 451.799 cv
315.441 451.929 315.312 452.086 315.117 452.28 cv
314.192 453.205 li
314.063 453.334 313.979 453.436 313.952 453.51 cv
313.934 453.565 313.934 453.621 313.942 453.686 cv
313.962 453.741 314.026 453.824 314.128 453.927 cv
314.036 454.019 li
312.972 452.955 li
313.064 452.862 li
313.11 452.909 li
313.203 453.011 313.286 453.066 313.36 453.075 cv
313.435 453.085 313.508 453.066 313.573 453.02 cv
313.609 453.002 313.684 452.937 313.805 452.816 cv
314.691 451.929 li
314.887 451.734 315.006 451.559 315.044 451.42 cv
315.08 451.281 315.044 451.151 314.924 451.031 cv
314.738 450.847 314.451 450.763 314.063 450.782 cv
312.926 451.929 li
312.777 452.077 312.694 452.169 312.676 452.225 cv
312.657 452.289 312.657 452.354 312.666 452.41 cv
312.685 452.475 312.759 452.558 312.87 452.678 cv
312.787 452.761 li
311.714 451.697 li
311.807 451.605 li
311.853 451.66 li
311.964 451.763 312.065 451.817 312.157 451.799 cv
312.251 451.78 312.38 451.697 312.528 451.54 cv
313.332 450.735 li
313.592 450.477 313.739 450.319 313.785 450.245 cv
313.832 450.181 313.851 450.125 313.851 450.079 cv
313.841 450.033 313.822 449.996 313.776 449.949 cv
313.739 449.912 313.675 449.866 313.592 449.829 cv
313.639 449.709 li
314.554 450.098 li
314.654 450.199 li
314.202 450.643 li
314.202 450.643 li
cp
ef
260.135 506.43 mo
260.043 506.522 li
260.117 506.634 260.163 506.735 260.163 506.818 cv
260.163 506.901 260.135 507.021 260.061 507.179 cv
258.951 509.686 li
259.035 509.769 li
261.042 509.02 li
260.209 510.943 li
260.301 511.035 li
262.873 509.898 li
263.104 509.796 263.298 509.806 263.446 509.926 cv
263.539 509.833 li
262.864 509.158 li
262.771 509.241 li
262.864 509.334 262.91 509.408 262.919 509.464 cv
262.919 509.52 262.91 509.565 262.882 509.593 cv
262.826 509.639 262.744 509.694 262.632 509.75 cv
260.995 510.48 li
261.735 508.761 li
261.754 508.714 261.781 508.677 261.809 508.649 cv
261.865 508.594 261.92 508.566 261.976 508.576 cv
262.059 508.585 262.161 508.641 262.271 508.742 cv
262.364 508.658 li
261.337 507.642 li
261.254 507.725 li
261.347 507.826 261.393 507.9 261.412 507.956 cv
261.43 508.058 261.421 508.169 261.365 508.298 cv
261.171 508.742 li
259.691 509.288 li
260.468 507.576 li
260.505 507.484 260.551 507.41 260.598 507.364 cv
260.644 507.317 260.69 507.299 260.746 507.299 cv
260.792 507.309 260.856 507.345 260.949 507.419 cv
261.032 507.336 li
260.135 506.43 li
260.135 506.43 li
cp
259.83 506.005 mo
259.1 506.735 li
259.025 506.661 li
259.192 506.374 259.275 506.144 259.266 505.967 cv
259.257 505.791 259.173 505.635 259.035 505.486 cv
258.924 505.375 258.813 505.32 258.683 505.312 cv
258.563 505.302 258.461 505.329 258.387 505.403 cv
258.304 505.486 258.248 505.589 258.239 505.699 cv
258.221 505.811 258.258 505.977 258.332 506.199 cv
258.507 506.707 li
258.665 507.179 258.619 507.549 258.369 507.799 cv
258.175 507.993 257.943 508.076 257.675 508.048 cv
257.407 508.021 257.185 507.919 257 507.733 cv
256.871 507.604 256.741 507.429 256.621 507.216 cv
256.584 507.143 256.547 507.096 256.51 507.059 cv
256.473 507.031 256.427 507.021 256.371 507.04 cv
256.288 506.957 li
257.064 506.189 li
257.139 506.264 li
256.963 506.532 256.879 506.781 256.898 507.013 cv
256.908 507.253 256.991 507.447 257.139 507.595 cv
257.25 507.706 257.37 507.762 257.5 507.771 cv
257.629 507.771 257.749 507.733 257.833 507.642 cv
257.943 507.53 257.99 507.401 257.99 507.253 cv
257.99 507.104 257.925 506.864 257.814 506.522 cv
257.703 506.18 257.647 505.931 257.675 505.773 cv
257.694 505.616 257.768 505.459 257.907 505.329 cv
258.082 505.153 258.294 505.061 258.535 505.061 cv
258.776 505.061 258.988 505.163 259.183 505.356 cv
259.266 505.44 259.349 505.561 259.432 505.718 cv
259.488 505.819 259.534 505.884 259.552 505.912 cv
259.581 505.939 259.608 505.949 259.636 505.958 cv
259.654 505.958 259.701 505.949 259.756 505.931 cv
259.83 506.005 li
259.83 506.005 li
cp
ef
318.373 449.607 mo
318.373 449.607 li
310.483 441.709 299.571 436.826 287.52 436.826 cv
275.479 436.826 264.565 441.709 256.667 449.607 cv
248.778 457.505 243.895 468.409 243.895 480.46 cv
243.895 492.511 248.778 503.415 256.667 511.313 cv
264.565 519.211 275.479 524.095 287.52 524.095 cv
299.571 524.095 310.483 519.211 318.373 511.313 cv
326.271 503.415 331.154 492.511 331.154 480.46 cv
331.154 468.409 326.271 457.505 318.373 449.607 cv
cp
287.52 435.901 mo
299.829 435.901 310.965 440.896 319.029 448.95 cv
327.095 457.016 332.079 468.16 332.079 480.46 cv
332.079 492.761 327.095 503.905 319.029 511.97 cv
310.965 520.034 299.829 525.02 287.52 525.02 cv
275.219 525.02 264.084 520.034 256.02 511.97 cv
247.955 503.905 242.97 492.761 242.97 480.46 cv
242.97 468.16 247.955 457.016 256.02 448.95 cv
264.084 440.896 275.219 435.901 287.52 435.901 cv
287.52 435.901 li
cp
ef
312.103 455.887 mo
312.103 455.887 li
305.813 449.598 297.12 445.704 287.52 445.704 cv
277.929 445.704 269.236 449.598 262.947 455.887 cv
256.658 462.176 252.765 470.86 252.765 480.46 cv
252.765 490.061 256.658 498.744 262.947 505.033 cv
269.236 511.331 277.929 515.216 287.52 515.216 cv
297.12 515.216 305.813 511.331 312.103 505.033 cv
318.392 498.744 322.285 490.061 322.285 480.46 cv
322.285 470.86 318.392 462.176 312.103 455.887 cv
cp
287.52 445.501 mo
297.176 445.501 305.915 449.413 312.241 455.739 cv
318.566 462.064 322.488 470.805 322.488 480.46 cv
322.488 490.115 318.566 498.855 312.241 505.182 cv
305.915 511.508 297.176 515.419 287.52 515.419 cv
277.874 515.419 269.134 511.508 262.799 505.182 cv
256.473 498.855 252.561 490.115 252.561 480.46 cv
252.561 470.805 256.473 462.064 262.799 455.739 cv
269.134 449.413 277.874 445.501 287.52 445.501 cv
287.52 445.501 li
cp
ef
326.171 480.368 mo
331.258 480.368 li
331.258 480.516 li
326.171 480.516 li
326.171 480.368 li
cp
ef
329.905 468.725 mo
307.172 468.998 li
290.312 469.202 li
287.537 480.459 li
329.905 468.725 li
cp
.184314 .741176 .788235 rgb
ef
329.905 468.725 mo
310.273 480.198 li
295.71 488.697 li
287.537 480.459 li
329.905 468.725 li
cp
.152941 .619608 .647059 rgb
ef
245.169 492.193 mo
264.804 480.732 li
279.367 472.233 li
287.537 480.459 li
245.169 492.193 li
cp
.886275 .262745 .282353 rgb
ef
245.169 492.193 mo
267.906 491.933 li
284.766 491.728 li
287.537 480.459 li
245.169 492.193 li
cp
.678431 .145098 .184314 rgb
ef
276.199 483.599 mo
277.934 489.86 284.415 493.53 290.677 491.796 cv
296.938 490.062 300.608 483.58 298.875 477.319 cv
276.199 483.599 li
cp
.196078 .207843 .282353 rgb
ef
276.199 483.599 mo
274.466 477.338 278.135 470.855 284.397 469.122 cv
290.659 467.388 297.141 471.058 298.875 477.319 cv
276.199 483.599 li
cp
.313726 .282353 .32549 rgb
ef
279.092 482.798 mo
280.384 487.461 285.212 490.194 289.876 488.903 cv
294.539 487.611 297.273 482.783 295.981 478.12 cv
279.092 482.798 li
cp
.898039 .854902 .788235 rgb
ef
279.092 482.798 mo
277.801 478.134 280.535 473.307 285.198 472.015 cv
289.861 470.723 294.69 473.456 295.981 478.12 cv
279.092 482.798 li
cp
.972549 1 1 rgb
ef
281.637 482.093 mo
282.54 485.351 285.912 487.261 289.17 486.358 cv
292.429 485.456 294.339 482.083 293.437 478.825 cv
281.637 482.093 li
cp
.196078 .207843 .282353 rgb
ef
281.637 482.093 mo
280.735 478.835 282.645 475.462 285.903 474.56 cv
289.161 473.657 292.534 475.567 293.437 478.825 cv
281.637 482.093 li
cp
.313726 .282353 .32549 rgb
ef
478.295 546.904 mo
516.205 546.901 546.936 516.169 546.936 478.259 cv
546.936 440.349 516.205 409.616 478.295 409.613 cv
478.295 546.904 li
cp
.196078 .207843 .282353 rgb
ef
478.295 546.904 mo
440.387 546.901 409.655 516.169 409.655 478.259 cv
409.655 440.349 440.387 409.616 478.295 409.613 cv
478.295 546.904 li
cp
.313726 .282353 .32549 rgb
ef
478.295 536.183 mo
510.284 536.181 536.215 510.248 536.215 478.259 cv
536.215 446.27 510.284 420.337 478.295 420.335 cv
478.295 536.183 li
cp
.964706 .945098 .917647 rgb
ef
478.295 536.183 mo
446.307 536.181 420.375 510.248 420.375 478.259 cv
420.375 446.27 446.307 420.337 478.295 420.335 cv
478.295 536.183 li
cp
.972549 1 1 rgb
ef
481.679 431.739 mo
481.679 431.842 481.661 431.932 481.627 432.014 cv
481.591 432.093 481.543 432.158 481.481 432.213 cv
481.423 432.265 481.353 432.304 481.271 432.328 cv
481.188 432.353 481.105 432.364 481.022 432.364 cv
480.277 432.364 li
480.121 432.364 479.987 432.349 479.875 432.319 cv
479.764 432.287 479.66 432.231 479.564 432.149 cv
479.467 432.067 479.377 431.957 479.288 431.816 cv
479.2 431.679 479.101 431.497 478.989 431.275 cv
476.859 427.262 li
476.735 427.022 476.61 426.764 476.481 426.487 cv
476.353 426.212 476.239 425.942 476.138 425.682 cv
476.124 425.682 li
476.142 426.001 476.155 426.318 476.164 426.635 cv
476.174 426.95 476.178 427.277 476.178 427.613 cv
476.178 432.106 li
476.178 432.149 476.167 432.189 476.142 432.227 cv
476.117 432.261 476.074 432.289 476.015 432.314 cv
475.956 432.339 475.875 432.357 475.772 432.371 cv
475.671 432.385 475.54 432.392 475.382 432.392 cv
475.226 432.392 475.097 432.385 474.994 432.371 cv
474.893 432.357 474.813 432.339 474.757 432.314 cv
474.698 432.292 474.657 432.261 474.637 432.227 cv
474.614 432.189 474.603 432.149 474.603 432.106 cv
474.603 424.392 li
474.603 424.184 474.664 424.027 474.786 423.923 cv
474.906 423.819 475.056 423.768 475.234 423.768 cv
476.169 423.768 li
476.337 423.768 476.479 423.78 476.595 423.811 cv
476.71 423.84 476.813 423.887 476.902 423.953 cv
476.993 424.019 477.079 424.111 477.158 424.229 cv
477.237 424.345 477.319 424.491 477.403 424.663 cv
479.071 427.803 li
479.169 427.993 479.264 428.182 479.358 428.364 cv
479.454 428.548 479.547 428.731 479.632 428.914 cv
479.721 429.098 479.807 429.278 479.891 429.456 cv
479.977 429.635 480.058 429.811 480.137 429.987 cv
480.144 429.987 li
480.13 429.678 480.119 429.354 480.112 429.019 cv
480.105 428.682 480.104 428.359 480.104 428.055 cv
480.104 424.025 li
480.104 423.982 480.117 423.941 480.144 423.905 cv
480.169 423.871 480.214 423.84 480.275 423.813 cv
480.339 423.785 480.42 423.768 480.521 423.756 cv
480.624 423.744 480.755 423.74 480.914 423.74 cv
481.065 423.74 481.192 423.744 481.294 423.756 cv
481.396 423.768 481.473 423.785 481.529 423.813 cv
481.584 423.84 481.624 423.871 481.646 423.905 cv
481.668 423.941 481.679 423.979 481.679 424.025 cv
481.679 431.739 li
cp
.196078 .207843 .282353 rgb
ef
480.931 531.023 mo
480.931 531.478 480.848 531.871 480.68 532.213 cv
480.51 532.553 480.284 532.835 479.996 533.063 cv
479.707 533.29 479.372 533.462 478.987 533.578 cv
478.603 533.693 478.19 533.75 477.751 533.75 cv
477.454 533.75 477.181 533.725 476.925 533.675 cv
476.671 533.625 476.447 533.566 476.253 533.496 cv
476.058 533.429 475.895 533.355 475.764 533.278 cv
475.632 533.202 475.54 533.134 475.48 533.077 cv
475.424 533.019 475.383 532.935 475.358 532.826 cv
475.334 532.718 475.322 532.563 475.322 532.359 cv
475.322 532.222 475.327 532.108 475.336 532.016 cv
475.345 531.923 475.358 531.848 475.379 531.789 cv
475.398 531.732 475.427 531.692 475.458 531.667 cv
475.492 531.643 475.53 531.631 475.575 531.631 cv
475.637 531.631 475.725 531.667 475.838 531.742 cv
475.952 531.814 476.097 531.896 476.272 531.984 cv
476.449 532.072 476.662 532.153 476.908 532.227 cv
477.153 532.301 477.438 532.337 477.763 532.337 cv
477.975 532.337 478.165 532.313 478.333 532.263 cv
478.502 532.21 478.646 532.141 478.763 532.048 cv
478.881 531.955 478.969 531.842 479.032 531.706 cv
479.094 531.569 479.125 531.418 479.125 531.251 cv
479.125 531.056 479.073 530.889 478.967 530.75 cv
478.86 530.61 478.722 530.487 478.55 530.379 cv
478.381 530.271 478.186 530.169 477.969 530.073 cv
477.753 529.979 477.529 529.879 477.299 529.772 cv
477.067 529.666 476.843 529.546 476.628 529.41 cv
476.411 529.276 476.217 529.116 476.047 528.928 cv
475.874 528.74 475.736 528.519 475.63 528.261 cv
475.523 528.005 475.472 527.697 475.472 527.339 cv
475.472 526.93 475.549 526.567 475.7 526.255 cv
475.852 525.944 476.058 525.687 476.315 525.48 cv
476.576 525.274 476.879 525.121 477.23 525.019 cv
477.581 524.917 477.954 524.867 478.349 524.867 cv
478.55 524.867 478.754 524.883 478.958 524.915 cv
479.161 524.944 479.352 524.987 479.528 525.039 cv
479.705 525.094 479.86 525.152 479.999 525.218 cv
480.135 525.286 480.225 525.34 480.271 525.386 cv
480.313 525.429 480.343 525.467 480.358 525.496 cv
480.375 525.528 480.389 525.569 480.399 525.621 cv
480.411 525.671 480.417 525.734 480.422 525.813 cv
480.427 525.891 480.429 525.985 480.429 526.101 cv
480.429 526.228 480.427 526.336 480.42 526.425 cv
480.413 526.513 480.401 526.585 480.386 526.644 cv
480.37 526.701 480.347 526.744 480.32 526.769 cv
480.291 526.796 480.253 526.81 480.202 526.81 cv
480.155 526.81 480.078 526.777 479.972 526.717 cv
479.865 526.655 479.734 526.588 479.58 526.513 cv
479.424 526.44 479.245 526.375 479.041 526.315 cv
478.838 526.255 478.615 526.226 478.371 526.226 cv
478.181 526.226 478.016 526.248 477.873 526.295 cv
477.733 526.341 477.615 526.406 477.521 526.488 cv
477.425 526.569 477.353 526.667 477.307 526.782 cv
477.26 526.897 477.237 527.02 477.237 527.146 cv
477.237 527.337 477.289 527.502 477.394 527.64 cv
477.497 527.78 477.638 527.905 477.813 528.014 cv
477.986 528.12 478.186 528.222 478.407 528.317 cv
478.627 528.412 478.854 528.514 479.084 528.618 cv
479.315 528.725 479.541 528.845 479.761 528.98 cv
479.983 529.116 480.18 529.276 480.354 529.465 cv
480.526 529.652 480.667 529.872 480.772 530.128 cv
480.88 530.382 480.931 530.681 480.931 531.023 cv
cp
ef
531.532 482.389 mo
531.532 482.521 531.527 482.63 531.517 482.72 cv
531.505 482.808 531.488 482.88 531.466 482.933 cv
531.442 482.988 531.414 483.028 531.38 483.053 cv
531.348 483.078 531.308 483.09 531.269 483.09 cv
526.864 483.09 li
526.716 483.09 526.591 483.046 526.489 482.958 cv
526.387 482.871 526.336 482.728 526.336 482.527 cv
526.336 474.872 li
526.336 474.673 526.387 474.529 526.489 474.441 cv
526.591 474.354 526.716 474.31 526.864 474.31 cv
531.247 474.31 li
531.287 474.31 531.323 474.321 531.356 474.344 cv
531.387 474.367 531.414 474.406 531.438 474.463 cv
531.458 474.521 531.477 474.592 531.488 474.68 cv
531.5 474.771 531.505 474.881 531.505 475.018 cv
531.505 475.146 531.5 475.252 531.488 475.343 cv
531.477 475.431 531.461 475.502 531.438 475.556 cv
531.414 475.61 531.387 475.65 531.356 475.676 cv
531.323 475.701 531.287 475.713 531.247 475.713 cv
528.114 475.713 li
528.114 477.853 li
530.755 477.853 li
530.796 477.853 530.833 477.863 530.865 477.89 cv
530.9 477.915 530.928 477.952 530.951 478.006 cv
530.975 478.057 530.99 478.126 531.002 478.216 cv
531.014 478.304 531.018 478.41 531.018 478.535 cv
531.018 478.668 531.014 478.776 531.002 478.862 cv
530.99 478.947 530.975 479.018 530.951 479.068 cv
530.928 479.121 530.9 479.158 530.865 479.18 cv
530.833 479.202 530.796 479.214 530.755 479.214 cv
528.114 479.214 li
528.114 481.688 li
531.269 481.688 li
531.311 481.688 531.348 481.698 531.38 481.724 cv
531.414 481.75 531.442 481.789 531.466 481.845 cv
531.488 481.898 531.505 481.97 531.517 482.058 cv
531.527 482.148 531.532 482.257 531.532 482.389 cv
cp
ef
430.693 483.097 mo
430.668 483.196 430.634 483.277 430.589 483.338 cv
430.547 483.396 430.48 483.443 430.393 483.474 cv
430.306 483.506 430.193 483.526 430.057 483.537 cv
429.918 483.548 429.743 483.553 429.532 483.553 cv
429.296 483.553 429.104 483.548 428.962 483.537 cv
428.817 483.526 428.704 483.506 428.621 483.474 cv
428.538 483.443 428.479 483.396 428.44 483.338 cv
428.403 483.277 428.374 483.196 428.353 483.097 cv
427.06 477.977 li
427.047 477.977 li
425.824 483.097 li
425.803 483.192 425.775 483.271 425.737 483.331 cv
425.7 483.391 425.641 483.438 425.56 483.472 cv
425.479 483.506 425.368 483.526 425.23 483.537 cv
425.09 483.548 424.906 483.553 424.679 483.553 cv
424.436 483.553 424.244 483.548 424.101 483.537 cv
423.958 483.526 423.844 483.506 423.761 483.474 cv
423.677 483.443 423.617 483.396 423.579 483.338 cv
423.543 483.277 423.511 483.196 423.487 483.097 cv
421.653 476.048 li
421.615 475.896 421.596 475.78 421.592 475.694 cv
421.588 475.609 421.611 475.544 421.662 475.499 cv
421.715 475.452 421.801 475.424 421.918 475.413 cv
422.037 475.403 422.201 475.398 422.411 475.398 cv
422.607 475.398 422.762 475.401 422.876 475.407 cv
422.991 475.413 423.076 475.429 423.134 475.452 cv
423.191 475.476 423.231 475.508 423.253 475.552 cv
423.272 475.595 423.29 475.656 423.302 475.735 cv
424.721 481.923 li
424.728 481.923 li
426.199 475.78 li
426.216 475.701 426.237 475.636 426.266 475.586 cv
426.291 475.535 426.338 475.497 426.401 475.472 cv
426.466 475.443 426.555 475.424 426.668 475.413 cv
426.778 475.403 426.93 475.398 427.117 475.398 cv
427.317 475.398 427.475 475.403 427.594 475.412 cv
427.713 475.42 427.806 475.437 427.869 475.465 cv
427.933 475.492 427.979 475.531 428.01 475.58 cv
428.039 475.629 428.061 475.697 428.078 475.78 cv
429.603 481.923 li
429.615 481.923 li
431.021 475.755 li
431.034 475.688 431.051 475.631 431.07 475.582 cv
431.092 475.535 431.132 475.497 431.189 475.472 cv
431.249 475.443 431.332 475.424 431.441 475.413 cv
431.55 475.403 431.701 475.398 431.896 475.398 cv
432.082 475.398 432.225 475.403 432.327 475.413 cv
432.43 475.424 432.502 475.452 432.549 475.499 cv
432.594 475.544 432.615 475.611 432.608 475.701 cv
432.602 475.79 432.58 475.912 432.542 476.067 cv
430.693 483.097 li
cp
ef
478.334 434.163 mo
478.334 439.25 li
478.187 439.25 li
478.187 434.163 li
478.334 434.163 li
cp
ef
466.922 435.652 mo
468.234 440.554 li
468.097 440.591 li
466.783 435.689 li
466.922 435.652 li
cp
ef
456.276 440.036 mo
458.819 444.438 li
458.69 444.512 li
456.156 440.11 li
456.276 440.036 li
cp
ef
440.11 456.156 mo
444.513 458.69 li
444.438 458.819 li
440.036 456.276 li
440.11 456.156 li
cp
ef
435.689 466.782 mo
440.591 468.096 li
440.554 468.234 li
435.652 466.922 li
435.689 466.782 li
cp
ef
434.163 478.186 mo
439.25 478.186 li
439.25 478.334 li
434.163 478.334 li
434.163 478.186 li
cp
ef
435.652 489.607 mo
440.554 488.285 li
440.591 488.424 li
435.689 489.747 li
435.652 489.607 li
cp
ef
440.036 500.243 mo
444.438 497.71 li
444.513 497.829 li
440.11 500.373 li
440.036 500.243 li
cp
ef
456.156 516.41 mo
458.69 512.017 li
458.819 512.082 li
456.276 516.483 li
456.156 516.41 li
cp
ef
466.783 520.831 mo
468.097 515.929 li
468.234 515.966 li
466.922 520.868 li
466.783 520.831 li
cp
ef
489.607 520.868 mo
488.285 515.966 li
488.424 515.929 li
489.747 520.831 li
489.607 520.868 li
cp
ef
500.244 516.483 mo
497.709 512.082 li
497.829 512.017 li
500.373 516.41 li
500.244 516.483 li
cp
ef
516.41 500.373 mo
512.017 497.829 li
512.082 497.71 li
516.484 500.243 li
516.41 500.373 li
cp
ef
520.831 489.747 mo
515.93 488.424 li
515.967 488.285 li
520.868 489.607 li
520.831 489.747 li
cp
ef
520.868 466.922 mo
515.967 468.234 li
515.93 468.096 li
520.831 466.782 li
520.868 466.922 li
cp
ef
516.484 456.276 mo
512.082 458.819 li
512.017 458.69 li
516.41 456.156 li
516.484 456.276 li
cp
ef
500.373 440.11 mo
497.829 444.512 li
497.709 444.438 li
500.244 440.036 li
500.373 440.11 li
cp
ef
489.747 435.689 mo
488.434 440.591 li
488.295 440.554 li
489.607 435.652 li
489.747 435.689 li
cp
ef
478.187 522.356 mo
478.187 517.279 li
478.334 517.279 li
478.334 522.356 li
478.187 522.356 li
cp
ef
445.076 445.086 mo
445.391 444.762 445.909 444.762 446.232 445.086 cv
446.547 445.4 446.547 445.918 446.232 446.241 cv
445.909 446.556 445.391 446.556 445.076 446.241 cv
444.762 445.918 444.762 445.4 445.076 445.086 cv
cp
ef
445.104 511.472 mo
444.79 511.147 444.79 510.63 445.104 510.315 cv
445.428 509.991 445.946 509.991 446.261 510.315 cv
446.584 510.63 446.584 511.147 446.261 511.472 cv
445.946 511.785 445.428 511.785 445.104 511.472 cv
cp
ef
511.49 511.435 mo
511.166 511.758 510.648 511.758 510.334 511.435 cv
510.02 511.12 510.02 510.602 510.334 510.278 cv
510.648 509.964 511.166 509.964 511.49 510.278 cv
511.804 510.602 511.804 511.12 511.49 511.435 cv
cp
ef
511.463 445.059 mo
511.776 445.372 511.776 445.89 511.463 446.204 cv
511.139 446.528 510.62 446.528 510.306 446.204 cv
509.982 445.89 509.982 445.372 510.306 445.059 cv
510.62 444.734 511.139 444.734 511.463 445.059 cv
cp
ef
445.076 445.086 mo
445.391 444.762 445.909 444.762 446.232 445.086 cv
446.547 445.4 446.547 445.918 446.232 446.241 cv
445.909 446.556 445.391 446.556 445.076 446.241 cv
444.762 445.918 444.762 445.4 445.076 445.086 cv
cp
ef
437.622 454.806 mo
437.844 454.417 438.344 454.288 438.741 454.51 cv
439.13 454.731 439.259 455.231 439.037 455.629 cv
438.807 456.018 438.307 456.146 437.918 455.925 cv
437.529 455.703 437.4 455.203 437.622 454.806 cv
cp
ef
432.934 466.135 mo
433.054 465.7 433.497 465.441 433.941 465.553 cv
434.376 465.673 434.635 466.117 434.515 466.551 cv
434.395 466.985 433.95 467.245 433.516 467.134 cv
433.081 467.014 432.822 466.57 432.934 466.135 cv
cp
ef
432.952 490.431 mo
432.832 489.997 433.091 489.543 433.525 489.433 cv
433.96 489.312 434.413 489.57 434.524 490.006 cv
434.645 490.44 434.386 490.894 433.95 491.004 cv
433.516 491.125 433.063 490.865 432.952 490.431 cv
cp
ef
437.641 501.751 mo
437.419 501.362 437.548 500.854 437.945 500.632 cv
438.334 500.41 438.834 500.54 439.056 500.928 cv
439.277 501.325 439.148 501.824 438.76 502.047 cv
438.371 502.27 437.872 502.14 437.641 501.751 cv
cp
ef
445.104 511.472 mo
444.79 511.147 444.79 510.63 445.104 510.315 cv
445.428 509.991 445.946 509.991 446.261 510.315 cv
446.584 510.63 446.584 511.147 446.261 511.472 cv
445.946 511.785 445.428 511.785 445.104 511.472 cv
cp
ef
454.833 518.926 mo
454.445 518.694 454.307 518.195 454.528 517.807 cv
454.76 517.418 455.26 517.279 455.647 517.511 cv
456.036 517.732 456.175 518.231 455.943 518.62 cv
455.722 519.009 455.223 519.147 454.833 518.926 cv
cp
ef
466.153 523.605 mo
465.719 523.485 465.46 523.041 465.58 522.606 cv
465.691 522.172 466.145 521.913 466.579 522.033 cv
467.014 522.144 467.272 522.597 467.152 523.032 cv
467.042 523.467 466.588 523.726 466.153 523.605 cv
cp
ef
490.45 523.596 mo
490.015 523.716 489.57 523.458 489.45 523.014 cv
489.34 522.579 489.59 522.135 490.033 522.015 cv
490.468 521.903 490.912 522.162 491.032 522.597 cv
491.144 523.032 490.885 523.476 490.45 523.596 cv
cp
ef
501.77 518.897 mo
501.382 519.129 500.882 518.99 500.66 518.602 cv
500.429 518.214 500.567 517.714 500.956 517.482 cv
501.344 517.261 501.844 517.391 502.065 517.788 cv
502.297 518.177 502.158 518.676 501.77 518.897 cv
cp
ef
511.49 511.435 mo
511.166 511.758 510.648 511.758 510.334 511.435 cv
510.02 511.12 510.02 510.602 510.334 510.278 cv
510.648 509.964 511.166 509.964 511.49 510.278 cv
511.804 510.602 511.804 511.12 511.49 511.435 cv
cp
ef
518.944 501.714 mo
518.722 502.103 518.223 502.232 517.825 502.01 cv
517.437 501.788 517.307 501.289 517.529 500.891 cv
517.751 500.503 518.251 500.373 518.648 500.595 cv
519.037 500.826 519.166 501.325 518.944 501.714 cv
cp
ef
523.624 490.385 mo
523.513 490.828 523.06 491.087 522.625 490.967 cv
522.19 490.848 521.932 490.403 522.052 489.969 cv
522.163 489.533 522.615 489.275 523.051 489.386 cv
523.485 489.506 523.744 489.95 523.624 490.385 cv
cp
ef
523.615 466.089 mo
523.735 466.523 523.477 466.977 523.041 467.088 cv
522.606 467.208 522.153 466.948 522.043 466.515 cv
521.922 466.08 522.181 465.626 522.615 465.516 cv
523.051 465.396 523.503 465.654 523.615 466.089 cv
cp
ef
518.926 454.769 mo
519.147 455.166 519.019 455.666 518.62 455.888 cv
518.232 456.109 517.732 455.98 517.511 455.592 cv
517.279 455.194 517.418 454.694 517.807 454.473 cv
518.195 454.251 518.694 454.381 518.926 454.769 cv
cp
ef
511.463 445.059 mo
511.776 445.372 511.776 445.89 511.463 446.204 cv
511.139 446.528 510.62 446.528 510.306 446.204 cv
509.982 445.89 509.982 445.372 510.306 445.059 cv
510.62 444.734 511.139 444.734 511.463 445.059 cv
cp
ef
501.732 437.604 mo
502.121 437.825 502.26 438.325 502.028 438.713 cv
501.807 439.102 501.308 439.24 500.919 439.01 cv
500.53 438.787 500.392 438.288 500.623 437.899 cv
500.845 437.511 501.344 437.372 501.732 437.604 cv
cp
ef
490.413 432.914 mo
490.848 433.035 491.106 433.479 490.986 433.913 cv
490.875 434.348 490.422 434.607 489.987 434.496 cv
489.553 434.376 489.293 433.932 489.413 433.497 cv
489.524 433.054 489.978 432.794 490.413 432.914 cv
cp
ef
466.117 432.924 mo
466.552 432.813 466.996 433.072 467.116 433.506 cv
467.227 433.941 466.968 434.385 466.533 434.505 cv
466.099 434.616 465.654 434.357 465.534 433.923 cv
465.423 433.488 465.683 433.044 466.117 432.924 cv
cp
ef
454.797 437.622 mo
455.186 437.391 455.685 437.529 455.906 437.918 cv
456.138 438.307 455.999 438.806 455.61 439.037 cv
455.223 439.259 454.723 439.13 454.491 438.732 cv
454.27 438.344 454.408 437.844 454.797 437.622 cv
cp
ef
445.076 445.086 mo
445.391 444.762 445.909 444.762 446.232 445.086 cv
446.547 445.4 446.547 445.918 446.232 446.241 cv
445.909 446.556 445.391 446.556 445.076 446.241 cv
444.762 445.918 444.762 445.4 445.076 445.086 cv
cp
ef
445.104 511.472 mo
444.79 511.147 444.79 510.63 445.104 510.315 cv
445.428 509.991 445.946 509.991 446.261 510.315 cv
446.584 510.63 446.584 511.147 446.261 511.472 cv
445.946 511.785 445.428 511.785 445.104 511.472 cv
cp
ef
475.883 434.635 mo
476.068 434.626 li
476.179 436.799 li
476.004 436.809 li
475.883 434.635 li
cp
ef
473.608 434.819 mo
473.784 434.801 li
474.015 436.966 li
473.83 436.983 li
473.608 434.819 li
cp
ef
471.342 435.125 mo
471.518 435.097 li
471.851 437.243 li
471.676 437.271 li
471.342 435.125 li
cp
ef
469.095 435.551 mo
469.271 435.514 li
469.715 437.631 li
469.539 437.668 li
469.095 435.551 li
cp
ef
464.675 436.743 mo
464.85 436.688 li
465.516 438.75 li
465.35 438.806 li
464.675 436.743 li
cp
ef
462.519 437.511 mo
462.686 437.446 li
463.463 439.472 li
463.296 439.537 li
462.519 437.511 li
cp
ef
460.411 438.39 mo
460.577 438.315 li
461.456 440.295 li
461.289 440.369 li
460.411 438.39 li
cp
ef
458.348 439.379 mo
458.506 439.296 li
459.495 441.229 li
459.338 441.313 li
458.348 439.379 li
cp
ef
454.39 441.673 mo
454.547 441.571 li
455.722 443.394 li
455.574 443.485 li
454.39 441.673 li
cp
ef
452.513 442.968 mo
452.651 442.866 li
453.928 444.623 li
453.788 444.725 li
452.513 442.968 li
cp
ef
450.699 444.364 mo
450.839 444.253 li
452.207 445.937 li
452.068 446.048 li
450.699 444.364 li
cp
ef
448.961 445.854 mo
449.1 445.733 li
450.552 447.352 li
450.413 447.463 li
448.961 445.854 li
cp
ef
447.306 447.435 mo
447.435 447.306 li
448.97 448.841 li
448.841 448.97 li
447.306 447.435 li
cp
ef
445.733 449.1 mo
445.854 448.961 li
447.472 450.412 li
447.352 450.542 li
445.733 449.1 li
cp
ef
444.254 450.838 mo
444.364 450.699 li
446.057 452.06 li
445.937 452.207 li
444.254 450.838 li
cp
ef
442.866 452.651 mo
442.968 452.512 li
444.725 453.788 li
444.623 453.927 li
442.866 452.651 li
cp
ef
441.571 454.538 mo
441.673 454.39 li
443.495 455.573 li
443.394 455.722 li
441.571 454.538 li
cp
ef
439.297 458.505 mo
439.38 458.348 li
441.313 459.328 li
441.229 459.495 li
439.297 458.505 li
cp
ef
438.315 460.577 mo
438.39 460.41 li
440.369 461.289 li
440.295 461.455 li
438.315 460.577 li
cp
ef
437.446 462.686 mo
437.511 462.519 li
439.537 463.296 li
439.472 463.462 li
437.446 462.686 li
cp
ef
436.688 464.85 mo
436.743 464.674 li
438.807 465.349 li
438.75 465.516 li
436.688 464.85 li
cp
ef
435.514 469.261 mo
435.551 469.095 li
437.668 469.539 li
437.631 469.714 li
435.514 469.261 li
cp
ef
435.098 471.518 mo
435.125 471.343 li
437.271 471.675 li
437.243 471.851 li
435.098 471.518 li
cp
ef
434.802 473.783 mo
434.82 473.608 li
436.984 473.83 li
436.966 474.006 li
434.802 473.783 li
cp
ef
434.635 476.068 mo
434.645 475.883 li
436.809 475.994 li
436.799 476.179 li
434.635 476.068 li
cp
ef
434.645 480.637 mo
434.635 480.461 li
436.799 480.341 li
436.809 480.525 li
434.645 480.637 li
cp
ef
434.82 482.912 mo
434.802 482.736 li
436.966 482.514 li
436.984 482.69 li
434.82 482.912 li
cp
ef
435.125 485.187 mo
435.098 485.002 li
437.243 484.669 li
437.271 484.845 li
435.125 485.187 li
cp
ef
435.551 487.435 mo
435.514 487.259 li
437.631 486.806 li
437.668 486.981 li
435.551 487.435 li
cp
ef
436.743 491.846 mo
436.688 491.68 li
438.75 491.004 li
438.807 491.171 li
436.743 491.846 li
cp
ef
437.511 494.001 mo
437.446 493.834 li
439.472 493.058 li
439.537 493.224 li
437.511 494.001 li
cp
ef
438.39 496.109 mo
438.315 495.952 li
440.295 495.064 li
440.369 495.23 li
438.39 496.109 li
cp
ef
439.38 498.172 mo
439.297 498.015 li
441.229 497.025 li
441.313 497.191 li
439.38 498.172 li
cp
ef
441.673 502.13 mo
441.571 501.982 li
443.394 500.798 li
443.495 500.946 li
441.673 502.13 li
cp
ef
442.968 504.008 mo
442.866 503.869 li
444.623 502.593 li
444.725 502.74 li
442.968 504.008 li
cp
ef
444.364 505.82 mo
444.254 505.682 li
445.937 504.322 li
446.057 504.461 li
444.364 505.82 li
cp
ef
445.854 507.56 mo
445.733 507.43 li
447.352 505.978 li
447.472 506.107 li
445.854 507.56 li
cp
ef
447.435 509.215 mo
447.306 509.085 li
448.841 507.55 li
448.97 507.68 li
447.435 509.215 li
cp
ef
449.1 510.787 mo
448.961 510.666 li
450.413 509.058 li
450.552 509.178 li
449.1 510.787 li
cp
ef
450.839 512.267 mo
450.699 512.155 li
452.068 510.473 li
452.207 510.584 li
450.839 512.267 li
cp
ef
452.66 513.654 mo
452.513 513.552 li
453.788 511.795 li
453.928 511.906 li
452.66 513.654 li
cp
ef
454.547 514.949 mo
454.39 514.847 li
455.574 513.034 li
455.722 513.127 li
454.547 514.949 li
cp
ef
458.506 517.224 mo
458.348 517.141 li
459.338 515.208 li
459.495 515.291 li
458.506 517.224 li
cp
ef
460.577 518.204 mo
460.411 518.13 li
461.289 516.15 li
461.456 516.226 li
460.577 518.204 li
cp
ef
462.686 519.073 mo
462.519 519.009 li
463.296 516.983 li
463.463 517.049 li
462.686 519.073 li
cp
ef
464.85 519.841 mo
464.675 519.776 li
465.35 517.714 li
465.516 517.77 li
464.85 519.841 li
cp
ef
469.271 521.007 mo
469.095 520.97 li
469.539 518.852 li
469.715 518.889 li
469.271 521.007 li
cp
ef
471.518 521.423 mo
471.342 521.395 li
471.676 519.249 li
471.86 519.277 li
471.518 521.423 li
cp
ef
473.784 521.719 mo
473.608 521.7 li
473.83 519.545 li
474.015 519.563 li
473.784 521.719 li
cp
ef
476.068 521.895 mo
475.883 521.885 li
476.004 519.712 li
476.179 519.722 li
476.068 521.895 li
cp
ef
480.637 521.885 mo
480.461 521.895 li
480.351 519.722 li
480.525 519.712 li
480.637 521.885 li
cp
ef
482.921 521.7 mo
482.736 521.719 li
482.515 519.563 li
482.69 519.545 li
482.921 521.7 li
cp
ef
485.187 521.395 mo
485.012 521.423 li
484.669 519.277 li
484.845 519.249 li
485.187 521.395 li
cp
ef
487.435 520.97 mo
487.259 521.007 li
486.806 518.889 li
486.981 518.852 li
487.435 520.97 li
cp
ef
491.846 519.776 mo
491.68 519.832 li
491.005 517.77 li
491.18 517.714 li
491.846 519.776 li
cp
ef
494.001 519.009 mo
493.834 519.073 li
493.058 517.049 li
493.225 516.983 li
494.001 519.009 li
cp
ef
496.109 518.13 mo
495.953 518.204 li
495.064 516.226 li
495.231 516.15 li
496.109 518.13 li
cp
ef
498.172 517.141 mo
498.015 517.224 li
497.034 515.291 li
497.191 515.208 li
498.172 517.141 li
cp
ef
502.13 514.847 mo
501.982 514.949 li
500.799 513.127 li
500.946 513.034 li
502.13 514.847 li
cp
ef
504.017 513.552 mo
503.869 513.654 li
502.593 511.896 li
502.741 511.795 li
504.017 513.552 li
cp
ef
505.82 512.155 mo
505.682 512.267 li
504.322 510.584 li
504.461 510.473 li
505.82 512.155 li
cp
ef
507.56 510.666 mo
507.43 510.787 li
505.978 509.178 li
506.107 509.058 li
507.56 510.666 li
cp
ef
509.215 509.085 mo
509.085 509.215 li
507.56 507.68 li
507.68 507.55 li
509.215 509.085 li
cp
ef
510.787 507.43 mo
510.667 507.56 li
509.058 506.107 li
509.178 505.978 li
510.787 507.43 li
cp
ef
512.267 505.682 mo
512.156 505.82 li
510.473 504.461 li
510.584 504.322 li
512.267 505.682 li
cp
ef
513.654 503.869 mo
513.552 504.008 li
511.795 502.731 li
511.906 502.593 li
513.654 503.869 li
cp
ef
514.949 501.982 mo
514.856 502.13 li
513.034 500.946 li
513.127 500.798 li
514.949 501.982 li
cp
ef
517.224 498.015 mo
517.15 498.172 li
515.217 497.191 li
515.291 497.025 li
517.224 498.015 li
cp
ef
518.204 495.943 mo
518.14 496.109 li
516.151 495.23 li
516.225 495.064 li
518.204 495.943 li
cp
ef
519.083 493.834 mo
519.019 494.001 li
516.992 493.224 li
517.058 493.058 li
519.083 493.834 li
cp
ef
519.842 491.67 mo
519.785 491.846 li
517.724 491.171 li
517.779 491.004 li
519.842 491.67 li
cp
ef
521.016 487.259 mo
520.979 487.435 li
518.852 486.981 li
518.889 486.806 li
521.016 487.259 li
cp
ef
521.423 485.002 mo
521.396 485.178 li
519.259 484.845 li
519.286 484.669 li
521.423 485.002 li
cp
ef
521.719 482.736 mo
521.7 482.912 li
519.545 482.69 li
519.563 482.514 li
521.719 482.736 li
cp
ef
521.895 480.461 mo
521.885 480.637 li
519.721 480.525 li
519.73 480.341 li
521.895 480.461 li
cp
ef
521.885 475.883 mo
521.895 476.059 li
519.73 476.179 li
519.721 475.994 li
521.885 475.883 li
cp
ef
521.7 473.608 mo
521.719 473.783 li
519.563 474.006 li
519.545 473.83 li
521.7 473.608 li
cp
ef
521.396 471.333 mo
521.423 471.518 li
519.286 471.851 li
519.259 471.675 li
521.396 471.333 li
cp
ef
520.979 469.085 mo
521.016 469.261 li
518.889 469.714 li
518.852 469.539 li
520.979 469.085 li
cp
ef
519.785 464.674 mo
519.842 464.85 li
517.779 465.516 li
517.724 465.349 li
519.785 464.674 li
cp
ef
519.019 462.519 mo
519.083 462.686 li
517.058 463.462 li
516.992 463.296 li
519.019 462.519 li
cp
ef
518.13 460.41 mo
518.204 460.577 li
516.225 461.455 li
516.151 461.289 li
518.13 460.41 li
cp
ef
517.15 458.348 mo
517.224 458.505 li
515.291 459.495 li
515.217 459.328 li
517.15 458.348 li
cp
ef
514.847 454.39 mo
514.949 454.538 li
513.127 455.722 li
513.034 455.573 li
514.847 454.39 li
cp
ef
513.552 452.512 mo
513.654 452.651 li
511.906 453.927 li
511.795 453.788 li
513.552 452.512 li
cp
ef
512.156 450.699 mo
512.267 450.838 li
510.584 452.197 li
510.473 452.06 li
512.156 450.699 li
cp
ef
510.667 448.961 mo
510.787 449.09 li
509.178 450.542 li
509.058 450.412 li
510.667 448.961 li
cp
ef
509.085 447.306 mo
509.215 447.435 li
507.68 448.97 li
507.56 448.841 li
509.085 447.306 li
cp
ef
507.43 445.733 mo
507.56 445.854 li
506.107 447.463 li
505.978 447.352 li
507.43 445.733 li
cp
ef
505.682 444.253 mo
505.82 444.364 li
504.461 446.048 li
504.322 445.937 li
505.682 444.253 li
cp
ef
503.869 442.866 mo
504.008 442.968 li
502.741 444.725 li
502.593 444.623 li
503.869 442.866 li
cp
ef
501.982 441.571 mo
502.13 441.673 li
500.946 443.485 li
500.799 443.394 li
501.982 441.571 li
cp
ef
498.015 439.296 mo
498.172 439.379 li
497.191 441.313 li
497.034 441.229 li
498.015 439.296 li
cp
ef
495.953 438.315 mo
496.109 438.39 li
495.231 440.369 li
495.064 440.295 li
495.953 438.315 li
cp
ef
493.834 437.446 mo
494.001 437.511 li
493.225 439.537 li
493.058 439.472 li
493.834 437.446 li
cp
ef
491.68 436.688 mo
491.846 436.743 li
491.18 438.806 li
491.005 438.75 li
491.68 436.688 li
cp
ef
487.259 435.514 mo
487.435 435.551 li
486.981 437.668 li
486.806 437.631 li
487.259 435.514 li
cp
ef
485.012 435.097 mo
485.187 435.125 li
484.845 437.271 li
484.669 437.243 li
485.012 435.097 li
cp
ef
482.736 434.801 mo
482.921 434.819 li
482.69 436.983 li
482.515 436.966 li
482.736 434.801 li
cp
ef
480.461 434.626 mo
480.637 434.635 li
480.525 436.809 li
480.341 436.799 li
480.461 434.626 li
cp
ef
449.479 450.107 mo
449.562 450.2 li
449.673 450.126 449.774 450.08 449.858 450.08 cv
449.941 450.08 450.062 450.107 450.228 450.182 cv
452.726 451.291 li
452.809 451.208 li
452.068 449.201 li
453.983 450.043 li
454.075 449.941 li
452.938 447.37 li
452.846 447.139 452.846 446.953 452.966 446.797 cv
452.882 446.704 li
452.197 447.38 li
452.29 447.472 li
452.383 447.38 452.457 447.333 452.513 447.333 cv
452.559 447.323 452.604 447.333 452.633 447.36 cv
452.688 447.416 452.734 447.499 452.79 447.61 cv
453.521 449.247 li
451.801 448.508 li
451.763 448.489 451.727 448.461 451.698 448.434 cv
451.643 448.378 451.615 448.322 451.615 448.268 cv
451.624 448.184 451.68 448.082 451.791 447.972 cv
451.698 447.888 li
450.682 448.905 li
450.773 448.988 li
450.866 448.896 450.949 448.85 451.005 448.841 cv
451.098 448.813 451.217 448.831 451.347 448.887 cv
451.781 449.071 li
452.327 450.552 li
450.626 449.774 li
450.533 449.737 450.459 449.691 450.404 449.646 cv
450.367 449.599 450.339 449.553 450.348 449.507 cv
450.348 449.451 450.385 449.386 450.459 449.294 cv
450.376 449.211 li
449.479 450.107 li
449.479 450.107 li
cp
448.212 452.151 mo
448.156 451.605 448.249 451.208 448.479 450.986 cv
448.591 450.866 448.721 450.792 448.868 450.773 cv
449.007 450.746 449.174 450.773 449.358 450.856 cv
449.488 450.921 449.646 451.041 449.84 451.235 cv
450.765 452.16 li
450.903 452.3 451.005 452.373 451.069 452.401 cv
451.125 452.429 451.19 452.429 451.245 452.41 cv
451.31 452.393 451.384 452.337 451.486 452.234 cv
451.578 452.318 li
450.515 453.382 li
450.423 453.299 li
450.469 453.252 li
450.569 453.15 450.626 453.066 450.635 452.993 cv
450.644 452.928 450.626 452.854 450.579 452.78 cv
450.569 452.752 450.496 452.669 450.376 452.549 cv
449.488 451.661 li
449.294 451.467 449.118 451.347 448.979 451.31 cv
448.841 451.272 448.711 451.31 448.591 451.43 cv
448.406 451.615 448.322 451.901 448.351 452.29 cv
449.488 453.437 li
449.636 453.585 449.729 453.659 449.784 453.678 cv
449.849 453.705 449.913 453.705 449.979 453.687 cv
450.033 453.668 450.117 453.604 450.237 453.483 cv
450.33 453.566 li
449.257 454.64 li
449.174 454.556 li
449.22 454.501 li
449.331 454.398 449.377 454.297 449.358 454.205 cv
449.34 454.103 449.257 453.982 449.1 453.825 cv
448.305 453.03 li
448.045 452.771 447.879 452.614 447.814 452.577 cv
447.74 452.531 447.685 452.503 447.639 452.512 cv
447.602 452.512 447.555 452.54 447.518 452.577 cv
447.472 452.623 447.426 452.688 447.389 452.771 cv
447.269 452.716 li
447.657 451.8 li
447.759 451.708 li
448.212 452.151 li
448.212 452.151 li
cp
ef
505.866 504.904 mo
505.7 504.71 505.626 504.507 505.626 504.304 cv
505.626 504.101 505.69 503.934 505.82 503.804 cv
505.903 503.721 506.015 503.666 506.145 503.638 cv
506.265 503.61 506.394 503.619 506.523 503.666 cv
506.607 503.702 506.718 503.786 506.865 503.915 cv
505.866 504.904 li
505.866 504.904 li
cp
505.996 505.044 mo
507.485 503.555 li
507.217 503.286 506.931 503.156 506.616 503.147 cv
506.301 503.147 506.024 503.269 505.783 503.509 cv
505.497 503.795 505.367 504.128 505.386 504.525 cv
505.404 504.914 505.59 505.302 505.959 505.663 cv
506.301 506.005 506.662 506.181 507.051 506.199 cv
507.43 506.218 507.753 506.098 508.013 505.839 cv
508.253 505.607 508.364 505.321 508.346 504.979 cv
508.327 504.646 508.226 504.359 508.04 504.109 cv
507.92 504.137 li
508.04 504.396 508.086 504.618 508.059 504.794 cv
508.031 504.979 507.948 505.136 507.809 505.274 cv
507.597 505.487 507.318 505.58 506.985 505.562 cv
506.644 505.533 506.32 505.358 505.996 505.044 cv
505.996 505.044 li
505.996 505.044 li
cp
504.285 505.007 mo
505.016 505.737 li
504.933 505.82 li
504.646 505.645 504.415 505.57 504.239 505.58 cv
504.063 505.589 503.906 505.663 503.758 505.812 cv
503.656 505.922 503.592 506.033 503.583 506.163 cv
503.573 506.283 503.601 506.385 503.675 506.449 cv
503.758 506.541 503.86 506.588 503.971 506.606 cv
504.091 506.625 504.258 506.588 504.471 506.514 cv
504.979 506.338 li
505.46 506.172 505.82 506.218 506.07 506.477 cv
506.265 506.671 506.357 506.902 506.32 507.171 cv
506.292 507.438 506.19 507.661 506.005 507.846 cv
505.876 507.976 505.7 508.104 505.487 508.225 cv
505.423 508.262 505.367 508.299 505.34 508.336 cv
505.303 508.363 505.293 508.419 505.313 508.475 cv
505.238 508.549 li
504.461 507.781 li
504.544 507.707 li
504.804 507.883 505.053 507.966 505.293 507.947 cv
505.524 507.938 505.719 507.854 505.876 507.698 cv
505.978 507.596 506.043 507.476 506.043 507.346 cv
506.052 507.208 506.005 507.097 505.913 507.014 cv
505.812 506.902 505.682 506.847 505.534 506.856 cv
505.377 506.856 505.136 506.911 504.794 507.032 cv
504.461 507.143 504.211 507.189 504.045 507.171 cv
503.888 507.152 503.74 507.078 503.601 506.939 cv
503.425 506.764 503.333 506.551 503.342 506.311 cv
503.342 506.07 503.435 505.857 503.629 505.663 cv
503.712 505.58 503.832 505.497 503.989 505.413 cv
504.101 505.358 504.165 505.312 504.184 505.284 cv
504.211 505.266 504.229 505.238 504.229 505.21 cv
504.229 505.183 504.221 505.145 504.202 505.09 cv
504.285 505.007 li
504.285 505.007 li
cp
ef
506.811 450.875 mo
507.005 450.709 507.208 450.625 507.411 450.635 cv
507.615 450.635 507.781 450.699 507.911 450.829 cv
507.994 450.912 508.05 451.023 508.077 451.144 cv
508.105 451.272 508.096 451.402 508.05 451.532 cv
508.013 451.605 507.93 451.726 507.8 451.864 cv
506.811 450.875 li
506.811 450.875 li
cp
506.672 451.005 mo
508.161 452.493 li
508.429 452.226 508.558 451.938 508.567 451.624 cv
508.567 451.31 508.447 451.032 508.207 450.792 cv
507.93 450.505 507.587 450.376 507.189 450.395 cv
506.801 450.403 506.412 450.598 506.052 450.968 cv
505.71 451.31 505.534 451.67 505.516 452.05 cv
505.497 452.438 505.617 452.762 505.876 453.021 cv
506.116 453.252 506.403 453.362 506.736 453.345 cv
507.069 453.335 507.355 453.233 507.605 453.049 cv
507.587 452.928 li
507.318 453.049 507.097 453.095 506.922 453.066 cv
506.736 453.039 506.579 452.956 506.44 452.809 cv
506.228 452.604 506.135 452.327 506.153 451.984 cv
506.182 451.652 506.357 451.319 506.672 451.005 cv
506.672 451.005 li
506.672 451.005 li
cp
504.961 448.442 mo
505.516 448.396 505.903 448.489 506.135 448.711 cv
506.246 448.831 506.32 448.961 506.348 449.108 cv
506.375 449.247 506.339 449.414 506.255 449.599 cv
506.199 449.729 506.07 449.886 505.876 450.08 cv
504.951 451.005 li
504.821 451.134 504.738 451.235 504.711 451.31 cv
504.692 451.365 504.692 451.421 504.701 451.485 cv
504.721 451.541 504.785 451.624 504.887 451.726 cv
504.794 451.818 li
503.73 450.755 li
503.823 450.662 li
503.869 450.709 li
503.962 450.811 504.045 450.866 504.119 450.875 cv
504.193 450.885 504.267 450.866 504.331 450.819 cv
504.368 450.802 504.442 450.736 504.563 450.616 cv
505.45 449.729 li
505.645 449.534 505.765 449.358 505.803 449.22 cv
505.839 449.081 505.803 448.951 505.682 448.831 cv
505.497 448.646 505.21 448.563 504.821 448.581 cv
503.685 449.729 li
503.536 449.876 503.453 449.969 503.435 450.024 cv
503.416 450.089 503.416 450.153 503.425 450.21 cv
503.443 450.274 503.518 450.357 503.629 450.478 cv
503.545 450.561 li
502.473 449.497 li
502.565 449.404 li
502.611 449.46 li
502.722 449.562 502.824 449.617 502.916 449.599 cv
503.01 449.58 503.139 449.497 503.286 449.34 cv
504.091 448.535 li
504.35 448.276 504.498 448.119 504.544 448.045 cv
504.591 447.98 504.609 447.925 504.609 447.879 cv
504.6 447.833 504.581 447.796 504.535 447.749 cv
504.498 447.712 504.434 447.666 504.35 447.629 cv
504.396 447.509 li
505.313 447.897 li
505.413 447.999 li
504.961 448.442 li
504.961 448.442 li
cp
ef
450.894 504.229 mo
450.802 504.322 li
450.875 504.434 450.922 504.534 450.922 504.618 cv
450.922 504.701 450.894 504.821 450.819 504.979 cv
449.71 507.485 li
449.793 507.568 li
451.801 506.819 li
450.968 508.743 li
451.061 508.835 li
453.631 507.698 li
453.863 507.596 454.057 507.605 454.205 507.726 cv
454.297 507.633 li
453.622 506.958 li
453.529 507.041 li
453.622 507.134 453.668 507.208 453.678 507.264 cv
453.678 507.318 453.668 507.365 453.641 507.393 cv
453.585 507.438 453.502 507.494 453.391 507.55 cv
451.754 508.28 li
452.494 506.561 li
452.513 506.514 452.54 506.477 452.568 506.449 cv
452.623 506.394 452.679 506.366 452.734 506.375 cv
452.817 506.385 452.919 506.44 453.03 506.541 cv
453.123 506.458 li
452.096 505.441 li
452.014 505.524 li
452.105 505.626 452.151 505.7 452.17 505.756 cv
452.188 505.857 452.18 505.969 452.124 506.098 cv
451.93 506.541 li
450.449 507.088 li
451.227 505.376 li
451.264 505.284 451.31 505.21 451.356 505.164 cv
451.402 505.117 451.449 505.099 451.504 505.099 cv
451.551 505.108 451.615 505.145 451.708 505.219 cv
451.791 505.136 li
450.894 504.229 li
450.894 504.229 li
cp
450.589 503.804 mo
449.858 504.534 li
449.784 504.461 li
449.951 504.174 450.033 503.943 450.024 503.767 cv
450.016 503.591 449.932 503.435 449.793 503.286 cv
449.683 503.175 449.571 503.12 449.441 503.111 cv
449.321 503.102 449.22 503.129 449.146 503.203 cv
449.063 503.286 449.007 503.389 448.998 503.499 cv
448.979 503.61 449.017 503.776 449.091 503.999 cv
449.266 504.507 li
449.424 504.979 449.377 505.349 449.127 505.599 cv
448.934 505.793 448.702 505.876 448.434 505.848 cv
448.166 505.82 447.943 505.719 447.759 505.533 cv
447.629 505.404 447.5 505.229 447.38 505.016 cv
447.343 504.942 447.306 504.896 447.269 504.858 cv
447.231 504.831 447.186 504.821 447.13 504.84 cv
447.046 504.757 li
447.823 503.989 li
447.897 504.063 li
447.722 504.332 447.639 504.581 447.657 504.813 cv
447.666 505.053 447.749 505.247 447.897 505.395 cv
448.009 505.506 448.129 505.562 448.258 505.57 cv
448.388 505.57 448.508 505.533 448.591 505.441 cv
448.702 505.33 448.748 505.201 448.748 505.053 cv
448.748 504.904 448.684 504.664 448.572 504.322 cv
448.462 503.979 448.406 503.73 448.434 503.573 cv
448.452 503.416 448.526 503.259 448.665 503.129 cv
448.841 502.953 449.053 502.86 449.294 502.86 cv
449.534 502.86 449.747 502.963 449.941 503.156 cv
450.024 503.24 450.107 503.36 450.19 503.518 cv
450.246 503.619 450.293 503.684 450.311 503.712 cv
450.339 503.739 450.367 503.749 450.395 503.758 cv
450.413 503.758 450.459 503.749 450.515 503.73 cv
450.589 503.804 li
450.589 503.804 li
cp
ef
509.132 447.407 mo
509.132 447.407 li
501.242 439.509 490.33 434.626 478.278 434.626 cv
466.237 434.626 455.323 439.509 447.426 447.407 cv
439.537 455.305 434.653 466.209 434.653 478.26 cv
434.653 490.311 439.537 501.215 447.426 509.112 cv
455.323 517.011 466.237 521.895 478.278 521.895 cv
490.33 521.895 501.242 517.011 509.132 509.112 cv
517.029 501.215 521.913 490.311 521.913 478.26 cv
521.913 466.209 517.029 455.305 509.132 447.407 cv
cp
478.278 433.701 mo
490.588 433.701 501.724 438.695 509.788 446.75 cv
517.853 454.814 522.838 465.96 522.838 478.26 cv
522.838 490.561 517.853 501.705 509.788 509.77 cv
501.724 517.834 490.588 522.819 478.278 522.819 cv
465.978 522.819 454.843 517.834 446.778 509.77 cv
438.714 501.705 433.729 490.561 433.729 478.26 cv
433.729 465.96 438.714 454.814 446.778 446.75 cv
454.843 438.695 465.978 433.701 478.278 433.701 cv
478.278 433.701 li
cp
ef
502.861 453.687 mo
502.861 453.687 li
496.572 447.397 487.879 443.504 478.278 443.504 cv
468.688 443.504 459.994 447.397 453.705 453.687 cv
447.416 459.976 443.523 468.66 443.523 478.26 cv
443.523 487.859 447.416 496.544 453.705 502.833 cv
459.994 509.131 468.688 513.016 478.278 513.016 cv
487.879 513.016 496.572 509.131 502.861 502.833 cv
509.15 496.544 513.044 487.859 513.044 478.26 cv
513.044 468.66 509.15 459.976 502.861 453.687 cv
cp
478.278 443.301 mo
487.934 443.301 496.674 447.213 502.999 453.539 cv
509.325 459.864 513.247 468.604 513.247 478.26 cv
513.247 487.915 509.325 496.655 502.999 502.98 cv
496.674 509.308 487.934 513.219 478.278 513.219 cv
468.633 513.219 459.893 509.308 453.558 502.98 cv
447.231 496.655 443.319 487.915 443.319 478.26 cv
443.319 468.604 447.231 459.864 453.558 453.539 cv
459.893 447.213 468.633 443.301 478.278 443.301 cv
478.278 443.301 li
cp
ef
516.93 478.168 mo
522.017 478.168 li
522.017 478.315 li
516.93 478.315 li
516.93 478.168 li
cp
ef
460.134 438.223 mo
463.929 460.639 li
466.745 477.263 li
478.296 478.259 li
460.134 438.223 li
cp
.184314 .741176 .788235 rgb
ef
460.134 438.223 mo
474.513 455.837 li
485.167 468.906 li
478.296 478.259 li
460.134 438.223 li
cp
.152941 .619608 .647059 rgb
ef
496.458 518.294 mo
482.091 500.675 li
471.437 487.605 li
478.296 478.259 li
496.458 518.294 li
cp
.886275 .262745 .282353 rgb
ef
496.458 518.294 mo
492.675 495.873 li
489.858 479.248 li
478.296 478.259 li
496.458 518.294 li
cp
.678431 .145098 .184314 rgb
ef
483.156 488.973 mo
489.072 486.288 491.692 479.315 489.009 473.398 cv
486.324 467.481 479.353 464.861 473.436 467.545 cv
483.156 488.973 li
cp
.196078 .207843 .282353 rgb
ef
483.156 488.973 mo
477.239 491.655 470.267 489.035 467.583 483.118 cv
464.898 477.201 467.519 470.229 473.436 467.545 cv
483.156 488.973 li
cp
.313726 .282353 .32549 rgb
ef
481.916 486.238 mo
486.322 484.239 488.274 479.046 486.275 474.639 cv
484.275 470.231 479.082 468.279 474.676 470.278 cv
481.916 486.238 li
cp
.898039 .854902 .788235 rgb
ef
481.916 486.238 mo
477.509 488.237 472.315 486.285 470.315 481.878 cv
468.316 477.472 470.269 472.277 474.676 470.278 cv
481.916 486.238 li
cp
.972549 1 1 rgb
ef
480.824 483.834 mo
483.903 482.437 485.267 478.809 483.87 475.729 cv
482.474 472.65 478.846 471.287 475.767 472.684 cv
480.824 483.834 li
cp
.196078 .207843 .282353 rgb
ef
480.824 483.834 mo
477.746 485.229 474.117 483.866 472.721 480.787 cv
471.324 477.708 472.688 474.08 475.767 472.684 cv
480.824 483.834 li
cp
.313726 .282353 .32549 rgb
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Alireza) ()
%%Title: (Compass_Set.eps)
%%CreationDate: 5/13/2014 10:07 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.lZ+8kOX>C'bH0Tpb`:p)[:]VR>Veb=$`IseC)<%HU,8WTZYMBS\k$:`!nmW2--ju3pc`n_N3"L6qEh0ldq#/P]]'tRILjbs
%s8:s?h=[8\lYfR:rq>[.;#a0u`p:UiIfAs=IeecDh.$UphH[_JDQ`HC]Y1l.gtf)NY&8.GI_AqbE.5LsmJ46aQh/c-\%0)]q<R>,
%lMTWp[Ee;\datC`=.@[.g[4h8.N]*&L9FbU:Ns3ID#g17+2@g"[Xu6Igu$^<e@&6PkC<8nPJ0[-f<G,2huBqVp@@YNpAFp\k5'T-
%!_&0"PGRNI2K-q'LYCCa=0DPs7K%6!Eq@QO];p;CF#B;a+7F]a650CflM#2t\RVaH4*(7;d/W0rRi9*Aqk_41F0Y[>q!;'j'r@NU
%^O1l%]G/H).]3'Kf*ZE!"$jTY+L-NJghbkSS_n@q;gt23QPHJMc_#\iL\j_'9WM.P.SiokT/Ul`rT31F^L$m5c2!jRXmXs6mJU+Q
%s&o)/7KJ&>nEt%4qkrc'qmo#o/$e6N]m6rpWY:i%T3e(0'>+)0YEntDq<bY\qhfJS=7<BQ^KsWerV!jIgU$Jn2S^uDSc&KSk5(,t
%s2ool1,sKB<]U!P\*eu$dqTlBQ-\fnjHU,OG$2.b""dX0,Bi(iMK6JH^&7TpqU[X8n`t\8]mMWriTO@,r8@d=VX@INV;nY`^;&Q1
%gVBB[HMuS.UPGW%I\hJjn[j#"f@T2P=>`>5Krt7J8]C#]Qfn,+^KuU2do?)'Dl]'DmPf@_f:i0O!Io11hbrrf]f'O0GRjhiL4EVu
%OC(dZ=^A&hN++g->L"X_1Q(:AH>8G*Jhj0q9WA%o]bD/2"i]s;Io1$q7^;V)<S)$aZ<j<Mkp_'E4jBDF:JXjGoMd<^TOl2",3`$T
%7904JKN]C7.#*$+08a1E2I#tdPJU[k_5-ReF1:7mb*X"EiYs4u^M$4T9:Ekrn<\4:#CnN^oI=W+,=!tW%=_7;oFs"6,n=6^>1QT;
%$@enPb[)V=_jAbBruA[gPnfF2.#'bA0:J&`PaT^5\oILq@[NqXZn.29`Z4Lbh_7@4"8p]c",+E;L,n7sCo3k`/?Xp3I2X_Wn:jNC
%FYZ?fHPD[_ZaGqKb60eL)4L1KD;2Kj&c7>=R%WCd-HPI-F86\p`*X2l>fRgq?)07TU'rANWuIAZ8Wr2!4p9=DSIK9Aml5PX)*nTk
%,dt1fqD(6;Hg+ZKO+Xp$Z2)N2;9\m'k+r+S?2j*Hje)rmbMLDD8JA$"-`B/"I]68HgZb9TR4[!;%Kt8J%*Y*[l8(?Oae*e3ep?0^
%N6.BLe`S6`iS'BqB5(JJ3]HOMhN_&$rTCll1r%5K)!1Ym0)o\ZPQWhXbJ/%]n+40hRjRqp9s+.]ruE3):\23r4#rGlo=Oq$eR-$)
%d/5Nr?G2Njo=Oo>g-;G*fL,S%rKZjF:#7Tp+4i4fT,s?Zdj`#gH`d:]<Vgnn_%3XDA+kpY:VTa))9%'aeb/C<Hq3kon5%AU[uL:#
%-N6lUs.hR@a02Xq5D'(8O73#p[;eEOp!;g:ro8A*8T!7D?iBRVYlFLTIo76[,?NL3T>?*W/:.?\Ctt(Y?2so[&+&h.qJnRCci5,.
%nW-gu,>[@CnRW(#j\s"mpelp6mE+6%D>rr.[f4;^nB(P>YIO;$TB^3VGPj51ZKdJZn<9&o^[K<T'kGlt!PE5+C3<[@+\@5nW8CsA
%YPu7,qtK(<p$[hIak,ft4b$J]fR8bSD1&>XnUHYf+r-U'N#)8<C9%A_0\g@!rPZ8Ha@L)Np1'9o&;YV_o"pEJYA/ncN,7h?;j<n>
%:2sh*^iX7Qap7Y>);-Y-r8Ymm*q6/g4d]nD4dG]ub%!/6^VqQOhCtT.;54ba*uAYK8"/(YJ*Oi#:F$G[&&sa<T.p-ce`te97>TFh
%6c9n96:WZ^$N+#;b`?u--9:%jpKm!RlP.=ZN*0ZiF]i%RgQ@Tl[J]1/4HrC41,l@gs3TAKlL/e5AhN[Sd8R,t@6io`Trro*:k8J2
%U!2%XJmuTr+NTKH?l'o5hIj3@5]ZX!q_!4[c?hdiPc5\X^'bPRj08r6*=DesnMh\RphR'3Oh2jBJ>CU/itE[)7r[+umoWn@;EF>U
%HrXfW0I,qtbS`0XPH.'k,*X:QO$+!dk5G\j@BllZ*m]eP+!`+Z^kn8cbKK$3$Kg*uAZjKR._=N&8>Ld$OPc!<&8dGsTKV4LI,'!3
%Mub#IhKRhs="4j+nZTu`.tBX#L8TdbVl+eGlUD1U%7BWcGW_%H4nKr8F3)pZaYk5ihB+q$9i%eUO69j&5M)QJ4hSYc&c^JMm*"=D
%/j2ck!=B-u-p36q+#Ncg<.#U8*,%$aJ]7`ps(*eI'FXUWX@&GN#_p:/)')OYf]4*+W6HBU*q+q?:Rq1"hEUMB5CDIf=Xd1)Y*_u0
%2AqdPBcjAX*V-Eu2+cIlJf]nk()ao!9iM*jI9Q1!IF#StPn0"1Qc9S-%C-;Wf\T4,j6=`j*T/BW(ii0RJ0=1k7"MjUikdF=BEj9c
%kPaud%h&i!Z5FG!=b$prl=:T#I]b1tYookAoF%CLn,sr@D?9p$N%3N0j.tYI#QMoa"+2kM5TBb]HmNiPZVs<oP/%e4@Sdn$[A+p=
%B*-!),cep-.Ooh;ik[/]*&gHNK?%:J6G.&",%j'0\0uT0JjNBO:)g/H7KMpckg8sW-`lM"l,qdE2BO?/bA!VO8Cg=@!-M-.S:Vs'
%!oQ>7qtg(fV^*8*gt0S-GG-,U"Q:d2p)^Na8+-9P!re*G5S\Mj">G/ophasW8uKT-@KFCM'ao3lK5-ET+Y'E>&gu\6#<u^Ld.n2Q
%_;!*kQ=/^fWCT+.s+PO?i?^3%Kfm?B][,r<OT[>0W)K=WiJiNMo+MXB1K9*:q[CVRA1E0?90C"HW7C3#UgX^3W$9+K+eg[6cpeVs
%&2E^nI=f9S.XVTnTR\]t#@KhU&\0>V08F&]gqP&D&=^"u+<9$jDa`P$o3IuG^a/!)e3N9V#O=-lKDu'If98K8LcFjp$M8Zu[-k<C
%%jPe9+pjZ\?a:$\YE*7#=P_aJ6[Jb=4Fm%L4Z\Xf$VY>FguWigLN]mP'bIDXKc\GFs/f-EoJE3W&([YU1c8!Bc^aX4ik\,;h'!cR
%XQ@uehdi2d'l]Tr%?ku#kPBCNC1hrq%7hu#.P$A/Kh"H=M_M>`jPXk_%j.;84`Q\=Macg(6VT+B4Z]+)`\jVlM'nO[KG3;\mKLE3
%YoY<!`QKc+BjtQI]YoHmeZ:7CJXu]h5BZ1_<39S]RKpJ=R=ZqDG,!CP98Gpr+!`&'#gf@t-G3TDjb$8LD=/K[T?!E\'J!%*-2[#+
%?,BuK6)jdh-6lBX=/)?W(1W56;sE[@oLOFSidmi@@Fidn,dEMm,"hFI^lbFC?801lGcH_]Zk84&>lLN_k`9p74t%9#rmq\BfZ8br
%7G0#Z#Q`Qk%$"p!%3p28?q/i\ZlHHhItFNGh%-A1\(qf\:s<skj9Rm:jg]tk)G_hC36>)*LX,on#LrQo%!I6f1b!l!de8@P'.Mk=
%5W$8[R)P/qduFVDk=[d;@gXNHKemG_FSl7;bR?g+8YQYG"s7sPpLrAQm<c<m`GDG.%B']9fa@tC=ksYMA6igiE0DhKa3Lo=V?3V)
%bSFcQb)RYAO5BVVs.;J7O'2p8D$BM\?im7g:bs@Fa7JX,Y@fmMMhSL:5c)Wd=poN2*t]#IEp<Fe"V3HVVlAmiW)u$u>sbb*e'!rF
%90UUubL6tOBW%Jk<)^%seR$1EV,')G%m'.ahpmc1.Y854UiNcdh<]l3_h2Z?l@C.=;#j3h9p06XJDpJT0m.r\H%5THLXPNKOWbR*
%/TfAtL(0Ch&dpr0B&`l:S5b[5lNr4J.h'>.Goo3Er_S"M%Z:EsD?Plt87@BUFq1aI)JgFM"W\[-Rh->`;R9KJAhr&0MuM'/5'ZQ=
%Z#g4PhFr_t'^/F.c\P8mfhR&,%O[qiX%7&CTQ_aU(5/\+O:IXuoUb7E$$,QEb.pBq"-ROJ$)>%p-n[B6?e.T`K.7@^-.7o4gC;\>
%W[+<!R+7,ekrbX].N1L&2KN]f*+L2m"MHn_!LKS(%coZ+cG\A/fEf^UhFF-X8l.?jNh,)k#QMHso,]8sFtG0JN,%o-_rk),a*jK*
%qK-n`)j?ZfB:n%KpftYn4irCc^oT#A/\171=@>L]\J/@G_Q45<9_WF\617Kp[SZIbK7E[KI-?EfT>8HRbb<+u)KL)(5m6[7em_D"
%5W<oTrd*.kqEW!nZPYmT1\/nmI(WfuN]5>\(Pmojk-$>uC4>&?&^4GBk8<;da3eD#pDEgT9%;14IpiqkI/l#uIjaQhe%_Y!bgH:q
%7Hfr6"9&+XYj\\T(ucN_::J["=su2'lo3[T:J]MtC_i0t6JXjEK)As<r;[&7O$rqQjJ$)!.+TUX'p"i?cl!',WKc%X#s<)k"A]p>
%51!L..JNef:NcXg!*Nudd^^ou/C@"*hb=qSV2#,55LI46<<)G$^M>D`n:#c=KqV8b[9-O+B",#N`@[seW<AH:b'Wg\f_aQ!4P5(u
%RRUK4?XCU!+;IuqKV80C!jt!T_hV2Th7c*SjRE?EM9#jIJ_VZSYe7[Ai!h$<(=HA?4\Zn;mesh($D7%14]5f'o[pk0AiO6N;?N%M
%976Z'b,6<Y-U)O2^OqK6"/8@fJf8Z&7m`?W.f[o7lFdE%M,2p5X!;G716l"=-GA@1nmV+^A+;NaO&%!^5P4pTItpcZmt^=\qtssu
%rfAu,pKdU@Zb#PH-da8)fNS+(o`!=m\0&Jsrr!(`Ms%hSrHeK8D;:1WrNePhs7kH#3ZIhR=9!XXlp&5YT@CmZpsjM$5(`t7O73#p
%[;eEOp%m;2a6pXe#PPtXO1][=GPWKOVEmFK`,'%@h](93?*q;CoiPQ7hGIQCI`T-#T0^@UP`t:FCA$a(4*c,<kVLt=]g.UEIIM;b
%>5e)i5@3N\438j':Y,43bkG<>3CUt#OhF:][<tL5iUBXhGt3#7L2K/WTDLe_rfNr:`4ocBHS>)Apo!;fi6kf\J`FKUGXqF^MG.:L
%7phY\'1MV%FW66L6m14)`t*HF+^%ild/.XS%K>$BIBp#2a"-.o_)d&COE[+>#NE=U])E5QT>%TI2pT-$>'6ithqJ7WrB7XW5kQl'
%";O'kqsUsH45U5)+/sS_d^aKaNaj&)`\aPLeG!I(Y2-EBY/G?C%V(fkCnLVXK0NI\*$75=\kCmQCgiYP%[T5J4Jq`/OqZH<1N),1
%T(MG5>l.@4bfTE\g4>e\#PZhVFUdnXqWHd@bJSC]l13U9c54_=k]]bbf!IJAp5U])1GR>$iT3+]-bTbBQ+VBS!%W$XY4Xb=5\]OL
%`Pli$&HiVU@ir#FLN\(FLk^25c2:4LK.)AdFn1ZIVgS4Y@cKrEG'PrW8c-s(K(8uiHJtV>e+.2,^5id<B"9G=I%b6AebXMR#DL;9
%-!uZSg$ua#N)4qFW*-b('s>ieCo_R68AAP#CF.3dQ*':jG>H$pef(Ot:RmX>6HB\-pUZ$Qh@48p#<XYgLnbWGIY(&L+P!)rai+er
%f<6_,QZJLL3cgoc!5Sd#I#!iI:mY6h\./QUO:l*P!+cIa&$e"&k;s+K^j]dsk?B1=Td"bp=u$uIc?kD/Z/G?$$Q2'pH4:&!XuO08
%9e:R;Fuf"FJRnMa3p;'k;^FsCY?ot#+UXb60IEd3bI2\(1"1D\O!fkTOa%s.S@1BU(%t*E]HA!uc7N6Hi<*AY,^4qcK3UgiI?'q6
%Hi>GB#"e-$qagR=(:Q3TSYR$eV`S6\GF>l^m:+O`+0Z3aaLl0P[i70%(?NNZ.4MFop3qd2Mi4X<"7g^aWe#4**U_V+-iR58e#Rno
%4k/HBK-tZ(1)/fke*oJSBNjIH6Bu>_,4QQ1G*N7AnFq1e-d+0\5j4P?!,P*Vr\h8kX/p)?$3.oU]grQ*CQ`,Cknr)E?J*dp9?JGu
%eEa\GTI17kFr]?nd>;]*WPN8E"_+rsN%'K<0.>lM:2ooRH%*T_bH]n9Bf,R/:+"Ca`JYKK8P8\)7rQX\1l]NrTAn_@7aeeqf9O6+
%:-QgOXL#05L@[&M5'IL^P3Ar/+Q&$pEoVn;de\?!ha-9[kd0a[kL:jgYQuo,1cMkd4s0kUgDo5C3;8V*P.0B=_TW+L\]"nZqaSac
%&G8=1%n_1`fa^d3"`;p8A2^[3k;[WA\0E%GBg#3RB#Yc@A\JQu&Uqc!>KC:]V8W1bq73-&E[DdI4Q1m^pQgP'>+SSikH#-7FsUd7
%Y+j=h[67pm:50iNU-_Nsbn!BZIRg>0e;Fj8F.g;8pe9k:V"@(teTm7o.qb1toteMt)=G+$*S+6]DE[4;Ne7!r9(rm`a4r2>*rBir
%m2?eN$M&N(5u.H-MZK1UftLP']=fkWO0i^630.C7"?L+\#7_f3`VRjEV7W>F6aO";2TAo`&!EWkcRg=k/%gq;l7:%dW-#b6)!PCM
%hne>!1naBLMFtCalGD>L&T$B>4nGj&*EHFLrKlOE_Rtr,Q2bB/Zn<_g.L;6<D;&96BFMpBo,Wj0_Q."FS!:ZDEqlJ9-al[ci,qLb
%jk^iDg#Mk=ER<>`C&6Vj&C1-1)gU+K^9Jj)>X_2"*(9]l>5EX0QhMZb</-T_\>L_UgXN%'#ZGM?EldY8J&gl7Fk$\&;*:474[8XD
%K5R%-1gFAam.`\$Xq"WaTFgh>\2tH[Mb;>uVb'l4<@Y8R4h@$a(pU7@:GfJ$&[`N13gG5pGXhG%pU(TJ>ug%0Jh0J%35k>E",.Ag
%j*@[Pd2Buk\6;$S3a\a+R%2,6U(5p6rOp\+Irub(Lb&^/-.I)LaSleequ[pGYX$\"]W/#O4M<:n11MbX8>mX%TgS\o*LIR\Dkqoh
%ICj3#HccU3P\YE>X\n=NJch8T/-UQq))P+H:JsC$Q(j=L@o>,E[Q%hBdIBCIPiFd%i0]R2_)(Y$[@qK!>6e"*7(j=9NGT?'-(K*Z
%!pC)2?8>R(c%0B$1@k[uq1A-q#s*;e1E7/36irIiG[%BNGI!fHAl.3eLrl!q8WD'e6H6lSY`JuU!M<tLmBgGddcMq^#o5jk>fm(*
%pEg6c[F&)>$11>n3OUJ3VG5-g)eeBf'*HCX=YuK?fn-j3a&kOSH!^.-mmMI<Bf_iQkgq>6.eg2'%^u4Fp4WJ[ctCN&%=L>9^GE+?
%QcVMeD=)25ocVh:)j@]5!\Z)QFI"'D(&d3lN8'LV*[!)8$7CQseg%F`2$;0r\Qu$0Fq5M;=D5!/1&\c,Ojd`1^U)OK<c6*i\.upi
%`A8C&S!9c(<UpmJOg[Xr"-jO\fM(Ol^.BcUnPp1I9Z?>k)fkAg4?>#LKaBn^Vu9qSp*bWi:pr1a/p7(.Q;,Q&/G2KH45?9hoiUP&
%W/aqk[+SCMZ#0)a*hOMJBfkrh^Z]b5M-`eQa3!AmH*Q[WHCUF2((uk*W1LR#FaRoPUF(+SdC5l#F4JIqW_l`h,t$[*G=J%<]<CEo
%G4MaIdreG4qn7h3D=3T;HIJ&"pX["&FtpI;f@\:M#MEhcS1f0dik3T"`-0%YNo_Q'"sV=Ca`dQ1:rO6/]iaUt,feK;8/Lk,>Xq0!
%<*nt&fFHR$2.L0HbL`ofcP@bK%ic,WAbOCBWJCdeDR<?iBDMD#"i*po!TUlG@n6,2BW;DAp+31m9D'`Wf>;q!LN_FNS#/QrVMKk(
%2V'8m[H#AXjTfVqp8e_2#rgO4kLZr"]DRaTmZ8+,FrQ?Q%GRWujJigYCdaaRk<n+9KD'Uq"0pm.kC&Z[FMJ-*HE#dTq0Uk91VKar
%W>FL*AHHOC^%u/]\GOtg4/*dPZ!")"16""/6ao&f<Tl`@.o1B\c8<^]0V8q9/tX2bH?.)%hd5/[Yfd#t:VH3e*`)Ea:[YGOc7"'#
%9oesYVrlja4&a6ARs4"F5OM+pq3^>\3&5`*WY54nq'#4NY!0VdNsiXC.p?/(cGX6/qZm%=l>muMit^<SQ02_/p!\0&UO;ogID0@0
%l>JfLrM+L:bgH2Vi5E?Xrm88^Eb!P-T$BRcC#;"3q[U#>2u7UNlJe.U`:LQ&lasA;Ns/9@kuR6_m&hGm$+IK67m+tGrp]f?3m`3_
%qXGa7%dV"Bo_3]^:C$^s%f>%U:H?cdi4X3)[lB^M*NJ`SLYW]%htLEV+69]QGrH-,6UdRP=*jMW4h6Q-=QK@lmjd7Tb<@Ral&cYR
%fXnE6%m"]+*7tVrq5`g?0@0+5p#Gm\]A6`Lhr3nCk1e)F05kd3DSFY.k:cc#X3LUT[nmcfPJ/C%legOJ$CBB=Qe/Xpn)UtBlS#Hu
%eK=hQp?(2chctYPoAXCi*5B%0]ign4S_n<co'7r0?gqiZrs%p^kEg+:nO3>BRr<1^[rVWQI<GMek3D)Gf5QA4?b]bBg\L6kk;<2"
%ebSn6m>=-8[a-S@YJ6UZ):#A1Y\,i*\\3@%\[Z8uQJ(N^OTO?7cfs_%CXJX+bQ$A1=oJ?mJ(--ZM;N-q^YQ!jG^Fm:[g:lpY28!j
%hk&GO8"781SfI_)rHG<+X3L=,]/F'm]!EFZI*O.TqI09tk3DMTgD]E%mIR[8pAFo=F*ml_CDl:%]=[N4J%W>&Rb(RIkYF"kgtk\p
%c_cn,peV4ga3V6bp%d.gjgV_^Dnios37RqYhciS]e9r)J?#\=)osjq!FgbZ;F6^f-kgc0GH8H_:'T\RUlEBCF(Z/5Mp%nC[p2]cC
%=iC#_F*[_]%eQfGQhQtp^M^JuDr+L*q:0]PDZN>Le#qceDYgrMLn4eJns<--LC^@_jL:#4?eta$[Agh(=9%mgk-*D7[eb-;c+d?*
%E;o:jrdXrWorHu@D`=_HWb&oUgqLJUZpM[qp\6!53WAd9F$T_$ru@#4n8:*'jg!kqnAF1tY91pFEn"iR5"5]ghgWAMs%u#Z7tpna
%jbD<(=9&97LXhk1ouGc;qfl%p+ro[9?i4a5X#a.+i3_cIFH_#sFhTuQg/JcJBmfaQq;_J6hu?O=PO;f7>h;um,l[_6=LmN(07NWV
%7=C`NUM5.jh^4oE7Md#M5@l;7JN2Tmq,-njRejc-?5qXQ51G2pqW5u@4%MXe(Oc64!s!9/p$r1-F+4"=!ri,PZesTOff\cq5Hhfr
%g\0pD(AMH(Z+$('hq`3#qtqfW5/+]ns1:2\M0eF/?$pjAp#^F=Xeks\=21_-eUGN1q]A'bq"#=%ch6,Ghk/f_rGt,l?e$4#^Km0(
%rqu%e.uYS<*[l8=:UZS<dG-=groBF2qW<+qS5m/3\bOA1c*N_XMZ2(;0u;J,OjjEDk=i2@9N='$a4WRbU4)Q-M%h&H..6UoH/;G(
%T"i"n4R6N?B;bdgL]F/g;)OK*m>jdR5)WRX+6i[qpWoHXb.\[hs/7@Blaq5Z>Mu4J*'PHCruU@#%d7sQci7-<q<j`eIfA^4F#YLj
%=-ja'kE,3jk1-[7YW9IEAB',4Huo>DZaO+3IMSaV3A^PMF8>3IcQXpBk[uWZMT$r%2il5Mp!%pHb\*D`mXK_58[HDmk."d_Z^C.L
%j?ES4XQf]QPF9bSSk!0Q,N42QnZ/.'[hkMI(nWu&l(Kl?cXImKc2II-.TUtL_3C!%bl@W2D'R@nZECQ6GPPo3)S3M03W@:f];mHg
%\GY[Tp9#I7qPt4fW?HZP%f)IGb;Wf.!AsK"hsT[i+"7W0Zma\-+H/djDm!JQ^#%PIhVN/<2RhR^<]AoSDVr<;F>oi)<[2fGcEH[i
%=6EYOkBB]YI;sE*G'.d,1&5aggWd3MU/+e"H$=a\H+dA:h;@)eATMN1LJ$HBrmk-Jhg`7`F89^cqSVI`k3AMks4[%q#2H5H]BJ1*
%Rnh`8&o2L%lBLQsH5@KlI!bkTc0kA8kBDF/S`/DZS,;#^FnKQgUX?h8D_I.c():q2F*0PhfC<c[a7&G7<e!*D]ALEm[D+b6p%J<#
%S]KXKp>$I#S3*V]7F#i??f.C2^8Y=XF^sgN*2_'ifa=k-YJ3<:qeGOLV\IR3D67(!Am:M\URrS[l;t1PA+jHdDf7T%:d6sppM"jn
%Di\FHAI!L'=jcI2IT%3Ad$A2-Q.jVQ]>*1WIFgB3$f<,ciuS'ZqW?cj'pIr'l.KIt0J&[mrO_s9[DW_!4Lm0E.f-=+rU'FRh:qNn
%2_TWYKeD7^"T$G-nVP0_d`BBLl^=M`k5=o6e`H`?o-C`srI]9:If8Xqph.@SH.uplc6HYcm9@m/Qf$96]6\mSFae`n;qef@(H8gA
%2K''Fe((XNGB:Os]j(?:cG/97p>+9tAYi#>\j2$"*mP]qh(_H+\+<lKO$^T_.eM8D1i#tTO#+&0:SehPS-6V'nuIBf=s=_S4l2Nk
%g$S,DMoZZ_29S_/qN%,t7hrXT6?`4Y/]Fm<YHFHFG5%?H\$,+()]>2<pKiIeP:GF<]D9G+_n4aSM;E)'OkXN/nU(Qp*Zg!"lj*+-
%mARf.p-3G$_[!`hinEABma!A?)[cT,jZ\!Ueb.22Q<0F)A>V;0QYj""k'"\Da#Miq3j6B-f?1N$Yi+76=_1_Z8AC<YN7H&0O=hrW
%'`XNSo/E#/#7+9@P.=6'(5,IuSH4r5[mr$5S\84QiVL@ck:X^D'J0i=^Bda*d8eh7oo\oQ/t!E'mkp;DcWIOb3U^nDhB%LoqiRY,
%6>sdSC7M9kUlKE'?uH2dbCdbL(54DJDSE+AHaA%s_s6?#'mX_IEVP?aAga8_LK_IF*Q>pm(5"TR4=ip=qBY0)%VrhUX4sCdeLqsa
%e*WX"S(hkB*Zqm-1?5na*\;JYEIP<0XZ]hVqo=H;;K&`kIWtukUsR*Rh4mVH$f+kjUZZgt)#*Fk01U6UZ9M?fMK->JGIZ#=mEOBU
%`r40TrR%+8jmF*>FSG4rh(I)^FEVkM<OpRg4L#ZII>K3FfU2,fXuG706hbr?eA]]*4^G4O'tSGD1?\E/`+>k)h08%IV/A>ZmU.c*
%FP!"o4n@8BqqKl#f=PSb:a'M:O,Uf=\9WF@o2LRYa&[^:hRn1VA(djV`0mc;6=#Uqf,'J\#F7Ec^2@-7,K66"`>@:#ML=rlUT]\Y
%s0d2Yq+m:.hQ6_.(LR-qn%\d-^K>pQ+.-&Fi9fpV2j`oBq89mF!G-=4gHGB=V1[#nR;kU^ZfJoK:#Fc6))%Zte7?),m@q+VlSddc
%Z>\W.IBK`F5DlpgSnqE8AM/9'"BAKBM/_!;"2;<q?HN(6QQG+a;Y7D-<KHWL.4hpoVn(m52rED-*Z_<Nak^tBV<p42]?>,rHRm&Y
%ghLm*CUKBjg*TJdkk\u/o=NV@pY5;[8.*L3U"]\Gr'@bsWGIhjmU>j8Cq(nIK_qe?>l<]g_W9^<"4*SX5qVn,-'R6Bh#=2h5oqFD
%<FXA0"6)Zgjjj1]B?1ron1i%8%!H\$\+&D_8N8G#;R`9ZPc\/4IsF9Ir/jb[Yo[KB@>8I1,PE-!//6@PWkpo!m^<KTHr@h37HX:=
%mG4Q#^'Q@`4?ZCb(8YY9nVk>o9<n2iiX9L`+"Y/i^\u@3cH)VT\ta7@([afmN8fbX*u)1"'7G)6H$OINK!16+A<@,ShL9NerTK*9
%"L\IW\U+BHWc5AVh[uA,L`I+0DYGOmouKKh^O6k0K:jMIm!di@FL\!rlQ:$YIY75TbLL#MBh9EWMO#G\WBu)YpW,$;_hd":@f+'<
%A9KSNF8t'.@=2u/SRX2-gN7`\>ac+o?XE_KF7nYWp7'=GSg.k!Ab4Gpj$`op5TT<fW-8;fEHQ!aY0u#!&"?d[a`\T>NH_#CC+T.0
%==!sn?GH9g(]X'oZ?#!Ul-8V<$rXiBSR']::]Z@20`L^6Q`FJs[-#uJk1=ZK=g%jf5;g=o`r@o*\J\BGkJ-"0_@F"-IYKeocK+#9
%%thR[%pr:prGU"!OH&78p\6_jlAK#Nrqp[fIeLtD.%uk$QU=@3l^</Aj9nWST3JSp*h7`Bi6Jp\FRJ?J<rCl&s3e%7-7?Q#!T/[@
%b:L>IceMZhIVKT6]86n#Q0F$s1>^aLd84'VSf^I0U=1gpOrZcOBo%'_i>G]**3U1rVJJ?<W7@qrX16W,e=XL$n[!EV=R@\9&Ru,e
%/5uKYa6WmN0b2Z_gB;Y8_haq4I>`XNabRHf(oEq&UQff%B?20SDC?>jaR3`/P/>YSMQRpn;uJF1GEcA)*Ft$t6VM'6n`"0j(fSDI
%Yn#;f8hM-<W[5.B#f'WG%uike3#q$Zgka)5'ZuXpWtJ%@LCd(D%k`f)ca0V_T43(jFrpWu5DFH0/r`@b\8HUKUmkZm[ct2s5%oCp
%lHTNVF7@"A3/p92R*h"$R0;,6NoL+AM.tm;f9N>>DOP9EeY*t.mmh8)/4X3mP6,OoFlhm2#Ib&s+&1-W*CQbB1!Ko]0cg)$P-(Q_
%imF".Zt^TgA/scHp7nj/*9nk[M_HI4Cmeg+,PT;4nJn&eI6.dY=D\Oc*08,'`d&%MUmj^Rg)R2f&"CGm:4<&N/#dE1$*.0T)JU4]
%m0p([X!K9I3@Z=8!qJ0mJbUu5P'eYt2Q'B6%7$Kh5fR%A+[0LhjB@*GL[DU5MFjfW;7_ZQ65`iZY"3b#a`m2WB>[^3%,`t^MY&27
%'jrR9aU;X\9/Arf=WL`e`u0+J^`cls;V)qKooohpWlP644`4#L&aHGW%!NENKJ7Y:E&l+sL:Wbd<;`2Z9[2aHU04>\<uDBsPu^J]
%lt)H&E"`9FFN]9&6-jJcf!56O]8;rpL6>%nP,h9l:EY'o,,Bl;A"6H9PY/FEjGn9B)aGbNdl>j?;k<b%:q+l1J72DJV%\QE8iH#)
%VhuLkc4]GEn[nKk#cu)OC/alVq`:tX_$01,rIA.<K]J!t1(8!"M_jirJTUu"*9n/.h<^s9kQcg#70YZ\BVU@eCL(B*\\_6Yi*bk7
%9sFqR?A2EUJABR"4a4XGEgt_Z'EmF\d`peT^u`sU'Imu+jsFma+@GjS,:,oM<tkm4*Nb<1R%0o!^cC!EnkfuQj6Tjg-tcop70d2/
%3@&<eEa8H5+JtgQ4:E&m`L(@11P?K_DS96iMnkCV.3-aOn+>gtR!$<H+,ZXF*I9jt;p+\?\MP&OWaqh36.E!j;UT$Z*#Ojr=]=fR
%5B\RGl:qk"^H!<fH[$_,"?;D6n7C;)%[MhtA'Mn*$*!Po)C#9DQ0;8WTWAc=_?C#>^sUc:;D*WUU&Mtf/KfTK0smIjBa-&5eaqu#
%\k2W<m>p0V3.-u?$,fQLD=rj60:fZ_Jm'=mRq,oLKG,M-@8eD\Z<"%.6.T38!?L;IBkTWO0fT49AY][4*(gN+'e"[_2(VnqjU'DX
%Q.%+0T-?iu/NT_;KP?NXQH%p/X?imLO(\FLa?qFK)gGC5M+U+IOq@+,Vscrdj%*'MNa.H>YJc$='6\1+.LR^185+/+PRc;t+N5<Q
%Z2tX`:JbW>.2>0!08tQlbI*pb37\7-6GuNnZPAYh!?=Cb.lL(_6n5!i,s(8tXQ='PR0#/[^&gq.HBGJN_Y1>-g03u$dONW\@nKaI
%:GU)pl:"7fZ940=2TQ$,5NTF"JO&ER2f@2s;oq'/7?S(QZOJ"4'Im233Oq+[_7.6P4lh1Z0TbWW9T#dB/OmrUJN6B.ls5\D"iQm$
%=Wrm@3;gp$gn9G$DART,cV>WOS4`EoM@H6/VNat[.*@]pm8T4AKUptE3^Z+[YbJWEGSOAS=tSo=:G?@7Go7_)l&9ba,/iNt's.^h
%+?aBGDo*7_#)%()_%p>s'$RL,!cg/kH?caV\e!O!d*&Zr,XOmB#onR_.\"AuYB".78@EFNEWC3LU.F*HaDekf?*</icbnfn6NP+?
%P==bV'<-G\LMITd,s.V=S4]:nas&'6!2:DW.O+Q]H5u4!"U`''6NBYkctX\AK.'#9Oo;[s\TSX<["OtM-)CHor[J(bZ;6Dr%HrB_
%7EcW[R$AkqoFduca<;C1(UB"An/R'F=%jc*A2Ndg$6E<$\r+M$@ibbTI%H9aHS42@orCF7W(ZK_%^YRM6pSQQN.UV?W!jCR7B*=!
%ciNK,9Zd(9*,neUA`M8b\>>=.:^9Rcnfb&I^ad`m;J[%r3sam>MP(\NDP6YP[rDNT)eT_m+Ls&Rb*]".1!&Lt9nfeooe9k_RD?!O
%,*;CG@C2#mYUUG$=PP#<;))=EY<*up)(;d0UhrNib@4K3noO\Y9M+N/Xu)89q'r12::,n#d0(%I[#-S<(a=X25^@L;*b;(a1lCp1
%=fpj"Qf*ODQ[q:e"UN+h/$[0Kj[=A$]N2L77SllKaE`NE^JT[<Xr)t`(6bLt+k_os]Z7%%R;uHL0I6icMULF2P_t/.X=0D>=fNqj
%NcoO9Qt0c[8;n;H88GJ2+BF#WXC^ZGF\Ouc"B27/!DrU$TLoJg=[I-M]ZC3^%)O_fclfl6>@&GQat_)b'TG0%O@=hoVBht9.NGa^
%XpT9(:tNYRH6q-bAO_J^e-@+/F%IN_!\srk5qI@""B*3BXU()dqGO"f5DjIg81j'pOHS'pZ(e737b.E%6qUIFFRn`Ga1n@++/I/m
%pX4Yom(op5UgXre(pZuC8qod=)e5,3<q.AS0Q%/UcICkg#cn]'V<!M\apOo6Yc<).'o=]?<qOKA:/.qnnS"d2'O+2p+LZ?;&0%kK
%;0F6^#D"uaRfWLGLhu,qhJ/,#e-$"(EtkWZcpH/tacg\Qb.bNNr5QnFG0",fU7ak^)eIj*$K;=_P?J0p:_T7)ZsBWBD'k*R'Q-pY
%+Q!0F0U?98YZ4/[&0jt%og*>PPAb%5n%AAV9d5=CJPlfNFKCmg3m8Ghb^60@iUJTq,VG]5Zg_eb6mD8iYt;$l<hsoVjc5O,:9mL'
%+c,*1(0$PQ@D\`nV+adc/uCs_EeL4hk7ZO2V^<'Xo^`,(<2?X:\Em6'K+&ks?H&2'%5SMU#T6;>\1FI)Obn$+--.rdR$FVnn>N>u
%0T+XJL(K[_lBn]F!r]W4Zm.,i]a_QQQ&rIicm>VUOEbduWb1H"Y@bGA6C9?_:K!=@,H`E<)PY.5(a?%sKEP55?rW=fDGj']QQkV6
%#uXgFOPC8lHHu$\[ULqkAZ=nL-m-I1\lE#c>u>7h<JR3:r]3_UVs'qO_.gm.@A(QL.*W*sXUm79oK5ig,0JtX:TF3VN,GO+3\is?
%0i(4sLYT;cBI`'I\IcUuA8Sne'EJLH_F)@'$)$QCNG_8BksQD$4JFQ4FML`r_l1Si;&9p-E#E1$WlQ^?`)Oc*bb7r3SE+@0US+jB
%-fJM<2?HmfAU290aqBl;\8(t"TLs=6q*='Bp1J\s:qi7d=DW:`LQL&hQm21HQVf4B=dCA?D34E)X;Vfk'"_7<cN^(_;c8.i3s^o:
%d%>I\W$$'P8^G50^%<gi.(fjXGZ$/>13?)T(9T+'2Kf!bMYW!n=Wt[j=r@cF^>jLkh!A:d(NG[I\u&&0SFp-PHsf\eK`Y-m-M-.&
%J_624G"#S1f;`M`bRfFM2.^Ub\_GZ[/uZ/](dB-#LTrW)MP&W,9J&5W%!B)\a`Uqs$"Mcl5`uc^8RSRN%U^Te6&L6]"6,*'$1VC[
%J5kZLofR,deWY#Q8sW@m6?,8<,sd2L9*>CA9^>Pq+UlO0G^<4,O9$CB5_^7j#Wt)r4Y)/"^afGsP!WLl;WfG.88A3a0EGSN6],1g
%)dnnr=jn`"8/:Zk==fhg&#jBZ=@E5lcTlcZG(;@;eir?!oA)*NI'GYHNIqB<FR7K=6gIVbjQC4rK_=V%Kc&El<rsr#`NCiEg1d0n
%/.*8i<3/E#[OlKMShjJ.1"`q"J7qU*D`RY[6u`:7!pS2Zl3pNN"@\\tWI?O=7j)oH5glh$-:l5,4&/F>jTKWn!tKtWa-Q#GX#SKO
%08YDH[I^UN>`MBZKeE[m:rhG;&EF:@]<)Ln!Q<&>.4/g6RMU('ZD:<N5`#rn\af`TZC3]W!%1-r/Q;_Z[0fN&/.?^1J41(I#_Y@V
%QPlb!cUBQ*!Fnq3$ri`$$rha"aZ[\%#nKdgNHJ"%"=Zn53I$soLU\+ubRB\8V"$(aSY6e73<L9<K6.s1%S)?HG(p>4VJ*\9MFlD^
%JjTa*^/UD[jE1EK+=[,\.6OT.mh#bZq7OeYWpg2pA2j-15SZ]sSY;DADbD;_;8oAp'K]j1.`BDpY,R2"2HiOTHM)p7];*eF[tb;n
%@XnLr-icp3<-d5dSp$fi$8`@q(L$ubj;'4K>S-"ZB7#3m'isup3KZqj_;nneR/dp?E<^U!!]k'eh8(+GA.(QTa\[ZE!E&8aV2mq-
%25V]>\BF#fqc.qC!On0-Mi3uGia2j8(iB?\)&0&:+q,E@:`KZbpqh:i3",ka@f_[;RK_\5>,p$g7KEqeO0]lqKL)%K+Dh+A@'BrV
%Q"G^UNWKj4i)OK<AX67-+O!'#jK&?+:&sbh)K-2<_[5J&[:5MjO*sYu`7njY'mGOZrOAj/2(E[tYm9ASM^cLk1<",SlC!9,e?,")
%*g]M<`.HgI4D`:tp:Cu+m*[Ir26bQ("D4[(o1X`)jXbp=Rce4H%HOA/$r<.`5Kh4iA#a@j5n#=p4bW#IM\,*1DEm=d+HoGR1'^5X
%OIVjo%beRWMDDEEL6RB.q_.M\=De@Sb<1a>Y!KL<6atk]`gSWn,m(l-2csirbX&B"RR4pq\GW'k/:.$g_!28c\puhdm-#:P#QWUj
%RduC;T[n6U3s6[7d^<cp!$I\(6N@\jW2E<#!+mG-#!2s<JU%l_=d:Vq=-+n0l)BP=&X*F*bu/AJ-79?5RImlOiA,*ILST;Z"r;94
%&TA^q5l;0];@#I5)[1(E_H8Qd72RfdJFaD8$mRMN;[HKc"uZIl:Cbt2&>`Jl?'u8X"r`.>KlbM"I5*BMIt<98&7kUg`a,m-,NPRW
%$p[Eb4*7ER/H"EuS'6TQNiRu9XP,ZMnq.@D8p7L#5)q)sW"r.dAF(ou3WteGo`=#BKL@2hXc!!I.V:Bs;)e^&TP"VUA)%)[Lc,S2
%hC>a+$l1j\hij#-SoatJ=,Ulk4h8.`7<+Y&S1%]3gZ:8cgB)uijQK30`@?V:8.gK@@RRm>!NN4]WGob?^Q=>LGi'YEq5"F(ZEnLb
%Kp%c.!(g>3J6'n=P(bdtgPI*\F]tn,>5JoC-m0gI*@agaUQJ='+V_3S45+gna"(k8Z)T,9iQ0+Q&n'b\WfCQ#"0h(<.f55=_c]&n
%.a5[k:<5E>Hajig-c/fsgD.eSS0\a7:P]@nKoeq0L8^ZYb"P>IB)reKDj%/UILntteSq1sH)iGB3)CbQ\@fb2$;AiX:uX`kR4,TU
%#7Ai+k9UV&,49u!j,+KDH#nO!ECg;uDFgR%!s0++n!X<2G0dlm!#`c&"pRWK1ZgK#a&A=+'b6BeejIf:Os3dk6=;q;$=XAKM=\iq
%C-h+SQsoJRlbtB.L-A1bUJ*n/"M*BUfikV`ploN3FmpUAD0oZZO?Zu;]-bA8_a(8OG,S."cKE>s$\BaHje[)CcrC:tWsasOf?3WZ
%JIE2SU,W.+Z1CY(;a<Y9W63e"PM/sZij>l"Aj&<MI%[P$+<f7?EM@mM9OLjRNJ(k%:pNUYMI08.#bpkV2lU(CN2AMuX4.RT2WIG_
%fO(AVg,mf81BEMll3,JOI!R-I,n?nTVcW'J5a0pN:e)02$8uE$D:5ZKWdb$dJ<dDi'j)1p7j&ZTJ@/F/NMJIP1^6fdp=lsg+EBG=
%H>E,((+tDA\cL+m^cH0X'PE?h#D$shDn:LRlm6+\gJ&i%aAglF9btND2!!#\JEh5BT,hZfhCYmSAWp+k$cTQ43tl'=qs.CoLB-JQ
%06RQ-.smg&>M,C7EKF:UnF%M(D`C:8$P%oQa`*>d#oFX$4gkMQLgT`>:lFqU'%),X/tGHn=?Jr!>i;_DlV8CMK:`olLt010If!tS
%?PniVB<Du(m;mf6?HT!F!)&,n0`Y160Lkf]m^K0DKrTPh=9NFPd$IPf)XLK40Ms(W<CQ!]#2am7p06%<12M=l9A%7YV\IX6csZp)
%Q'd:0Y+Rg]8j*OJ[qU7j5m=^`L9J6/;$TR9WP`NP8OrY6&B7"XL*!\qgXNs=E'*[GY1]C-ZiTf@Uc$n*L]'-o2<5r<;RYtYX!`41
%@=.RtQE-p0qeaWG_9Hg2HJ;jo:Wj]gF@<lP5u5YtS"((^(u*]',()s^9'mK1:Velb"Y4Auh(bl,-M8>t1Td,kYo2:+=B0u'`!q".
%@1NEDos7#&C0r$ECq,HZb2&;a^bT@NYuZ!F<T^:(T&=YX+=#[sENTR3MB<_W*FkC62$9!QdB4Ah@l7A0DB3mr#XS%f3lmu'7co"s
%fe!J4T:9b\2M.LqXljE92]+Y.)p1N2C_W!(.R)G+H.>4=D1s3KY)(gj;8VHL>XV!c+%V;DURWLu2?5jG<@V3R6YH\bl+-HkBd7:+
%FeH<Rd_(5"&K\hJJf_4fU!1.Vpu8>!*'R1?:T*I[W[G0DE)e'l%MF\)TkG1mEX`;J!Z^Y7HJSXnG:'n)?K>tQC5l_K-7BFB!&LF1
%Z`f0EU-,pA^0C>YZg25Jn8mN=&R3b.`&gKrk^A34oHQM4`C+)->#m.=(FF;L(5EQTGV_^+WsN,1^0ZLJe7WZIL=cdoH9+l,055lE
%n9d.r"74<OrEoDG45?A.AbY3!Td5J!4LjA.MhX\]*'8uI^5-J@O9t[H!/ZmUJ$e6i(rD"1?-B4T%BV\t"Frnmq'%GC=U_l?j(dWV
%+MP]9<"<@9i,&c1D<Jj]"UH/@.2CgJFG[-I5QF>?i"(0.LrA&=Th]u#`!=ejb(MlNI9Q`<6K"YJ%tg4i.6nN)G#`73k<9HOmRRWK
%a\MtjNpR&S6fQN%=s%abB8Cl)W_*J<2lB\0LIB77`sJl/Nl@1F],\Y?<?76i!*BgF)hWq\.1`0(auqem&"D;P%-O&Mjp*.KL+_f9
%'1KBha;3&7"C`"KM0H3)iIr(5Eh4Q=!<_Hnc0R<,Io)=X.h5h&-in.#Hk]43QREK&%7790.aj3:M?K*q@K8Y]e>[LP!0gk)N7<DL
%<es.1mnL()G(dnh:bf<k<RTffKoISs%9EX86)4p/d*Q$*?Q)@EZ*iYl5j/].0^f[9l+)[H6H4QCN"_"lRTO7U/oIoI?ZCnj`4;Qf
%,J[97+<;ga>QCQ2k3b]@E<?^",bqB@D^'k#N4o&c=(gMV1*EcXI<e$<d0!)EJXMX2'p96[+\8C0dIO\O?/iEt39?@PW<u<_M\'$J
%GMT0Q$Ph;-'.Z3u\rs6-dsN#AF;`Dh"-==fTUGWVe/h)9=$i=;HX94]-ki^2c;!L9PLCQnm!n^+n2e\J'QrP<<2T30du?<oY%QN.
%A?ao=%Q'f1GaUZfNT^^\3(2C'MbX9F(^i#+iZ_k'L^F2Oiq[V\b;4\D.LA\cN!mX3.O*0fB6\P:$\tYagjmJUccmRXXE>6JO@M%Q
%F/6#cZi.g-`VL6#i9sH=AJg3_?Y#I5)I(T4b/aQBo9VemO;f7n"01e./g%n>=!ZFk![ZR6W5OF::`WsH*<spC)$C49#SPA%5p/.W
%$RBm!>aPW)@kDYr"cso/W4EbG=>`?5Dqf<:+t]Q,-k?+Q%!C\ULf'GY:rHO9<AOqU,g(Y*ehP=TA/+(#&3ti+[UNU,.pgTlBT(lT
%JGUHS17/3(;iufZ)ZkpS#]E%R)$/'67@pi9!8&KnV"1nH98HSZKYq2b81@[P[p23^dG'H]!k`\q;:Ru&f&-K)r_(H"ogD>!6RZu%
%M8kFKRhfrRM0=rY@1?TaYX8NPJC8sY\^;+3;"$MkLF;,;.3^7:Jrp8!bWq-0cRPQL8;nPM;?FBM,5Z(U0cLVB,Q?_ZCD2:DYa*V*
%%L/D2TZ[s6g3DWVgiUhtI\SEoZM#`)9q63DoVb(X-lNmE5qbeMODlP%>XV2W`.EQup-,XZYp/Tf"l@'3aapq8!+:=)9e0'n49-4<
%YFREY'biKsS4GfUZVMt@'El:c%;Qt5I2(?b0,a"$T;6lVNkHlb;pS9Gl2_2tU_emdK4tU3?^Wa\&\$gE;hdR?")o!_!b`#)3.t4/
%ba^#JB$>"caqK4!?@maUEcN(CLZLhK#ff1\$POZ0+HH>N)Ge/F!2O(s:c2Gd!%Whk+AYQh!22Dg+R!it1S3VG-2;1RRp=O7."9UO
%)APTm5\0qB$I"-]lu?Z>>\lM1=]LIFSX9b>@?P)"+,n-Y#[qBo3hPe]307P5'dF1lcHD;<gCaHB:/t2_.&G9OPj@=*SOT(-E>bMW
%KQh2)k4`4e'aKk63*!%-@e*G5-5Q8h0$KnS'^d)H1,?.`:j`ba\N&U<I]fNT'X5.T^0'`HnB?qY[p5X%m,Scol8aZMXQMFL"=OP?
%1pFk('FZ!/2WQ.;*b24+l`FKJfG%asB#KZ`6pQF$m7qVd>H0$'40NUd%RK.k000bs,,IQLi.^)oVo_10B]C7ms)=EK!g"=.@Akl;
%95L3qA+E16.RbQD>c<0m'Q+8N>`;-8''TGK&odY*:[5KBSE/W]bE.^*Tq0tja"YWhdJ>Oh4p?]"n'>nf<BWYs!?W[`3KkWVNm_=/
%bR.L9W?..NBG+/TY&fUIlP9C+$Y,<5F%oJj5oQ,e>e*;P8AN#dVlTqI"F$Yk_!:EP?&fP9_NdA#"<`s:#\4i"&s3e`rLDN#_+V&s
%R=k],!aMVXS)LH?:t#OoN(';2&b00M>eh/Qh18I$Z63<gU%:TTW#DA&T&&:V]8MC_S-Ufb'UoF]lpWH>J5hM/E.+qn#,YAh87Y8[
%0k^V(S/Rh0TFjK2NE!nT#scF+Jt3323nuNJ8=:+p[i*N%5KEfX(:X=T\i?JTOE(FN$o_Y[Xbds+!$FVJ1au0<huq4hO@Xq&@uUPk
%17\DhgJi)#P"*6G"ZZ%#/&4XCGgVX*%&3Kj=iqrr'\8NAhY,Wr2Qa/.=$n4N>*/$O!7O=sPY$V_!0WH%:dOktdQK7u$j'oGM6fQ$
%>#0csd3./=XL#dG\K\g]>'-iPicBA.7Lc;(nf,ls$%G'!e>E&_H#Y6R#pOs_[fTME#T64iBV:4g<$Z#\;17N!&itiB7X<8h[AeRS
%,/``gNG!,4a?.3<;SZ`L"#NQ*WN"=F!+@NSP=4:fYPYo_VY(ZMKFB+VpaF?5+Y+@k!1q1]UJ:6YNfn$-NuBHF57a',/kEq<IZr>_
%rJF-XN/Ku+>6.dt5R,D)^ML_ZZuA]9JtEeAR9(e*\\NK6W(dYkn<2<'KcqLSKtB%M$SYadc8q.e9X'LklpaB,Sk)s%AHI31C.Fs'
%_hhBb90#R/83iC]Ek3Mu('[o+q"@&h@NJoX;'9eu!ltAOZU8S5?U.3(jq1a)">)r@%0U_8+;*0GH7U7u6'%p8]Z'r+E>4:+K>Q;m
%-ESXKGEtP/RBL3Q^g)u6"P,Uq7(%S*@TTeF'u^XG*Mae0((Gceg,)U2L+Gg"e=mOO7FOFh>SJ&]CB8\d@N<>[Y<X`\MC(3;^"I8N
%]#kXV(h)1=^"0:c,mt,"^hl5O+lP=I%+)]CAAF9@a;[KZLYB,LJu"0X+j5inN>,jM#lmK"$#O*;3-U$P5:UXUB0j\3J?.9?/@X6,
%FTjicr&u9[A@<3qQQAEG`6OTE;c8>=Si(u;7hI$I9LTK^?CM]12+a/t4^El0fF!]PNRZpW*_d1(%%@791"so4$,$KR<l;729j1Ua
%+s@Q\_$jl@.Z0Q9HBNC'/N6#V6E>b""B-FqFcl^1=KL"YS(8Bm8epcU:aTlbR:foMX959[8#*Jlpg*c@=YNg+1k5TdQeZH+\f/Kt
%']BO\arfSP6+X[aq'?Ed@tm+Qi9(d>OS&UOd!96G3BP`dFu:tJ*Ynn"io\cAU&[Vq-t-phGiEeG<Q8^GH157%A[Yj6*GX("WYj!N
%;?O9jdFJR+V205l:"_utOh;.I<bjCh*e8qW>/]C*8a?^A4l05X%4.8W!MmgEf'dUIXP#mWEFuHn)j'dX$EPUBep=OE\Z[,I8U84g
%=C8]GJD:49KQ\]caqPJ>f`Zuj!%8<hgdK-shQoRDc<\gj.Y5&Yc8<;oeF?$GN[G:9B@O6g.?!c&]8#;3[Ft5lAs#goBnEgB@:Tns
%Ygp9a/>Z]s56;"ce9Y<*fI`bbnT`f"gTLV$FlVmnNCgEl/63JeA00L$(/8sc+\#+X@L]<1"o!.]]S!XXJ5IQ\(T9)MM7l,8e7=@$
%^h[-,b2=5E"'kpQK(k'A19S-B\2XKhnugg%Tf0#+4g-#'ioT$?V[u,IEVo@]*5qft#*@HScOR?CdjC5$K\.#Mm+cd6,sZ@*fe(9A
%,sbNL;l4+/$c(t8>Cg@T1WcK$#2Y!,Lg`+RjtbOh9;sF8Aka1#3XfCO?G,$gob>Y,S`GsO[c7Jr`8kd'SnA2)f29H5NOsk"oSL^I
%pY)/5,?Z1\d%cI8`o6,h84lF4'uK7^1q#QrUl.@6347B#bkK6=@Jd*M4<!*)ism5h>HMQ.<IgF5H=6e=5NKiYQYk%-$mc_$``t?7
%L@PUX/_-U'0!nGM6^*W\iQriaqVuIOZ]%@n/9ogFFL+Z^$8?B'V/7Q>d5G^?fE=.Q@mXNe44NCDHBO%br.T)SRHR6$&YYhLOW9Q?
%0n<\g%7kaYc&P@?o(Uk.7;>H@YUCWdJ4e<*M.(U9Y]VT]UOVPZ]pR&F/RWY/8aArJK&@utrORD3$i7)#[$,&N!W%l&Zk$.X!;+Fl
%pY24g+*#mThVRRh%+AP`9\sk@eT:lAZ%o/N"CT5De?_MZSi,i,gs2UXUZ!]"Q;n>+^DiXWr@L"]R_1SH`"#aS#cbT)20mbP<GJ@P
%g*/J1WiFQ+klOY[WN+H?d=Sc@l77;7-4]H$BjI^@9g>i5$T+_I"#sn`Ja1r_#9V,e.0hP-C_blGPLc"f&E*@:)BN^<JJM/"#1S6T
%Z1:4"J7`Si\Qbn_h%n>*Z%R:_0H_KKR`nl#CBoA`IEG%00%,.2"KDWZmVl]Y4Zh/jp1<q="TR))Wt@n)2ukj2dHj#`.YCh/<6Gi(
%Xqb2"BjI\MX#;BZdaYQkitR$fF)^h^2Ig0$C^4YBidJ8/P@aIA[(b$LLZjOceL\&:!EOe-6F4q1<@1O=TE`Q7V?$'BWBHZkOc^M2
%$(;ls0U(89ieSTlK5r]Q9bQYhm+uUMX<fB^N#U=tPEgGK/9bYO"kIRdbgM+l[_DXP-EX=GglZHQ[K7Fn$ZfVS&&eN_/J]i?*?^-C
%>gpA5V(6B;LaR's"P='ChRJ#=;3AN)gOK,b9Xu].A\Uh&.Pkp[_eSn0oP.lkXB;3RA7<Jm'QaVlld:3c7I:A4gn\0!ZapmEb<\m2
%)Irs6CZ>lpm];$.;%Dn%omW+U'k8lE9RsPQoLS)nd1pU&\lCig"'Y-Jj;3Ja^I@P3HP*4q;;DRU#\Z^Y@B#TV*E<9)2r6Xe]AKE,
%`H9`gVq;>M/mrl3!:64iY^9COi5is-1mYH!T_8I2$TZu\pY1R`(Y;3(SjkXiKo1ofdEu/@IWTsX^Ida+Pk`qOe@,LD^lOLUMr6%(
%7X:F2`1MD=^YbdZKV25pM^j*lLf*e>!0KNBQPZA'AS_QjF[F?%S(8C-CdG$o!o"'dP(;!(<G6ndI4p+*W^gN^Al3E[8aEBOf?lOR
%Eog>POd)`,(:t>o\Iq.6B'gkjrAM'eA9jS:?J]E&6;_aQUgO[_+`!X]$m;Yu]k"h6VY(ZLh.4t9o\L?^\TYhQFZO/d$*"./a;Da"
%?eB;F]#p2_Yj"&M!A\;4YH]bgK\6F"gNZ/=KI"TUW<M[uBmi\g%GQ!5XT6fMrNt%lT^9gTktYjn;"+5)g>.4Ig)&OZ\3]"o;24^.
%Rg0hs1e]=fbe;ftU=AN3Dii7Jl[G>S=4A)+1rtk9[K7-tXOE[ODoJN2]o%fR/>k2N`V5k/Y2E&uS`)gYPpBtH1C#W3Mmq%p_Z9kY
%(gksa)"u^k^*Y!aOCor#K0t:oU[L5o7pq"RL;K?AKMbO$l0']HHVL*>4-;LBB&qVpLe"3rh#mrGnp\AjjC)j<=^u(Sg25765mB4o
%N,^F@+CL!g$Odo@S@-K*PeH195fq,,gUQsGS9q!*ZC0a[/*8JNX_\i^"Jp;(2ulD-m0n49D9dQpOidNSMecB\gH3k->31B-H6XYc
%U_^9oEj*Hb,;s:kdqrH8RO">?g$!63S\+>aXSZk[IE>Z\6$V.f5\K5Mf;^V4c`>cfNq_;pd"3YG4#`mA[f+3hf'=1W3]m(p/=f4W
%^Wd8=*O#B&a[*:Nf\5*@)cl^aqhG-AR=Dt;42#r<RnmKTT>071cjjgZP%[@sG@'Vp3>3]qM_n5Q[\G=c"/XD;cI:2I<UZ+(DfR24
%o!g2k+Dj2Lft2rsWqQFe7Xf\[dsdM3Pqn9[(>F!`TQbQ:B$n60)I)GHB_uYlS5C9'k3^oHXK?^+2($t$q\ls1h1GMuc4"'O#@^HP
%D9&o.f4<q/]b@_D!PQ*d^WfoATubZ0ZeJ4fl!:GdAjHgDe,tnPH8"]8S$RK351+c'gJ5PY-TUG9HkXJFT5t\"HLLKTS$UmA&[T$r
%\"2I0HcV\4ft#P#/DC!VpR@\LBaW-;6=@E=@J9RWagmHDBJO`Q9<d<Nojr\8(AP+^0oPj53()."qRD<X3V3mrqb>A9&%.oCcCq6K
%,73NENMbh0_&T<]ohch.%9c8r\[;DPMtB^PnS)tj9l]J$<18]r8$_KhGh2LclColq7MSl,H?Z&>VMb(%2bdrPUN?-5[%:73DP9Iu
%FAl$(,D8b*mR)i",2U?[m5K=A/."-OZj8+g,g[CTa#u;d5p%9#ljJ4meUF"=QeFc0jHgcUB]A79\]bi;#C\P*8KT.bhkYF,#+cUW
%7]VU&D>GZgB&Mq6fpX4cO*o]#d^jH76S;5^C<<2%WXlgZ<i\DXccfU!38\%pB?`J-6X5O3giiD!5+\u]iYIZ3B!Y^[..4KWIAqY"
%79".dZXFq'faNgtLe9kRWf5-RbIog1YQ'?1=L]Z3j=&pq72$aHc(,h?$kRjU!sQ,i&7QY&[)%8m=OKA5GukG?ag@'YApE#2)%n2C
%\u$*L/4,Z`m;$\NaYab4-W]j`"12N$"FUt-)BU74)o0N#dZF,^2Z_#BF^VlUmQm"\`<([Q)JpLX?HgF-Obi*mgdVc721Y7>,W6#2
%$5X:n*sE4dC(l3[:0U@[?L<W_ieA0H(j="_&;f9IV!%n?"6<YqHV+<7UB0E!'ES><W?\2SnIf),74P9m'XYGk9Wrc>DE$Qnd+_;&
%oQVQ4J:)[;!gu`E^e*RLJu37C_:'P2JFFb!>!s]a5kr:&$42o&KEmT77E%1E2U8%k4;J3>j'EWHUH[t=mr+(SKo]XcUF9\"54YpE
%.*M_/r0GN3O*G?(c83[()K6&m3(,A!Lb:<?a!@UF#CXC$$crL4cNjU'-K;9GlS+gS-r,NbElA%AK[4GLSIu0jb3P/!pBl^F`f8hu
%]o?C*U?hSi(QLbA>hP_>RMKt)aG9(VUMTER-9VJ#Q9,7rgsX0l94%V_+]JgU8X$K<EO'&$e4dZQ>G;N,$!IAfj(SPQo*BKr.QNe)
%]dD%C.PfI,A7BJ[`HI-tr%9_3P0iH<dqWQca6-V[CBY@!"!VFEM`@Uq!\d0r-XB@$.gD)2hO=`_#"^a17tNM\Ogi#F@o>^<3naV\
%#?H4olk5=--`>TWij%XF-H$s='_iqX3MFYn&%?kYF:5)(1IT"I&a-J?^D?9"ZYD??+I.<\Q1,-Z,&:>)36-C"P96I<n0,i>4u4um
%ZO,)C)m)XoN5]$0*\DV))j$@EEHEd;i0hSpJ2CYFQWZENqZ[S&J#R\<#BpA7M+Cp^TQI\:%cHP.*"0j6MZa&qVXAV9O='6JXTC/<
%OYSCSEEEi'p;JGA[8)Rs.8.Y-Smr`gb:"gDfU5RsP"XhVB3j.UA/1r+d;()F0Zfl3"nL:Gke.075s'o9ghVWnoJ:'9ft=Em]]pVe
%4>Z:<Lo=-!im:0>/9?r?IRY7uT00n1]Z+'.8\#9eQ8l:8%$7iJB[6E>_P-)M6nOe\+PLTrQ>-J@=r9"Y!4hr`I+/09ch^>*TXXBg
%[j=p[G_CUmLkNRG/1c'UR'r@%L9)]J_Bgrm>fP9T2kYmVd3+jR'du.EX73t:Z&2_I'5&^9]^c12;f=)ae<,=3i>+X#j@6ZEbfA$&
%&73AbMTchLm6O<WT0+h`6qWp-SQ.rM+B>PB_l0kdnoI&Xm/<;M$Yg#?;RK?+NLJi]ABBDGP,JEf@jJ&>3`:6e<_WBJfgO?>$KRtt
%U"r4ki5)'#6]*`2nQ?)ZnRa:jEuJ7bre-'%;o)8?#nG,G-cqZ^_?_38'<0BB]-M[_!?`VZEXV<\lP+jl?r>Sbmk@3(KbP%@8N%MQ
%j>j#dnB(q&]-h*A*RO=#*1ET[$FHD1lc2i?dqq7*OF`13\AjSr`9SQh7-Qpm3'DfY6!K[LbWusk.`S.An@aF;NbTX<HIE\Zq42b$
%#:[_!(bq)1T-T$k1B8O4!)nIOJB*PK78#"n,EOXM5ZO\uVQS/OqP.AP7t3fG1)ai+)'pAX4K/AF^]Y$2Dh/NfhZS17Z:hX9/2n.f
%ffK5-]p`1]MEf9Ejtdj-JSKrq$?@1mZA19[1alaf;+E+Z"iqgch?+Q7$NMe>C4mcEl$!ji[:?!%8MBLAnaX7J$mXCl:#]R(3X>tX
%h6+!)-0E'dOtR.RL7n*<[F]6S?B^9I,-`m7INU$@,2ioYP'c1l;,Y9J-clMd+:sK'K^Z9m8\IC&'p,B'HD>'8L1.@rP'WfU>D(8m
%+AL-n@bY%%P&$Ip"9L:"&Y;+Tpk5^rT'Gi6LcgFqOMM.$&&8B'1;>a3;^"D8Th-\ro]M>e6L-@E-%LAp<,^1$kYq3"(Hs%N(+2;E
%nH#PP_4]X+VZH4YY%8-Iauk\]<a:!Jr]q[!Gm)jIcu:P1Up]TUE:fU+AG21IOG7<=AYG27+RVQ_8QJWYdGQBH4Z)W]UsDe%LJ1$p
%Htr?X)^#umLLrZR5QOEs9Ork10Y8kY_7'l9r"fQJXpp+pTIJYhjQc9o0uuaZ2!)WfpdgL,*^Mn*1lT9BfhWmc3r"H1jE&C\!+=(j
%G8j"#2H'dNGDMNZ01H]1!L-)Fcl+#?@W$TDnA$ZH7TH<$5[OD$6ek_@)3B\HW>O3#"AK+NR6$9DP+&nZ$#ZCWdeX7s%uO&+fr,3U
%XAki<)@l%W"f/F3nU0r"2';p&#'<RN"TcR:,r^ajYGACX9U`2]#KeoN5T%3:*G(<BSHo-ZH%d`Y5/^:C*WVYi9ml"R?E2`mAdI.5
%*#M]cO]S*,0o,i1bKYfp"!U5tfV:d-f>l2;!nGPO)=KF"ON0\dCpn!Y3,V6CmN,S1MEt1bJaH4/,>&O'P7e['\O4'G[5/ps5=3_u
%dR[n9,(bg4"1OZ:-L>-]4AlHFSB`CBj@B^gEWn1f`tsDYRZr&#>g:J%U*?i(!C3`=Us3O-M+QlsPQ]?Hi$>1N!PUh"/2@&)o.j5Z
%N`n%#2%M*+=[Md-<Z$_?^kGCL:)XLooEs:mokab_\Ql_/1uSHZcZF]RL^uKHKO=PrDJb8'IN'(BT-cioA;:;<('Q=9)N1^3T5i!U
%Q[#>M*g'^:1Pq>!d^52c$gGZi7:FWUEQrYPpCMUu#eSD(!.JE%)6!)@"!-IFL';9cQC'.\_HeS"dh1R1fL,EFR`=J.OH4g`7T'@3
%&)!C?M'QN.`lIUW5It1<+Lq[i*jlDI[+%_]$OOmRg0#)G"-tL8,E#l+AJ0S'DLcDt'5blmR#`2^AM&aH,'h<S#nL1#T?gBri)Qu;
%?a-jAJ=Z=*EH^uK)\#5!:CK#dU)ll-.pE5,ff3VX>YmZ5fL]4&CRLL:YbS`;.<e'QTo.iM[#0;`Sao=-kV6*2/,V$AMbM%8),l]m
%^(O\<Kg.i$:,OJp2aME6cu!K:<iQLdH,sGJPiqO%-])?%XjE6n&P52K@jHW)84?^=(D(jm9IM*h"6)1H&"7]KbS_&eb1UBXaH\6R
%4FrAiSBmj"%CH*;hdRVF0aSo&*b.0JRJ-o?CpaPnY!M99aW-5cFLg<Iq+]<h@5Q")R;[7X\<!(qM5`5)oH6r_"-8A^p%@qY);A37
%M-ObhBkE4%VT*0@Q?`uF)ss.Pc"Ld#7"_37G?hP-Bl]pj<ofL?m$n`:Osn/F%l'rqL_6+ma0Z@6jcnO8K37Is-)nIl'rQD-#U#`L
%%#?0bAVN&L,_f*FpeLAd6WoGA]0h57UrS3RPt=YLI'ue6XD#8`;iOIg'.&+WB_ic*3G%PlreE`rbSBAbKuh?nE/[(`)rgVQB?:So
%=7ho..#)A*e!=B*<8aXKGu,TkUHg[@!a@7H2W8(3Eir],%B/uR&ud?.ago`m*_lDAm-G3Hgd+5'Tnr'&eRrRU!$o?:8N[i"'9fDY
%dO8\c]0JpWU,ts09/2s.D:jX]fk_!,+B*;T>*ft\]N?PKXL96)dGYIhjjmq\abpn9lB?8a:2Ng6Ss@;:-$]P9NLM>sj774bKguBo
%T)p;.d:`&e&>(_d%O3Wm6^ScL>g.:V%a?!4&DKO6WRJ.eL5uM9GR-9%[.FsT<-Be_$8iZhc_Iq#^l(KPp6+kO%i8Y4,j$*<nh:G8
%dCbT2Q+n6!jB+`GK=VZtj;T@^RM8)4V?pX%D*l0.`fMn@M_n@DC<>u\1qI]ZU,S?J!oYIL=,/%p1<%;LRArhCCY!,APAdb72H3Zp
%kn.t@+kpS(ZD'o82*j$DPMD"Wcg)n7RE,-V7RY]PJa+oL:kQ=tH-_AA0oQ>=MYf;#WWWG[?!`J%g3%_V-gF'+l"(k-8\"@)W_ZKE
%CBbD,/]d)G+CjNN];`Hqke/^:H"^Lc"p'iS-G1%\A3NtQkb&>_'/V!U,FgDn;b2hF!\la81c(sRmZZQq>;'aSglJ6l'Fbh"7S]^L
%+Ua68+2IHR_m!:H%E=ljNG\nh*N8L=@c+*mRA&usD."e91H-Hjp[DF(0WI4?C`3dQ<-P+WQhf,FO>%$eat56E&I\i]J<QrN$t+TF
%jMPO$,lO,+>mVAR&Qsd*bY=qrrG#M;MbiPsTKTauHHHd&P+!D.B=6"p_`EpG53eNq/B;\Zj!s$a6.DA[!R`p=\2=\bn4=;r`h52e
%.s]j1`5g#jb2cjUqrXB-70IhW1j&#?>+e@T.,hp8EE@?4\Yh,3,e7O`hE_u^`(^q26IIWoN3/iG?H`D^_q!PL/-\a-rTR7HVAR@O
%hXg*SGn_ir"!^fU4cZb,I8$)6g0F/BV.$X%Fod>^YjI9jLF@B#FejZ5DV!4b/h[`j1sNH(O/[4W;`0<%<%Z](mV0Kd@P<fGg9_`S
%c.ii)q"3f@,p\su"PeG;UQ[[UOL3=dQV.a?H;L)SCCX\uC'2;H6Q%fCO@="48Z(Nk:^B(K<X_8';3Fb\?2V]o^_tpt]7E^s9j#^E
%VZK4nQ_ui!MM`pb%!/#mX?tq]SlWTMp&PBKW3;Pm4!LJ[c"e@-D*/EN3#HVU:4OrQTq;+qBn&D!al[g08>:$omD;!06oIM2%.Zqh
%/eHUHlOii4F6MS.Kgi06'ZOSj,18?,"/D5SH.@sb0cYKg+!AQ\0jD!O=pt;%m4]5eeV`'!kbSgH%\jiJD#po;OW@75BJq\,+XN;.
%*=R''qS4%>g0GC/%H?CN.2dFu^#"Ga99Y`eX;[^TNhZlZQAm[2"N1VEYqGTPGWY&98.:"en)ZD73,QB4*;#3!Bb3FtafE[q'e;T6
%$86QZO*rf;)S$M"Lsu_DLn`C4n:L^1?EjVBEMZ+<9Oa)V[WkU_7-YkaKFc1)!N]4i>3qS<*.uC#dO6?D%JbnU!YJ@JP'a34;0!Zo
%YdkD`($-pIm`bM='01C>3(H_/iZ.$T;-qbJ#jR`AP#YnD9!\B*UUYNu+KjL6!L](F"#BOpf;Xl:oJl4T.`l168qN,BCHA*-NSmFN
%RK:Vpp44J`n'GR"l&\GFRSm7Ho_)]j/DC1r1)Q+`C_S:c^!1,@TSog]4$k8>nH;7=T7.J'D_843%#JK!Qs+:j%R]YlF`Gl*("CQ<
%H1tLY8V6.+M<\oN$]"dg'cL75Nko+g[P)EM`3ImJ-S<2>03ZWl$'"'pjI!UR:N6Qs+nD.J]3qTjHTkbk%_ogc1t[BnrsKM.-r?(5
%R%'<O-?q7H-c8-"-7:P2/`Sr[&Km]Q_B9BcG6$ko4SV(I\/![To*dFf71q-^,$G*.q4%G+$a1k&`d2-NR`6Jg0T7eV<hT3t6-r(q
%,>$(?3o)=8!?IRbB06HJ$jml;:IdJcPBeq5ou'alEg&d;mNcLmRl<S_MSIp.?kJc^$R,)J@*>Y'M8@-9`<G3LMs;aa];Ysi2EqfV
%7%J?hVNfYk(W,6%.j:R!^?c7SP@:7\[q$&PViDNt&B\8qN-V39[k]DAV$LkA+joRX/B]ZjH3h#"0S-.q-!H(E!C8?(3dV\]bH=*f
%+q.pKL2\IZ^qGS5P&R@m\[ZYD84)sQgndP:Hd1k7_S5AK#Th8P`6crtCJ(YDZMJ?81p8[`^@d9j^%QE>2D@=5#24/<4<=TV)o6BK
%#/DGBDA@a+>9TrON$kiQ+GP0]Ecg+lE>G)Y2C^h)a\s_!OjB,,JdpA`Tf(BOWqG!tBcC/Yq)7rT48YMW5.%X(PE%gHL='EhK%iXX
%>)#.&aLhL=SqX6Me)9AMp9#csE.sKHj`<.)\O2rmRKFq>5H_5e1*ef2+MlPGY`n#@]6H;6K.L*VJ@l?sDVUD6_$KD>%XAB;C#lo:
%MhrSg=4]oZGt-Nc$imrH<A9fB;er84B&B"=!A(f?,X*#2*jVf@Sfs$`iU'L@\d#:5[SH_S[sm\VVa48m]d"`0('>34Bl0O7:k`-H
%,<3fN^(u[$9`\;uH#&5fZ98HX7@A"S`I&RX-OK3Z:%=UoA&YfFb-+[oh$/VG71pSLKBHM\\/sf21'k<+&!P7:#P>NHa!Yk/;e5ld
%^$0iZ>+CQ[RF`^LLQ-_:o_<+8[M%.h>HHC_^SYjMD<]g%g\1"&iqh$Qp'2W_0->7J;<Zb%^b]-P`(0=E7QSWN^6lunQcPQ?^[I$k
%?"(nCF"uI,N.,XN'4tLl+r25tP0`02G^p9G!p%7\`r_^dBoqE`)_`YMLs_YXFoj/0X[dA`9PoVbP`5oPDBie?':@Gh.$VsFDX5Z"
%D69n9[\A1o4IBT$e5>aNCREm>nen`S8dK8!d$e]b[D.LgW>@WBT=!V^3U']%$9doQk@;<6"],oRZUO7KYdnfAZM%C$?i4C+kC6]b
%I`MKY+MWNH2\80RlKD7SFA!0lL\fCm&]PeQ*m*AU%g9KN!@!"W=4B^X/"RjAOKa[8Y/X(RS_$@iCD](!*M*362EhSa[d(0.WoNHR
%WQ&3\?gtE1N%%%16&<_jW>Zul:tQ"@&]4c.i3?&H&gE9SKO<ZriSq,`P<O0DL<IV!4.&c,FLXC?%K-==2Qi1miF)/ML\DQopMd,A
%]Z"'p1%:SsOWUgU@6&LiQdH0=;N"O]e_dgb@h:Ne^t?g3f\3^/Y!`m`)-GdHGhW7C:grpH!O"JC^FIfjh62o2q5WDr_o&mYmY<kW
%onO$d?YUk:LnMk7#%no9X>jh=!^'Fp+Bmg&4Do`qDA&.X@&<[@:J57Q%$GU#JbkHj#+(8a9&(OIkR.tn"B[4Dc^Nj7W">OVit*AR
%AfHY:f]H.M#)5Tp#_dU<90hhK,2>hW%oD*R4>FeLiqh,V'1?_"$9g@45#aum^npXl+l3'.TZtedqU"I9"]dmef)^USmM;l1!tW^7
%&20s"S+;?6&McjQDq@X]I,q7,+grNh0`4pqKU8Pg1e>B$%9S3Md^>s6%tgm/2`!_ScGXf=D.7Y>YU=JRE<?OibK,Z_otQ800c!bg
%D%ap/.)F:hM&Fb1:'7pr=Ap;$M,/B/7PD1amS_Ie<WY^cYAu$`R=<j4MbPs7)<@JJF%[g9H8p+^OS,;EI/;=BcYl.K_DKRLLI?ac
%D149OZ$usoo4oq+d/93:Ekio.\RUnOP,O_I$ffU9aJp^SisH3;Q<pHOMI5>MKc&jgW*.LbDtqmIkYJL[Sp.)`.T7[(6iI^,gc=Lh
%,4Mf_m47<-V\>XV8q@)8_Xs^r_A&e_j!4H=cg=*OnVU*Q`gp7g$D+O4-Pes949pPl%!5qFDAU3/;eg`'rI:T4rM,DV6up428?Q[I
%40HpW1bQZ,.$s:^":GFC#,qQ',\^Ug'CLM("FgL#_6<bf0m-c_T*k%RPJC"W6c/!$pWDQ6$MIb;@,KZ@XST9D^FsL#!*:O'#6gi@
%k-KP/E?Pqr<_RJ31TrL#7Ztds,7JCQHqB@Op8I%CFHo5Q1H\AJ\Vso5C]N9&q^OJh_.l^6-U_cT56;DFj)3cC`Ae>9SATu$W8m#e
%*MO"t^<<JB>8sqLs*uimD9'\hO]"tl(&D4c$sVI4%+/;SN_hINpo[4f!C3(qa%-khX<4$-N,,gRb0t(p*O2O?Ni*uZ1!pa9*@##L
%aY5t$-]rFbAA^cD,t)t?$CE(uNIW-;).aF^*+?pH!<@!X"2MQC0QP%UciE9FPal(iG"(&:OGULlEmM9?:#j%I6-?Eu&eN#8;>=Pa
%8RT&lJnHUOpVa$s5tA5bX@qMU,r[l=+YbgZE_O'!Hs@X(H5&TdW^dA1!c3[Vljh6X"dpC*'H.Q`K8^nVYQI]K\VjI1/)8Ek;(Y4L
%"OWLoU>Dt#L`k]#NFF+`E:bG*_)1s(XMp*a/l&]b,tQrL!!,C4Kiu5=!m#9,I?6N$%<a'P4J<NE%pfSC8Q-U?@0+.WIK;]#PRFID
%GX$][0'31bcpQ(eS(Rm!mSIULJ`6087H:EhR+'n]?%(jjRg03hO5-Ml6sNR\jHrHm]\n!%.fho<7dR&j+Pg\_<s=9bf5*pM5mC&Y
%%C*'2:i#TI%q-^+0SGAAoB655m@XYK-$W&*fG3u:0l3u-rA'AUSrfj%O54cf,SujR%-Pf1k#nfhMt)`]ofSpEaSjh;guJdbou"`L
%nFa62?:'S5D<M#Q.iG"sMTk@cK;Cl(*UJ7G"Rqj>#$Ar%#)QZKrgEKe0Lfn(3t6T%"Q2"F=MZ\f).6P_3nT];"RJUYV[k4'!"\BI
%;4R7+<UkB],4+6@+dro(dci<M>/&>t?N^@iXOPD&d);?gs&#NGV?;?Wr>!,4D-W#BELJSZ6rLK<i>4qT=9APoIhgmr;#mSOpUB@=
%<Lh%1Se2/Q)B_5oZ"SA1!9A;G>T!]C:KqOB#)oh@+FqT(HW#G4!_H:Qa2]\J`DbXpj"5`,>4P)b"!W+$J3m_#:qL,CQoG1%OGT^r
%V=C*Jo0Cb.&YjSbV:$&LOVDsc0KbR.Yb^r2?'i5LWe+ERNgWHNA>6^[b_^nX&MRg&N=n='k2N^N@od-B@e8+[%)LUcmk#(e+>L;j
%"/)o%J15@=S7aN5BD>+6".)q;PipR4aV?7l>#D^NOs5)5?1b\[!&/TaJsH*2'Z,C<AWlO(!>Milm.:8j+LT4/;$:(KU(O7q=nIB#
%E^P>`E5+2)h14HI#]Vl(,'V#gGo,unc7>Z6>SjGBjOh^MCk<-U!<fD-@&GUe84Zer`NT>nG%eE"\*ZEh_rAh9K`"Y;?rY6%<Y^IM
%-ikcRdV#6uk]r9gKK'o.`!Y-[n3LhiBLot"%5St6P'dGR&HX.oFPmKL"TjA.C5/,a*bi140hB)_d?A@4;X/Hqjk0;8MOuNKRA31p
%JdEfRa2L8>.E(99._#d*jBr`3%MG1O*(V1Pd35d20hVWO\0m:hikf]s$&l/(R2Nl:_'_NoG^"$ZhQA:g75-GSadA?HY7<"pGT0-?
%3<4`B4h.)&Lri.WIV8..^1USf4E!^c&17UT2E7^&Sj+S=!4qV]n61Ge0DST#!aLLeo"<sDIq=GN<eu-f]^RBiKU8h&)!,Nc[T&:5
%#*]?^i@Aj,+=omU"\(]8H]_]=J0]'4gm9QX;NjU()<1-+$A3cY`JlWh.h[:#Xjn%0H8bVcN=<[!dZI%&*"!gU(aS+XN+X+I++Q!A
%N<,f5V97k2nsE9-O#@#N0ngM];^.HWI#1T@k!:PeG*rXG7"(4TC&2,^QUqe$,.o9lM$DCHQCY=SHf9[kUWC>5;&gqaTr8%lO<n_)
%(]:WV9adpZJoU>m]$>0R=$DQFbG@L.!7=8l?t3#(jL(:;-FcFtGGHLR-LJ]9^*4:r*LZXlD?uMN,>)ErV&-[CK</riSg>P!$mO>6
%VMQ+b,^N%^aDD/*5K03O*5u/Zo[1o\FTg)f2$]2p0hW-/NDL*A$Me1n.M:M`fm.j^As?!*&;MGO].+\"JI-_B2Y^V0NH^D,PU,3@
%d)e*.-89tjT6V08W2"s+$t0BjL:159rE5;!jWksN)lhLn_t,>NE]4TnL<7$4,`q6(;`L(a,+qf9C6kMO!_/lrk`_@#VKUu)_b)'"
%P?ar$Ue_*0+CF]oW&M=]PW5h%B0+PU_HJZ%(P2n.8tmYF.^NrSoI7REmaPaq8A^K"bu'Rd1m%Q>O@q99/qUaVpc@u8gg2M;ba'Or
%'-J\!o"]Nb2@[`Ua@D<[)EH"%Q%_X<6OB.jf)RCb/3-sC-\LL4TO7uT1.aZ"n3iE_>aJA$B>i:Ib!I:r$m8)kE'kt_[#al2AAb4G
%e'*+:J+h`(=1VX.%t0%YLGG]A1_s`PhD3Ope?2VuX@cF[J+FV2Mj_+K=$=X87lUaPSae?;k?uM"PtWBX_S]?QL,s`9VfI^RG8\dr
%7rcZo9f=K+:E%OS]<_emTn]CSH&a+T/kccf(r!;rDfX1O6m02d)oYXT\!T,PKW+>DN11f-i8D[<O!;H-3O+M0,=MXrNY#ZEcV-**
%b-2-=]BM7[*JT_(>BRetgd>u6pt^aWU(2VrL`h/9j)(igT9(;7mj[?gpD&9iJm-O=&0o0Bj4HUPj%PU]MQ($>V[B4054)b--gBDQ
%*(q=3<Br%7L/"Lu8Rp$BAqJ$tZj<#1ON'*,@Jn]YR^8:V'=\\@Y#<l\R_m.nM*2V?)O]ZHbW3Bc/<;rY]6ZKuKR+E?2,,NA0j1*_
%-M@Ye6V?%-0s"-*Dh5*-Rja&I!(d(6HM^Did6DOe&Ypt9hC_23e?2KUk_4"qLrGY:+NA^RJgBJ:<JGbsVNMe&:GgMWH9_U*K&UrP
%Wa3*jbRnll,3ZQd+2;uQd=77Oi9?)(@NF=&V"NB].AG\be\1_"Q/9`G,"E/:TYod*e'kR;9mh?pN_K67[f`O]&cR5`E"D0iM*qrF
%3Cb3c4QcEqP&OHIZ9frXH37N`FLk&5ITf/d6:daZkYl0i;]\SS.D=G-b"2;TLQ+Wsdh6MG!Q]R#J2j#%6a-3A0Z`-CrX8MGoN`uh
%D3P#gDZZ"8<D"*mB+)H3=49[\B+$u0<WQ>lnGDL_V[Ef1<`6:E!D(ZI5\F.@i*][rJ-I*6IhsHKrXu:Z%ET'[@O9AA(]sc*NY@$L
%HYH1*;Z@H6#cL=q@>05]PK$*3BplM]J%^E%e8'VY.>R3EpJMuonS!GGWe,R)9<mFL4:P[K=/HGZ?\YZb``8hS`">X65#hG3AHj==
%b#[`BA%S6O?Q5HeLb`CT1?)O=Mt<00_[4U5I2kagl)ak%a/Q@AST+ogM;-J&mbcMorHTC!V,YM`%_?c=*T9:+d7.W6$5$%L/PM;(
%HU^p_]OF?%@Pqp=g^=4Nq>f_VCgsI5jddSMpBF;[(>QN4!/H@%3-/uij+MP$kC.)'n]q7,"uFe4^^)W<`M?cBi8n1'q>X;B-@;Bs
%;P[W3`f(Jj#sc&-A\L$*+d!d6R3Df^?[<#Wa[.d+jPZ_q\sf9;StFDL"<^eNKY,P/#%.MSBOr$%g7N$q7=07/PfptH1`ec98TWL>
%*KGGAX!u+NVT$))j]8roVoc5d0-RVVhFjeiDRU'B44.#D@IKM3^MS)I"W;2[(9d.c(25Sk0-;c\\I?)!A6*H.9goYAg@G+YG3J`r
%M_4ka"?Z3dMak?E>6jUIQW9UJIMq)%R!)8O5-go/mKY'p1X=SsUpl3")+G9Z<jg$6_Pdh`=IC]nWt)4(7N(^)aHO2?hs6%lTFY@q
%!Zf,I6;Op?48sb)L&L"/jIKIZ:jE%OiG*BQQRZ<mHg7!XV1>]"BPBHKm"J'ql7sja%5L3"#SZiK27[rYifgO,Mi@c^:k.fL(&@P_
%E3JH7a4V2]I86X)E:;J'j_EJLd?Vo6>VET\SkC!5pK6u=4)+$gR\9XSdH."#=9t#@V[Y*+a1Im.La=E`Ai*LfWo]1>oZ@B]IORb`
%LJ98"P+2M.&%ni?df_IJ]r4m?f3i9cMi'R_AYRBI]U.$FU<]%L@`7tHd$f#o+18-EI61_pB7Bu*O&#aQ+?W^-h7XrqKf2:#8TJt1
%"&0-l481P19'G-XU_*44T1Dsg`nPqh)8l2tK!T1QhTqu/Wae7*&_FrfArQ[3&0qSOU!-r"9KcGh+,Yjt#JMbP<V_hQZ:&*#Js9Q/
%:[^P>/q1^SQg_"3Sh79(;[*T[S?D]_G=u;KWR+,B@%[upbR/-g#erIE>X<HQq_qQHBnXec==]"@AsHEmlM<)4"kC]nUfrgAp"!((
%V\4:+4`!!DG[W<e-5="T=I,/9RTToOr!EFSFG7\CUrd2G"?\Ws,Vh&UhCNpbW]o(>Q5-q@JWT]m";QX3`',''YIaN@r2rTm"*7;k
%^c\H<e"pR&F8@dKNAG<_ngCbZ\2#lg4+ea@jd8608C]q;lm+H2WUCT#P:^+mAaQ%!\eGTYqc%.%3d9$F#kfW?RFa>(7P1Z4Pm*U3
%RYS]j4.@(aW<X^6U7(!>X$oP"/190u#gV_C?st,;U"/FZSPYN$*#k-PX8qTj^=FTGL5gq7o#&M@>U-rLglR-G"JJWU8XbQs;N55\
%O?#b,E_gX1a-'c4H?`$q9\#B1WciH`hT"DI<G=L<'7?eGGM5b:=3tXj`F.6qn(i)s[Cm;JiSo3bQ3-^)h-<RaEI>XERQs/sZ^Be:
%"]f?9X?;O*jPk.igEkrp:`-U5Vecnf>2r$%3pbVG3QC)sW(FNfVcZ_).%h"N-%s9g[W3r(SSN\g)40_m8DQN+g.P$-Sd13WRZu/r
%MMo6#7GGj9psdbl>(OWe?5;Ff%9][oN>GTN?6FN0+C&5uk%@]5[o@aF*oG&g`IPQ!`U4mT$^gHc(Ba"1qEP%(<oZJ;K-4b.I'=o\
%]d9PB;=UMZD!Ic]\H[+0b3E7^"5L6"Z!UI9;XT1A"D9d2W`*iD+f0NX6TUOR0DO<s;0g(rf-;#sHlXYIVlT9jAQGIU+GqpM=f&(D
%[_[m])Ic)V^Yj/lFHdY@oVoiBlRK[_TZ7(Jb*`,e)ZBfL)ubnF0[go"T(eVWrBh_s0f<d^I#):JW#G,fL7bF<L2^![<P"%M^%U+V
%Wplh:U="20_,u!LrG:NLTYRsr'b<eR&ceR$#Q\]U-Q*-uI1I?'+.tN83NZ(Nqe#>J\"X#FcheWf\P)2_Z>cYc42?PJ%BrVrNrR!O
%!<%^,ThRn^oHa`EUZ8>*qY99<VZhCQ"611YpOY11hD1sd??#V#R.",khN?Eh4P('UT*6!jFnro;DHKd$-*#"gd;O1Wg$c2VKRn.c
%B7Oh2Z[HZY(V]*F8g]PXB7FX0rq@Q^#hI#U.&TUNE#d=[F@RtuNT6m"&"MgJhL2#?Iq(Vpof(0+i@t(%I%JA.SQ'>Wk=Ntm3h:BX
%)eYZEn)l$qcXZ!2]":bZ8Y>b.T;;3#kC'q<g5Y:Sl*FW,5+`E-q=iKQTB5Yfq8TA)iiR"c'3)pJ"sN#e<\Idoh`u)Spr9-O:du3_
%Ht#ip'aI4e3olZ"N*Uq8=tfFO3!%4Gb!nU;aNgaMR#kLEaangA(hgQ$fi7aaSrD;KaLga<m-u*uZ77B]Qk+`Drg_M79U;[^rj1UH
%d1cXOG@%f>2`:NF8_F;!HjX-r-4$e=HjU[Rj7e/8H8_bnQ.f@/hs*(fjNVIXXB@/X]@ZiV0c/(g78bi;1ONt_j'\^spaHPhES4MU
%J(!!sRf"QbJ35Q5[GuW73\o@FXbo5nIaerA=1b0pN]/(MG;`VSEd2*.!Ufhp:<->G%O!]G-8*Mga0)??F[KgD^=u?s.ItP-9'L;d
%,sKXp&d(ICfR#uSZqfsH^]W66eu]7kYqOe5NtH3La8CDcnLeWfc.^b\'$<o`hUpEO\cP@9GEbdU\d/;U!]6^>CAMBf<Dr.iecX>U
%fG.HT']:`S^gdX,^ZQ>kQl?8aRT?.B1ERlEFC/PBR2ks3kh?W'8$>@3(o;sBdhfQ3f.QogPimA7d32e90R+5KTJqDb.+",n_#Vgp
%ekiNFoCoIhYT\hj&rcOkQBc?RLr#iE0W%K]peV/#1kOU,5]hqb@[&kVJ9;4G22pr',aBfmeAmE^Vs,'_V:e`HNTd!U\n;A2[HSe;
%c'0)5&`!s&&YK?IR+:aVH@I*.<G?5uaSU2*I9-0-[4F6Fn3C@m0M<f@J?harK9ZG?LQ:>q^nl?KQ*VmK-71m6$7`%l:4%R0'hZ.A
%25R3^L!R<bk8)e(O]@`Pa#5*0G@Z![[\g?kUIZV[UP*UY;?#5i1<j_sfYjfQSX&W)[g9tb**K'C*bDri29'/XFM`-!3;,#\"8]7E
%T1nK+lp'Z.i,17h[>ruF=4WL6*9qSls!SC,jpTWQk-$!"=:o?\<X>."UrQ%R$=+UoEW]G)-N3IR$8$&ra<%e/^WEE_kFc$*n_r22
%DsKh)7P@^,4a[I\$-3fU#A>,Q92Q07*$C'T4AbAG8T&M&YTP%Zd,].JU#Y7n/S$AEOgd-l2sroU4)S+m8cal$!Gr@NM":K5$FH[7
%";s5F.;mi)8E&Po#N&doiJ5i*/X3oKP"f&<QZkI]qG2q%]QKu<'0$qn,#H.u#l8F^K)V9tGluD4e-c8dleN\k"5-&j>"n3"Rna*9
%Og<sBUN_(5OSmWYH3eFi[T\s'!u-_sO]\OC?(m.hO3DMLE^^'q%q(RR/p^(/e<maM;*>k^(BMS=?V3]b2(MH<mg-SrYfEt:4p>Gt
%'$1VO&3NI]QA8t%BOj;0n.3N9!oNYqJVQ^05,h8YOM)7HOnMtkNl]"q'0B0DK3_L),=E^FNTD%3UE\P/4N$Z&_9K3U5@qc[-Gkj(
%Ru_jHMb;gRkFDPAfNZj.J4g&`0\64P(u:!6Mt$!W-J0@bc_M).WDOI':"B[V:dViW:a7MUQ)UE]TG7L#j7%"&EOTDSFAO5n'k^Te
%:'ds*#/eC-TLmreT1Q,7]#^3[!3T23870j:Ch^\SHrm6:T;LnR`#qd.hG'@%\Ul^gNq6/N!t_Bl@5#T"TFm?A-WY3j2(Hc'SlgQN
%S!*+r?(;#A$Gq/['70Y`k9b@_%XYIrk=Q^#NKaFie30i6,sS;L9GEq=?KSEUnk"*nS#JtXKWJFi5]8"*1+p+8P"^kYmO":63'aA[
%[E2(%qU.0)ShQpiJNQI;D2;Ic-Ga$+L>:Br.RF)@##_L*EqIGL+M$c+d>(Ddc%b;$^ZKb\C%tg$G(\Q=R@\XV8Oq]Qa[61G$u&a-
%9!3cmrQcjU[R="FBP2R%MtqK"M)'^%/#HOF4Nn[J,VE>HaE^(i`@jCA.8#khFNqPsA$h)+fC6#1kJLs/H\VRIZ78qLLfAIqJagjY
%J8]&X03WPqd:u/\@4?D<KYt1,4,cmm19]KLP_,Y*;.GGAm_%d+:'8@NGW^^l4BdToiNPRKo&qE8X%("Y8M<,d<A,:u3hG"B,2>2p
%KDg<O_OCP?rMP/sGK1)T9=GU*Y9[<"F^[=YY'B\WgLilc07[%E_+>9;"<]WmJI=q+??XL&,TZO4j42H'jKe9YY-r&]CSX7$e(r@r
%NJ9jCF'53`FN+$HiQYLp\@2"H;#Y2q+@UO1]Ub5&O!rLdp=0Wp@f'1t,(#7^KNLa=O3-TEKBPbMjaDp@;$EHT!_F1ZC7AtV5\n"H
%o"7qr(:S;gKM0-9BJgg%c!o(mZarR.0GpmSUkELpmcO)HLR/].l@c*1RO4>m*],um:;9=#0DdU3.E%]Kk<V;KK`GZk@''S!;K2J(
%Z:>';+B#Wri?`_LL`b!-"VGZP@>,dR76FN#Wo%adq$5D.rVp6-72-H=Nu.kNbT\Ac2mZ+KgWj===Eg'G2Iu=4g/@J9`atW.$N#QV
%LHc*/mkW)+X,!LhreZK3b;,#C*FUkAIA*tJF"&%4^f8N?$-O3f&ds<7hdE0^?PCR4a^-ikio>"+l!O2["eWEkW^N"P_jns)m#$38
%W7lr5-j3`B^C4Lk.+U5[Ggn%SJe)tk,Wd]Q3<&)4=DM4Megc*0:e:hG9C3op0A+gt\4O["(OYY*Q/pDCcCP0(jZCdT12*6NPSY]S
%'8S90K\8?YM9U3ZLM2fQ!fujsm)92+[B1pN1U'6/c)GLQ#Md+Q@+/0507<2BEHJM;0n*$onU)ntEZmgXc&ici$0>`no,)T'8uQ_0
%^#@ufFH7R6fCGihUl*$IBX([!*6CMLP>Hl7H:5TnJmQ'$ckelij37?+g#p%ZQPB`rdYiul&!HCA#a^c-d0Nd@Y6KrQMnsk:Z^hV,
%h25B75^F&477asg?OT++j=n/J8m)Jt14<PUJu%j!dCC(glKV#gg-5n4>]1<Ka>.u5BpJb\bV.LTkeU)gTK*'#*oH2:M1'sEALIR?
%r6gp804+gg-JOjJlm@hd(qIa_qsb%TpYmC%pbXj>:[890KmsT$]<hWc*dh.K,,^A4+dn1TULai4_WPeN:Q7#C(4k^Qoh#4":%\TL
%JlTVsjfFX)K!C>!@!$F=I%ta1Q]0&nq4ZdHrZnR47g3"^`pn.]Y2Ua-JRIJr1H6_(r/&^*0hXp(gcLmf-XgQp91Ze34o&!-=[smH
%@#TFWcgBGJ?hh)$%?jef-GJpt&7S@3'7[+'05^c^<@+c1a,e1Iqe8:/Z+1CsTm8f7Y9Bc\-RIU*<49gQEk0$Tkf$'6=]?6'8IW`7
%0DG$omh'/`eDPM$bjOEt[7/Xl`uq(Or@+RYPI<AsmaAN3b83?d;aj+&[8_b@8_Ar:T7f(aZ#/p?V@meR`^6b2"n;9jh'9S8W$tJC
%rF_H>DmlFV%jF;.UbOXP*^1eN?l3-1!Gd_kpdF:?Ep.8E'MVB>(pNXa/KL#Z]lFdbl$t[\M:AgtjnSTSg[:kC*"K-&hIF>Ll!Dtb
%Z"^X'n[n;[WiF8K(sPg:?h!H#BU9*^aldN6@[(@]5'l\5"hiLs\eMd#8=RXYWk3n`!.=X$5E?>5Z65\$$:ACN5)Z6+a#C#FTbr$F
%j9#1jk6b6BMkPqQ!QSi%.96pcFZmp?\F0=8hL[n3ab\S+E-n_5F)Sn]br*f\0QBQt/CGK?qq+fSG<[Eoo]Foe"HV`4--e2H]HJ'M
%'@"7:]O_b-6T/<Kp.T+_4"a['*KRflMe\VB^2\!&6?3*MXPK13:k=I%.F'K#`Cs1U*&Ii3>nPERM<h$mTR10d^T&Dh@k&,ZTR+Mu
%m"78-a88$6ESV<L)I\ujI;Z%nQEJeX3[O/76g"&o`.OcL,<T1+9`&,T)`4kc=$?#M"l.le:Z</rbZrcC)%RIYDkH,%>l/s2>7/r^
%-,6U1,0.)3(?6PA+4gV3kOo'fU5[,/VFO1RA-ftm+WgZoht__6pBtj=*#u>[#L`YW0"@/W<1DJ_?dlVD1XDOrl!9Y<i+i*fT&t\$
%@=EHBM]]GecURmB33"%ei4Ff?]Wl*c]/`.GE;17,Q;:JLo-Bf^E=_R\jrQ7M-)ieIbhi%N#Z_YlAdZ9B%Fo'`_(9*TOWs+:o>'iP
%^#Y\$X>3h*.[O@YeCYkd8KXn>'L6^Z:&ol:Si8%SYCAGd(ArWj@JLHBE4hVLkpNK$82HK8E.jp,I,4or>;DL,DRlSkAOq($iXN%X
%d0oK$lOd#4,r"+@OHeo[=b-Q!4h?rog=f59885To?$,6CeK^k_8s1;A9j6'Y&6n$.1?;!Ur%WC6i[.2oLe/\u*[)b,+9i:Gg4^)[
%ARBrBdVug`'UG-fELbZ/U.7cNPj1QXe$PW@=hRhSloo<L5)cY*>Oog-1$sksNp75A$L/t,e)<E-Ps['+iX*j4$K>1a$3^W@2EQD<
%i-L(5KfTu3VF;\KW(m?X27+g^Yd?K.A(nACLO"bGq8Dq3r=O0@?jNct7rnUSEe8VmMP=,dFS**98RO-9b*'JKHA)9U2mbS,f(2pP
%!MjAH\h<J<<R45"_Z6uenqlTC.I!58bK,p10(nr3h6Ko?`!.I*>EA6/*]>Plj*82fi[G^#C[Po"pS<Sk]bZ-`V=flqqna,>A0j*h
%%=JR18$%'@!%Z.=H#+oIDV.XCSc?PCh3a;Ea^d>1IX/u-UJLqia4UTSU>p6H^[OZNci@f>C\XQ0a?EJ3hCK!+OHg!1c>gg:TAaGW
%:&I?@?6HAd_cp+".1#5Y*u'72=r01-6:%"LE=N46q7mbO^h^&i9(s$U:'Ck7K@i3Bi,R+)MPgX$Fd'a>FO:E[:%u(&[_:ndE-;n)
%MU70g4(pN[0Rb"+r<lp'ZBY,?*Zj&>@>m=?'Ij2-RN*skPm137h[e3Q3qi^##(d3[IQdq0@!k(r:i*dt2_*76M]5Op;WU:Z&+(aU
%kQKl"F_rbh.2WLb`sYZh%=BB24od:"L4`e,_AD%DD$M48k%:3:;,r#u.VMRMh8.E61Bf.WKC/KO(Ys1GIrF)o6\QNRojG;tju6WO
%=@"j;RsY$!(VRI@VhLBmF(m9K>4rK@OZha9*:+uZF>K8I$iRpYh9[6'D_B^4G=GRR$o",+<9W8(WU$(Ye_KN`(I!$F*A*Ka_<X;h
%UMtPNnM6(i6;"Q))92$a[nQ:F/NV#ED[VE`.2\7P*5W!3c+'*qbX/]oE]Y;9bnn+XVLfZH/U9J_Rn,AY86&W\k83eNA1te2*IW`W
%?hg@bVA]pU+Hlo:T]**CZ6:e#d"<Da,V94bRVk^g$X\#)A\n^Ef^:(C@2qTd7bQC/[glQ.V@M7r&!?Yq?Z\*bUd1(!PdrbrgEE]J
%7"b+@LJUe!PeUeNra5GpRjeh[3]%9!dhh.6j$6NV7'o<9+nO/uV[raFM(4Un%)>oD49`;m,QmsMO:k[>TR]/S.YJu4pS!$27!EiQ
%F"(<RjBe(lin""Rr)_L>HAJf.oGaJmqSIH#e!?4u][-##K0'cLg`m(_LRsDX-Ge?gYV1)g02jUsd+(;*0BZBah[".;h;.V'eGDXX
%X;Hj+K\GsA9`*<eme&RTO*`$G%HTOo].`S2or.[M"PCdo6b55S<2K#HEN!-W1#=:G8!bc24>Ut(%u'I9];K+_+7`?_r/L9]S%ONM
%kC+KHlVq9\Mg0!JpPh=9ia4)E@O&'6/+/&D9U[,BNVk+TVs8`[TMro2NUs$>8t6s2M!%&,:F!cSQDZTLPL\,unW!-h&kN#2Fldnq
%p![fa++VhSZ<rL<&G(nQIcVI\@;^/6o6@9144&H*:4prCr(bG`2pV<RQ?Q:F^n/U4H^_D:.t*f#p1o,Gb.^a0N!Pi3D:*\Ogr*p-
%gM@,J`Lbr^PLK=$NUu;7a@C(djmulAa>3J"R58k]Vj2;/>c0UR)s>HtOu(lofB:!ASbCRX)kMf9bsWTWg2E37s%?[BRus=]#]9b7
%k&sNfnn*eUMt8mQS#)JO<uAs%duuFL/`)tJ5>C1-dm%^5h`,NlKlga-qCSP&6smE?_VZ!JC$OTMbNT]0NUj?./p_l!k<_.<o$SU4
%$!Y>/I2B=CFuhX2To>Qo0Q'r#99Bnl:FD&3),Fn(/R"`@)rE'=X)P*Mk7W]l/2MB-NGK4%oIeh&o'(o"NAA)N5eik$/EKf.5MTYT
%7";ekCsi:TX8,6\fK'E*-arc1PnpLT"Y8AS[Yj):rs;]FkpQ+_1:jd2A\0b'X)OuHrKOb5jn*3>\s_%;ko42UAKB4mca%"O))MlE
%X0"fO4g_Z/l#c%``Yj2-.2Et;<g6J;Fh3`Q^"DRj[M<JRF4qGQ7k":'!lB<PH0al.a#N>XhRr$K$LJleG+Y__!t)#O]T[GkaXSGY
%",[`4A3Z1N#Y+m5L;<j1=mi9iN9^>7F[I$P5`n;PHC$>'G6j$5+OcBf_!@D3.qW]E),(\@<>R,Kl7PY\hj4D_qG<2?G(m:707XC]
%A6W.t33aYYQh,KFk8,<_>rITaZ=)m!7`qURA(gXH5mmZ$,"`,j#XhA@:DgBqoI7q2!gp*Y!9^u_9Hff-6W=<kdjtN@2YX&\Qm211
%\s9!Hn52p7b:2,6L2/(P;j7Bm_T^)70o_aGc.k5>6]GAqL(j]nW!"X\Ma`4S@p8*t@n>h:MG^8#RM="+Ec.Fr2>#cX^(::4Ug&#i
%_t:[N-qlAV.F_X,->2IgV`';-"oL,2<BFL,0e:`@cfpRGg1`5edM]UO+5I1Qp3X2>a]m,S\$8"Y&c`\Ym+-u56b8.1gk0d5`!9_I
%d[02r](S<-\b#q[#VQ2)G81)]8)`+/U7Gj5i/ZU\O:tC)$nPmq#A*i[k)3NeXW2a6HCtd[TEB]NBXBj#j78rk@Y0kWFYLJCq:\lm
%i@&q37f0f&brI^q-*e.bm-pj04&^2;7U#O\^38^2G8)<1$p<8ha=a$*]D5`ilHh/gKEdKN(44Dj'@&P'bM"!+#DO2>e%2SL&E!UF
%03CXT1oXk15>o@4!,TA$MF]JbX]@":[:.F3[Uh9<mf6nUg7p=uo-LY@4X);r=!`n%U/2b,OT.3H-1IZJ[W,l5I2tm,/B0e#,Nl.)
%ON0#=rGQ(geGf4r3lERrQ<i;/8Q^`H&?s?4*#rd@hVgOY-90$kfMqrZ35hA*SH`c"\I%FhUE]gcHG^=H=b+]7#)AHO]Wtt]^#VPf
%hkJ0U8.&.EZ+X?(:ldX$<CL?Z_0r=5?71,Zk`F:<]bUCB97]nGfAHdNld:UH=;c%Y,2Vi%!au+F2OZnSbL1^PDVc)3<RkS5Cp19H
%JaW!HV7LB*/"k>DhR<M^O"W6,cDf_fU"d93HRhR\&FWLO-RsXV`]2^TAerP,J<7e^J5q;X0pN+:TNQq`S5RRkBbCFc/\D]u8V`t!
%Zsq3EQ2j1g"5q=bfOe18eW)+)6Xo,H(I)AH7KBA6Ifldb>Hoe_mOB4/K,&e86Li@tQN6(PDqP#4$(lMY$UYUO:,]^h0R4p09Umbt
%rDR\>$X^U(/:Ff8b0<.Anhdg@?U0.AHs3>UaArB8V(*KR47XHSChf5SNdXH[TTO9f(!jGJ@9=!)Ae,`ooR\fg1&-:eS'@*oh:=Ue
%H;Y>G49m+1'dKtFCWkrD0a.g_NAn'/BW;`cP`U:?QV\p$p$@%u(+\BG^FAO:nI,$c)]75Ys!lUm!nH9dbeh!=#Wr#?X,I:l/#Osq
%1X#!OGm7(@`A)EK8/78V!W`((P3FH$Y\m'&)W*DNPCOo1%_?-Y50.pa-WR4BHGMRlVri_V[<hA)r$X?Z(][BbmMJ:"U:MA`EVQ;\
%,fb/gc*k@]?W'\N/p&=\O0f$W:DZ/>5_LT#@DkNL60);/[$K?]-"eHPUK?3POSGuAhN,`eJ7XFX'Ed-j->.S]2KuM$Zoh(ug;NMM
%qOHuj0gBD@D@2HFoP6cV'qQ?[]EJ:/1"hGhG,s0*35WkQnr$`lR7H'I!GF'),FTCas35:Afd0uZAjP>`OKf[N7]C`b%-GG@MEj#4
%59o^#\)]hM#![1c_^"%JJSGASM(hL$b*"#<M%e[fN1R>4Vf^PF4S;"-`u+^K^;MNr2U(16fi39qZCb3lN?V]<*!>C3n+J.YI<5^*
%;f,XT0OJ.H=>60IIh'..IGl^qMAPR'.<,@=Z1R%UL+N/prX9+d`!_=/O#p>G7Dm];UC_&,iE6$EkXtoY37(+FV1=]Q#=hP7I#+i%
%O=S\Eo8)00%DRL4\LRu*7;RPdmsPTXCu*%R\lZOri%%C8Y46[R)8PZ@/.C#u4AnaNFLnb*nTXA0NN0<4CtNj<6=<*r(-2mOP6=$C
%UddW^_"IpLj+*8!\@ZPm.0:tnpH.t*j]%JY_g<,c=_NlEmEeb8nh:(5k]/2U<s2e0:b)E6R8!Gd:aJB?_+#t;PR!;,P<!a9!s\g`
%k%Jnarl;48i,<bh/j?`Q^(!kn.<^WG7u3nn"FUI>ND/$/"sYR$,hY[m'`_/&DH<]Cl\;Z+L_N+\66/8q\Z9_BCtaEUE:m%/J>e"s
%.oqS4aB*TDHB=k:MFjgJ<0#*HXEi:`N^rj2%![0l9._?lXNfC'k[)THa`NHM,WnAEFLs:NT62[PWT(tg95?tkjc='Z,_+CACJ`h+
%!5MB/]5`)s]?6l@'p6%$'sRRmoEZ#u?H3J4;]SK&OXR>PPuF&Wj#]*a`e:'F^l/n)i_9gV70];%&JJ]nOGFd8,7[u0mh_0W%YD5Q
%gk[hGW$P%O5k;`FnEf(`!O0R-.L!e@]<dLS:YWTt+%Q"eQfIu<*VM]U@t_-e(Y>&9]PMB19=LGVNXE.O9/Tn%qotW^m[,[ZEEiEU
%8_D+%`:k:Mph8/Sj8qYFR=66NZiXW<#tWS`7&c]".rkY)b03:\a?'f\EnXJnF:9_*S9W3WCDKr$C,687)&D*[\V:iCIXYFka7$6b
%h^#PW[E0s@m1j1e6isu[?C^hWJ2l$;"3^m;1"CI/>70#\?lR!/F^&rqZ.ZY.9\L&0(a2nLq[@eT=O9'Qq<0LrCF(CYW$V].Gj%rF
%>tSL[roLB*K$VM4oSGl`GY>);ZDpWjo7t')aB1-PO"k^#^Hp!RT38?E4ma(Po5Z7CF)\NirfgmZrD0FpKKi_=IR!BAiDnp'T^N"r
%I,/[b/]TWJraGDm2:TX&/?^O0-g(+[:U!jVHl98[d68EYl5D\p,(o-ge@HY-j#3[P-1_hRXZ-!k,k!PF;of;h1SrT5`&#5'Mm;5L
%0!*7G5'mTNkI!croJ$3KQkrM"'V>J(iZRkqk,nAjL#pUh/MbWDq8SPiMQfHbCK3].>nA)*'Vc\<s0+-D*'[(Z$ciZ0A:TpEMKtOH
%6c@lYeXP0JP9!QU%CqofW>n=(Y.\JIg)RA0ZW]KGOM+DLMt^q_c.pE,#!9-Q[]7'-:.(kQ7[RAk0C.DX#g#Z,Y3&ipZp=e_]1)?L
%XROJ5>MO"W>.EarIpDqFY1WsC=h5g)::Q7uDQpdX/B)oBKqr;53PcRJ>d_aKPV)V1CQt?8bd%Ni0?GNa!)u"cmML+Pr`&Mm1"!K3
%o@iSh<5;dGe\oB/Tt(EgPZ8V8&/l%R_\a3Ghg':19,eF*6[L_>k@^'+eCqC:hZc\f**L%9mn.VQ)7?k`Yd\9)DdYM2lJh)u^m[!S
%0jNuJgLPAiH6\jIMI\I23Ma.0`-Rn&R^EKi$5!>:1S[7`LO7,O5[g`%k"<48,%hlY:!%=Br%;^qnffH/^JXC(/PlpC\7J:n"Q%WK
%.K:?tf1ff>rHF2Wo'0c_/06H^Amr&j)O&&/;,FaD](D*9>M,C#dLBh!=\H]7W]Cs"L`WF.o.7%8Egef>Ro'U<<WQO_pg6oc2-mS[
%OC%`h;m2igC$&OrB_kBddl`(K3:lS7Bq_fRU[ZW./.-H.C*h#6l%Kkn\.UCLbWn`XL4mi^L=soQ<1NG0]>/bEQo(XB8`mLV7XK:b
%np[6]IQQYP^B*1"/>@i64=fAH?KH_Lc`tPkBF]nYJgIB%aZ$!?`,UP%KpqDuEmjR/_JO%II08'm$XN_<q'rnu.j<AS0"DNLn*ag[
%8FrT!Qh:nf@r,+@=H9iOOOOg$qf*"gerYs*WlZOqcTf/rfAge"#><fO0d@NZ=aXnqJO&-ALp0gLd@N^K7@Gg,)kd:Q>k4&tmk"H"
%<:rU"Q*d#S.2b4$!IAc`"Z#oi\^c;E`(Q]!R@6kbMrJlAr<W!5I%FQ0'!o=Q57f`qO^r'VNY#p'J?VVa!F6GmVW]q.&MU:,16@\F
%G.f>5C(:ORT:d)Ik)-VZ^R&K)goopq\_o#K=g=N/$DFO=QI9Y`:^jbq2ef,c/Q0!\RTapW;-GTXFI.7).#4]S;mOtaW4[IUMI/i0
%rXgKp&416cPjD"+KM`c@acoH\aXI8D3?&jGd;?"JDH)b-bAj77?IInT76W36(4ad(;3fal<[+IN.atBWVg4@6Xi/0\fpnXeRE&hM
%lRRq/0@D?_eT#;j++m4Q8fNL.(J95:hd,N%:ssR-JT3Bf:=nb+`8;99U),AB?TRIc]o"M#:pF65ZqoM^/-.RUfQI]/n,Pa1S+I$]
%+hSH!'="T0lo!V63YOep>VO;A^S?DP!MUhIjmJA4WNAc,H"cAS?F/rbk7Y)#G'H?493!:uJDoG4]1)$Jqd_%)'M0Kg_k\n;:`%+T
%4Ie/rOr5"D"gJ^8%I7PLHGj`-lccl&pr&1fKD#tH-X^'ejd_0%AgbgY#ht/WCsrZeZkr?rfCu?1$S!%`H\j:1RMCqbY1X0;\(qG?
%&?X?\r=RU:r4_OMK!b:MS_Sf?ieE+lltDJJ4d'G[jA+_4p^ONgpX&P(:I<As-XhTkkS^kuI#h*_AHgk5*>6fsqe&l;^EG/Z(;9(h
%3gEn/:ubD!?[4!9__[*18D'(**en2$`2jdp',8efUP3d?THU9`Kt&]/Kj$O,+p;YoYAK,HOhWDY97]W1*6[.cPQD+d7uh81Z?'EY
%F95d>l\_ic.3'R<b20mbdK;^rXWsnb_mMjWMKKG*:fTWDRWNPo_auKN];oC&qB\_?9kuFa-3q`E^p-A'6:\rH<nq5AEWo(`6+rF)
%I.!AO>OV&#JQ$!1j1We+Zm8Pc2fsTnMr6Ong[O.g2h9f:EU`a@o-@=_73<e/SrHWdbG6&\mK1#VhAk!:<Dl(DGU-FULEjV(<RO=1
%9-\mE*Dt6Q-M,_!]h0j)UgKiJ-29X"gWn4W:O!P+C0N8r1/ure[81(l2]#C]$cJ!u)"68U+BG+G)b.^=02*Em[EJ*4AOi[&duf"X
%+ir]YFM2dJ!Rg\pp2;fsA/@J\I-;ad-Bmkj<H];D"GS7=Zle19j*/kJc$`IW=.8J;=F;TJrWY-3/JXboKam5sUTAK'rkmYunZQdX
%9s^@pJ>"GCI9pu4^f&Q11brTF\[%?V/D$BI<Njg`U/;>tKk"kV\N*<+9ItYm0L5d=m/k5mihLB2h,RI9Idg-Im\-jr8UIQ/qjpMI
%p4SE6Y=NbUY$2<FYAT;@Dnss_rVWsDDi0@R&:FK)m"bQDUjG*QJ6bqA:=(S@6oZ%PIKH1=U^-4?NM>?(A%DQsgsaT;TF@^"(V+#:
%K:sjT<71s.=AD69T8N&JViGEGpZMk^Xl<l#,lDc`&L3:Z$N"*'pQ*T]V];qS-H<;,mc]B=`L@K-iDLpiDRrH1!QS=Rd%9etZWH78
%Q[\oMf=%V;ZMj;rmNZ+qOXO_^M+s6RTKKlE</[""-u;6&>5hi7mQePp6HpF&J=KOmBQb8&2P)XniB;M)X#I,UM(q;>?paT)2,YsT
%]fZ)`_ZV4VYn>oJ\tT+NZj(,U4HCO7Pf+]k%co?RPk"XB83llZNF=J1FE0!;$tM#.N&)7LF+\qUp[%:Y^92En;F*2'0`)&<[".eF
%jlrH(k[ir0ihZHa5Jn4n0YG@s#DN\.'B;Q7X?kGVJ%Rcdj)u`fl;85FGL_hQ+P$P*/LM^jC$u/E^q2,748ZjD_tDDeiMT%YM896.
%Usn@#KX;Y]%a\OJ^p+^EkXQEr46j(i2*`B17DF>eT5pe6N<sMCHVM5`l+X?!I[-kW%<:pl+g]ZU"RL-FmZ=0Tm;K5@mAn!'GO(=i
%oUl0YQiHdYp]'=SiOHT5>(ju&\R$5,N("2Grq6-Z`R0qeOe`tNr7FOt5JcddbC:=^YeOk<[g:+#:co``BA1;4Qs?o,r.LdY(/"9m
%Jb=l>)FBflTiT&bg5?gIJ],"W-&ZcIXEtJ!FbUk$CE@3+q$oHT!L`0?7u2,gbG-Ku4377]-rKEVfDdoWr)c_*]MFJtXp_u'(W?:+
%3SY$%\I4i*E=4D!oIKsWH56u,HB9;`%6Z>/"04+a@?iJ1_<glsH*L[,Sg/CP83\iI9'2WT.W_;j%-gYTq:/l@LC_O"*,?YKCd9Jh
%e\1j01Gi/$/PMO5*7ME`'H\0$1?a3NZuZON8u][_KHe@m&F/IURPT8IL[q(Bble"<\e8rbITsVp9gM4Z!rD+FH1Wkl7NkVn#le[r
%Yj9SD=4do4og6A^knsEL]2)ct[1s@s5\N&VPW:>*Cb4u:8'eI0]e.;a/24KAhK9Q$L;7MMFo@FN0CF\DkG#,oR1Ml;\YOZH]J)*u
%Gk%J^W;63]cXQ6Z2,DeCq;7di95JE(53[3+>1If/?9AjYq)VbCA1p9*)##su1#]n)R/CAB=m[\XrCs#lNTK/TImTugke*69g\tU(
%f:Dff]Zeq*:t)SV)18%0<]4uDN4aS[5.]TLH#3tU?.T`2-hq`lAY"8Jn+U82pg.I'C/Vsi#Umgk_`a)G3DgML]Ee>F[g(21rN@(2
%^\`m>=G%5BW_uiLSZ"2*(PcY>]"SBCS<\SV&Jp7D"A)iNho:Y+M[%ItRhELQ+0EB@U(prffj*6ccbBFSDTOPQMU>pab8FZ\El%M^
%Ati)Q4jH:"%Z;'!Nlgp-5WZ[Zs.7cmj7)No\bs$tFQm>/LCt#]LcC4KO4#!ad9qHL%=&$k4HgE?\NpL,VP\L28\OD(mEPisE:Yr=
%s/6D)D/-U6Ka#NH?F8AH00Q]P\>Qc$HYOME^M.H?:OFeapdCK=iQM5[4'osuU][+l?n3;Ff:oocmkZL^jnu?.X=3riUP,cA8#\14
%FI)?f^\7pPRhm2^$=L6oBG/JE_r,U^O:\r.I#[&k70nA^Ir9FQMt(Fl]BEacIfk]O$IBjo7e:O:s8RXs[]ji";H+pi:qG*XW%_Z^
%k]C-plLb.o56-P_?N_.^?;*J11CO6`qXY986nK,sZ`f/C:GlWj49?+9#tT^K2JXI%pIn+u6RHeoJ!C<C=>K.6D?;#o2Clb[N]&$&
%I1[%_L_NMkSdaOa!n%bEDTftf982)A_</$F4Wl@_#iN\30oR3,bVM@g!Po6H1)XVZV6KD5J@,;c]h6jW4aC%AK*%i'e,`c.bALC\
%HE(,2,p6ae!MQ+g+=oTPSM-N#?F93R2c]6,)9hE$^Wq<FON[qPW\dct!t0poD9+a1:Gqbk3QM@8eRa(n(gRW-8uu"HMgj0;AV<"h
%_k8n/D<W66aASWFBe"q1Ss0uK'mgLjab7K+KZjf(5o+Np2rP^/,]L4sg7c5elh]3\&=]IJ]cm>XT$_X?5Isb4N0k*1-Q(>6OQ6Is
%bYSd?Ah?UrS_$)O(hjF$FH-8`?T"lK`Rt?F_p2ld'(PclQt*PQ"ooJo+T!hpi+@(cHMa_,;;VrH.'.Z:VZ\^JW2e[t@baC09k/'G
%'KG4Lp+V@/&AE&&1)3;h^TD*m=l"uGk@tOC)fn?MIt,&'J4oM2lN9[]b(1_W*tSY1E]WiXXg#-f\7!bS`;kis9"?jadAD)D'BFa#
%O=_UPBO(ki8#n?qiGRDGl6$4!=5H#R4k\jFJW85c!jU/ZfJ!5`5U>3$(>iB>7.dBp\uMf@MDuH''Y9$-).9Gi;Yd7Q#&Kbs0])nt
%&6;q!BU]-X]J1O&-3-SW"Z0+"\kZ<sPW_^=W)9Vb(';MWH6uhK7-Y%dnhWE%Rm9b\j974rIDtJV!*l"fo&Ni^E-W!'ncOuV/u6a>
%Dl]X'8]"UPW7L?":J+DAlrlta#geD\g'^(T,%X2'B\Z@F[K1am3(Q97U,_eP>T0\G=?mFcbE67dr%.[:C.\RY8/6f\EGlCl5'K?q
%EM@7)mo]W>YGp"8UXH"_)S`U9Gu@?1`Zk[+5R@1i3.uN@q.AQ\NY9UtOiRW1opM<pmmFjSnVe$XBfp]%LB7`g-9r918B;G(OPlk@
%+_D]r=5iO&e]Q[G^c7QD*^,,8^qm\h[_eqe%j$gP[J)\5_dSX_(P6I"5F6+j/pV`F./Bd+O+k>O/8WT]mh"pGT>.XDIut?(Ekj-"
%B%<5s^;H=5$\/UKVI1ER)]'\iK)+u?_'oL5*"h&K>m,dc03-H\9n5/BW]l`W)%bMGWnfhV\.jD1$oVW\+?\.HKc'h(;bKa\JhaD>
%J-t2XHH?d&b/.ie!19!nfF#ob(_6_a+Dm4@&(&>(CjI0()HFEQM&qBR"VHSJPc5KRdf$^V7LFCU7a`NQi7D$`)(t_%K6gt_3S5HD
%L(cFsFSB!E0<3q))bX#Pqtb;`"#]D4Ouc[`I8qX("+X>_gG#F-+`+eDFA;cTO8"R+B\^5Jb8YuM+rV?=#=sB]6blTu6MoJ_Eq4?o
%$;>LF51FZ%E0=NP%JY)!EA#^_:T>>aLG4A:W6W])h^Dk4J?>bT*UF&>:eDBToF9;;>[OFk!jL:(f!g\U$<IFDmM(&$0UASNQX[D/
%mK8gj1200M_,qnqdU9L;m<#[Je=L&nTIAdX\o?4DeF_l.Gj/CK*_*.batHC`k.HLp977U5L]R#DaJkN8O6A#_Y)8`0Eft-aXXL.S
%?j!fZX-4+bRXkO&='Bo30DO.."tdmmb*Rs*7^]af[(X&rb_(W">Ob*Veo\#s??,lP%5Gp5I"G)nU[d,8^fXK=CdKEd3p<oN(L'e\
%%T;9Di0[W)8r$nG9U&SKXI4-af6ML28?W+Of%)%%M5uCkJQf-A_>5?:]-<KIpXgj*0<$R0$NS:4hYhh9lTbs)+dsU;&ZTH$acfFm
%Wlj^uS/a@O?npftViN;r1*Rm.J?C&kZAA6f:.m8t:7EDPi:W%[leqr$KDsk/^_R+4Qih-S`)4R?l7^E_*!2XS$%Q5-"JEs9D?-'g
%g35#SoWok%ob.gnB)1[[!,9a_l$:I6ieR)2e!rfm+k[Uf.!W&I\Kf)(3oENne5O6mKIEJX0N2tb+IVh/NgM//!_0pMCaX#m<]DXA
%lah$;!oQ/:PB)&hjJr8+*IJW&+kjL<+Cja=e$N@f*<7+qWF/7*Y[9?\$/Q.G\3lD-`,]?kFdT-rG$7Rek06.$cCF.YaD#ckWWo5p
%KjZ/t-nc]ieJZ]_@O>O]/n-F0V:E5N2Tn9!(Y`1K(%_Li3nmB7c5eE,=OT;bEOl-RXK/gF%dt]s]FFr/QQ@6JrXdDNhhrk=QEh1>
%k?p4]N!A>F$R;B(0*r*+fNK8@/)Z4Yo.CFf"<a+V5r]JK"g0nhPt5`0XEe!_adtH_fan0NmDmJ>2t2[SA=NHardd)$29Q?mF9$nE
%LP#6tLpm@t6j"QUA9C([=6,AqkZW,[Qn=#u9&csDX('pLHt4X[b-LUE:Tn-.-L"HE;.n^$gkA;i\C,ac>5'Z!9L+AS>l]8KC<lM>
%UPu8o!)O>dRu)qr!3RFZ/sCqeS&d(s7PNh%,ZQUAmnLb(-Wj*dVmK+[KZ2>#&*c9bU1nG4hV\p&A\W9]@gf]kE'Yq!!pEV\k99Ya
%->!qjJu>RuI[Qrs$l[3cSJF5#piF2X(?1bPWe1#/rT?h7<-P"TTd[m;JX:lu4OuLKWYShXCm$cC9n=.!23CA:2L3&Ys57k<f:`"`
%c$D"*o<aX'+c[O<aOm4Dc>lo]]_%Qg4ZA4(ncH<CVkoaRI_FZcO035^HC&TK#:p%lUOeABl&]jPi<iBO:ms+r/^Rqc/]Zi'@SBYm
%U+][4:PqDk<TmEgYr^_7$)?*:!F6T6)(/'BP>.!-Rss.m_XMM9qB,cahiPPXJ60mi<0qL@PlV<6PlM@5b)HG;_uObV4hsU)W!@f\
%,QQ%$j\Pi.5c(),JX!<^?:"PlK_[$j"k/THr^+O-ILfZuN!grfs&9A,9?2Ef'aK90%''ACHNNt+\<UH#]D'n`;nDiFo28Vo]6gRs
%N/0i+dXCHg/EMZ%VeEl<=suG)#4*ur*o%ZX_eQY*!-!'RaC*3fMV'?0_uKlEE,X5=jWOV"*WSW<0k!^m&GJbJL1ntUq)BTlJ_,Ck
%5tYr]BB/l"9a)]4J7*1g(n\,Rc*YT,pGJ)9A2iLe^gOA,,FXICeEWXUP\5BfMGp/,XRF,J0p-edn`8;MB"?&_0BTqYcA6U]Q3#e5
%+fC9L4\f,6Y!o0<72H*N)pQSm!@)")AK!&8&h4"ad^=!=IEbh,-V"046NCN8-31<J$]K)Y)pNbfJAI5*J>/*lk`c&u+RFD<d/_kG
%OQItm(9rt[563<@Z!.N(%HNA#nZm@?<LIEm'us87$@@iDMN6TCWq$RT`SfMl,(HeV6gO1eZm>*@>3DnaE:8JQ!V^aTn@$kik=33p
%a?_2gc'u3\(3^ZZ6bmRHR:WG1a_4^-V71N9,rOQ/f]n8eZ-uJGEo3T:j4o(QSEBTo*+#\M]8@DXfmh:+B&D22*RaPDYu%N7E[f9"
%dkJ#E:d:[d'`^dZ\1U"Gpl4&c:h)Nq-X[$c+^jACMT\(Hq[!`^(WUXuOL7E*0t7VR:E9&O>i(aL&Oh$H818-o[>#15_4(X"Xa=Js
%+FQWE?uc20!3d%b95&kQUJgbO"dY)nGjB&nf^BjkZ@_?:oRM]Pd(IV<.-'PTFU-p_M_gTkp2'utmrkf':h]L7%7=B3lkLI^Khd2D
%A2tq:`jD4RYU33qg'.u-o@O'X?N<>[\P,#)OVlDA.KG&C,W4^`+?(JDs7?BbX@<VmkDDqdIT:F0HeBlbB'WQ$fVh\s?i?uE8:--9
%Z/&Vd`;.(51RPU7h`dd>Ddu(0\H[HUK\V46+:kA@=)nh].!k8tT:m9omFZ%SREp$BF&k9RgHK7!0^juj]"hR3NQqs/I,!hBnWR`V
%1c$<=PjVfgW*)K!kQ)ri:Old!b6BJI&9c%8iiplC9BQ,l_RTXX*F<P%/9eg3k=9X%asF=VX,@qUVs`SEoJkUXd2t%JQN5A\],V(\
%^e8L9)t9b/c)U=0,6SJ<,rAO#-N>4(g67]up:,SP(`L(SpAi"=-f@I)ZiEHM499DF,\uDs9;S5c2(g;X!W<6R68d_5OrQ5(&3p4\
%Lak<VgT88,'Ubb@.^uuSF2!3A3fEA5=OXdV"TZ>c&6r'f91!`cSoV[a_Oq$fE`</M/ZP<n^^et`qFo:O>i&t]AT/`.h4*bW7'Xg_
%MUGc*fO?hF?0g.V0)#-YMn9(fNfOD:aX<N[R^[A)SlX<PYS8[F+f!u;=Vd-!L/'BNJH$<PI@UG3A^1;XD=Z+K".HY<o\#5fIZ-/(
%A,pj+>Lkqm@A\>rG3VR."j>_m)`jgl3'^JMk%s;Y=+h%-Q734K=Ls[$)Sj_[5s'OZ+C.l^0l93;G1pEp\o+ma(bd3Sg04t4B';3q
%MohRc>f7D1Dt)H=k.oF:G)^98M#+[&'d:18^O8LuiJiR58+XDE,foWgE]?Y'mNt!qXA,,<KEZ9Pq#Z(Gd@!$%JB(AhTkIH6I*A*G
%5R)QoPZj86Ts+U^D6[F-P?!dPg]*MXj)n"MA*c7)nIK#-)Y6HIV8hBoh>Hd^:3Dm.Zo[]D.T;BOqAMm/&&\."Y2lV2UB&_Y7%c<h
%U:%;_TllN2lo.O\V;2$d8olu'6B"'5*LANA!!0FI1O76.WpcY4KmD;>+AWZX09kl3:)aWZ&t#??ji\M:O4$Z6\J/cZ+E^O45W0@9
%NonR<N92]BpuWN.o]=5,#V_r-cCV-kiEu+QOcpJE-/q6b;/\oCWL'd%l[XBCN4thYEB+CG]41H9Z!i];)"5T,^$TaBB_t#S0u4`@
%WJJ>2]SqP--H''8hlXYQS?>b8]M1--h4)>_*_!*?kHQ&/-L11Bq_m.\8%1F0e`ZgWgU4h@+$1O62C,(^Nt^*.nf0m^P6d8f`:rdg
%;^_M>6?h<3hLq3f&jMErdtTX*4H?HG=F%Y7BNc,<o7bK'+Ktjq-U+@/`)+Ik"60al)uSABF>9qA*XKNbWKV?S0t8rRW#2]j$i$tf
%"_X#60CD7s>@q;.<p'j_]4#GTAE`\%dapX]m-:k+J<BUK8"q]$?0gZSJ)PH-W2Ko3?Q;VKeFP9+cRhCYE#khq/P.:LA,CuImY%5#
%9DlG"T!s.BI+!_.oXsSK..:_G^=f/RcXVr0.^g/bUj%0N:+Gsso0*K'W?3tkH#3@LSbMq>l1j-1P<+3R]T4r]k^H-O[TO+;Hug'o
%`'5<@36LERo8V1(`<1sYI2@UL@ITo^1D"KeY;!G6r.<8N1o.K!Wq8e7X/CK]A?F\lB4UeWduWJt;?m<@h%8p>K->qgW)GFO#6\iI
%N!OXFZ',>2pkR@8`u#;BLO(jHZKY7_r#;r^n2\O]HgX^bTP?O_78Nl6AZ9=q=)U?dRGr*aDJNOQ2[q:41Mi9HJbnR5+K<jp,?H2%
%0aD+\m7-p6B/a:5dpSHt>p"U+=oJ+f?ID*E7(gZD!*2rg&oD!'4<cbL,O>?2Zp\g'UL4\2)oEfg#i5Q['B[uJa:lb!KXo0bp?qbW
%BRE<#VP(-Y7_JiMq<+i>a^/sHTe82#+lQn09jEAS18Ls7)@kHIIY<^O(QTd-7k?b;LGL'uqft$:dP.>3j1c`lL:cEW24HQ(,o+uc
%L'.!1a.NBYUZ!?EMlPsCV;gs3#(08B[$8BZ1Fb`Q_W\k!kp)<jGt\r1Ek$&g,d1f>Jm=Z.o`cZP([FdjOT_?4RZm=`Z+GPM@ajXo
%%/libq+"p:9MP\`%14+X^mSmq3P#.`oO?OWQ\)[a2Yj7Y8qD=`<NlZq77j[3%7R-1(Le,@%`WZg!';Ah!+a"Vr3'5qoQ!A[5R-6p
%Y-HMFFQHt'lY^'mlImS8cmshqJ2[NPh-OFH&doP9n<lIt7K"s\kA,Oe[$QB*M^pBc0c^-'=s0Y,B#.s[#b\=Ta2$&;'I@_J94_"&
%aoc\H_dm.@QrU;pS2#'EcEb\n>SfA5UO,%FTG8q$cE%'[HNe#I>06Bt)U'b8JHH%_7B9=o:N+]CcLt5G+(f\B$HCT=,:cJ,%h\$l
%aAU^_Us/ph1NdW#R=eATrURb@GBFVQ^j)qXP4sZ@Hb7Z5C9aO2eVL>io.0m.EaD5S-M5edAl9(,fO6I*M:+BMY;uO`50UQ=/Usf0
%R\8_CPkbkMTu@4d'VmVJN<'$l>Z9aJ+/=+`J*V:Rm$69(Jh>3jIlYUuZ?l2)`'as-XkP?Cq<qW(#LeUgBiY;`:i7-n@eJ_]W?fB"
%\q+;(>b$i]H((MUlaFVP>,;oM_"?W2gEjm=!!_k"]2\).!:$LddZsTIX.h^ZMTZ1c.;kKt[/_o2E_F"/5E]#R>?'8_k",R::Y_*a
%?s*d]fQSE],7'9'RR\NU/8ADUkG14?jC`uoeh3dVI0rI?K;K&4Ye))UbI;)`2CA:X6(;g_I(_f_@qO6Q7(QD#5R3,\##<BaMZ!Pa
%:D$V0>/tYhb3t'CaQj05m6*1F0H>lnLLEAYcW6GiQ(d,W:1gk2;Spj_jj1nb@cl\1H,)]746\]QrB[rfOV`dfak)[W(TnZO*f\k)
%df%,3,QLr4c>%@-;S`&b%QQXf3Lgnr7TM=tl0t07E*u8Z9Nb8D-12DIg@tkG"buVPs0!mM6h8RM,WFkYj6C]k6h_Y?)]MY[rBH\c
%F&W4DhO2kaV+1kJh'3(Un6erue)LtQ,7M6gJ3Me6YV)4/!0#30G`WKd=-R/IDllSSCUg<HThXfBA#Ac*Qk5Pa!1,+jXKPcPZERD>
%m^"UmngP.A:uP-'ZSMU2^Z-VqUM#/*%ad^$e)#l]^t8l$'cJ5b(BAd%i?@AaKRIeo#n1`l1qLnFJ6!7:ic>^_!Tb62L1q.1M,V94
%GZd-;%CH0iCk;\Q\76V%3bHN^i7CdL$-uU;`aH:6`(0HY\-"5dN=Eq$Hm2kfpX!&DL\r0U>6(B3D.j4"-YLXWF!*DqijphBr3D4\
%<rnTFaE,e9-^K=bWU&*R;?4^*j%*rc5/W&d3T!at:,G;P^s*ZqUBaJ(5E[gLndMp;L*#je4DC%udSTZ3+'f&8qZ0%pP;8285j52h
%KADbe0[$99_k/MG0]NN/#7DQKV3dctW4E1RalDe"M018OJ5>09$jcH+InfG49#>foZmi6,UAE&3jBnkh@+uu1^k70i8D9I@TZ8<#
%Q\4i'/9#+W`?@9Zs%qFW&-9X,$@FGS-E_UG<%thlL(^+>QI^SC3ZuZ;boo)o3H1*OV.,0r^NP-`%":q??pL1PRo2Y"lA9/p@A;LU
%eJk\C19dRkCRqO-1[)[0a^,Ee"W7"E5:$k!ig91Oah<[m#QuG=G%:\;.7'QX&8@EOcnOGmpm%piMBCjqY'`0][$AK;N;/f;$3>;d
%o3Qgin_c2<8;lhDZ9A[X'b\H(;)3<r6Uf$O#Ys=W88i0u0#@Nek1qHu)N&^)-\P;*+<FO>7O`3SGQ]S.M:J;T2V;,4j[;07kms[8
%,AK`V%gWSDZ_j3T=^>)+T_DYHYC"R_O<Ia'N8=iX<m0bP5/lk"=a+BqjI$pN$CZk__%CplN%hA(@k$APKmZ0PU&&.qnN_)GM(!>m
%HetKJC?3aiRjb/8cLn0rmjP]1X:?\#r(,Zf2o#p^*)$Zpg*8X(GBN[E`W*",qT"b_-i%ghU1>S%N4LruNA;_a8^3(TLV(d<1T@V"
%.o$UjA3PIY(m^M9RqZQ6@Sat>FoYKaFhj5"K[)Y:?nshF(?X7&N6r:e3](,R8f@78E$0!BJD4p\-KbN,-]s@Ep_*:A_ONmg)eGCc
%=UeQp7g6l0@!mJ1S)HYa7)-ubMN-1s.QE3fOuDe=@rqkJ`3.&iKDDH<"e+YYA-WI'^t//g7W!#C<ELm[c/TV)d1aHFO,>UO;o$Ah
%?$*t^IJ*MIpr+Ak\M?7W%R^m':BO,mV8mL6_`mO.4&RKr02DV:Cn<nY7*iqBc\cG5.)O+lC;?2H%%[]bhf)%lN0P+)A71Ih!F@Ef
%(MS"4_9=1t4FgSriXM^H)h?FM5(:BeI5q9D+/_4fq]q%(FurJ]Yup=EPd:dG2K5NC?u`'g09jj_Z=?P<,)7=Lb`gAC_aSb*9PQ=O
%W?Y%dJB@p&ndX-mitmqgdTi`$+9]nl_QL&?"E,pA#\opQ!QOu<#.g,Om<AD\1:dO.TCimP_"9'`WO+faahu+P>VqIp*"?sX/>m-0
%r.Zu<g4eYb<^6Z;7lT/30#3R3Wai0>YqfAnML?5g`%R(Y8XPIA.UZOD`u=!kKOM%!n=k&&-JSNKNH'Iu;FT(6j#<LU=,Dga=m9A3
%^ZJE?.E35feGj=aUF>i$"6]fK8O:.QhbZdD:3E3rMc6(qQ5+VhZ=_RMTbV,i5g!Vl//U@/71TH#go<#ldFBQ)*mI8q[se[_>*Nag
%lOF?7_%79dl$A7CUWE\'+2?bC#:7"W_h!CjW84Se;I_Yjm)ICSm3#D_E#Vp"-"'"Jm`06*UTY75'N!$"jJ"[E,(SWI_eb*IAk:%$
%*Wq[&mfd7uS&]G,UG&ES^`"KKR'=,R:?)=0`nl=g/Fa#A-n&Sr5+1ZHYLY)DkfMAIR@1MZ]E8G&SutLNW0'[TK`7[5M1FiPYAbm>
%*l"D-Y$C`?.;l,iHl>PX#-LEg1"=2/9ZVqBA,Y=rPEd9bE\u*$b.F^+HciFm1[!tZ$*+(0Me/un\HisbOq;<-fdBciI/J`hmYTJC
%+^cY3pbb\:6$TbD'!Ptmn>pd-a?cOu1>l1+N8F%m2`=%O4Z309Ck>#:5hZJ]G6GD+Wu\F&9mJ<3^S!Z7+iY^U\**R$d/ptS/<$!G
%la]P8s7ccRZ".-k(%f1fhU=sLB.rXhERN+'m57SHHfuiciri1I3>EtA4SB>;`bVZbc"?[OCV:aG3>J@_p]]PpVP0VESu"E1MuZXl
%B3.Yfh@DX+ZI@TM3O'T+PXA-E64l-jGALk[H(L?W%'JcqKu#XemX=$*Bb'CN=NY\%-<:fa_jLsh<"g'el8@``.Ko`toGmIL6[)I+
%'$N(RRc$mDa&"nZ8M7i-QaZj>8QWa>GI.4>q!NogLOD#4adr`GLYcJEDrVXAFQkR+Vr@mG=7"-9^AG$:Y)c*[s*;7W,ON'7qb]^H
%P)mWoG332_5LJ;J2rA=ML<T10oC6DBZ&_DDQ)lm"O#`+QY5Q/-fPY!uC^8a5LYN.o0>Wfdo:>,2NMBo0^>Ma_(hkcrn*$JZo22Go
%=+dt;F4?c0qrFJJXX`N)`br'4<j'jA)nqeG,\,IEpDLUfff`l]:N`7F+W@gKhQchP;LRK7=^Q3[i64Q/#i6:IHjOt4mCFV@ZBuNt
%<G@"*^Rtt6_/+Ho.]N.>VjeRm8\#=,VS*d[btmcA(BrnaI_g49-T"Eg94e;7-^67[73@jp$A#3$7(X"3.*I8Lo78N?Z!c)n,]iWq
%lGr"'+LDpX6`fS)0$(]eYE%!"]XrX1(Yr1m`.ef#8.PI!g#0[.()5Mfq8P*p8\ct%jIc4A)b[rmnZ4W8,,Rm=gT#2\Q@4lJgU/97
%OPHA(jREVla-Q9Fd)4Z^LH`OP\m5l'dF*D(e1Mp<j50P?qns8@=?ussdB"=MdK/(.#d+Hp7+e:EUD<s9Ec'(@M(SS.[KTWKPu,7m
%L!oNDQ%c@E6m2]Pd)c9Rdf/Z&pXgB1.Z[CVb'ZWkKO1<t[B1`Y13'Y-0gSC!]pc9`4MJ'h+'+(QQr0.)@r&RS>Ge^"$>WY8oS-4S
%#$A,Gi=fR?A)1Ha8dT9]+#S4l-'-HB4`&V)7hZe+^d<MH6l3Nf3Na=];]qrQ35/?aPr.AQ3iC,)cgU)Q#m0604MfRA6O4[07QY5l
%(tJQIl7<an5$.7f?Z]53(H?U7.9LI?-t^2&'q+"*SR.U1c4f`)/pb?Td,mO!:Vkb)'(MHBMW]Or?1QfsYWm+jm*_N5U2g!F^1,ML
%^?6*`EQPcj\9rf]"m'_q^[OZNnBK9>aN.:&B&Yi76\2c->'VG>!&6V#TJiFpU5u/gTV.*:_<<Ln:qD84-P0>hM?m<Q;<*:LIc63&
%:^jb-:#?rn_>(fuDBf:9JX6Ui#E4LBO*BLihda:q0R[iO<]6m3+49Tcd<Jg?[u.%[Wr;BFm0d-?!ZHX<Q$R\I!\lUmGYleV"e:cc
%[gcLlNIARfT@fkK=J'Wg49RaN[I)l]d$cCE%iteV@4ipPNA#\,9m;.c1IP$TkSJA\3bV:[k.qW1<o@;(0MZ!MU7:Cn%;,"!Jh^m;
%k1]7S2ff3@YLR4c^Q:Ue,JiL,b[aUW3+<'kB]]uQH!:b*PpkUeE%nV*pnA]T,S,ns!f%?3G-KEYR[111j/0![btg92re3#:ag0!B
%nF.-N3f$uiTN_Q/$4%/jepoK"kE[j:YXKp>#mWd*H4"g=IENekTK+[e+U8$K?m*5'V(Zr<935tfOQi?g'lYg]XG5la<#d)&5`D-r
%7)(BsdE@Fj^nGu]q:F7DXNYn)'2_q,;/cf>XQkCjJVPBFKeL#W@Y,0#mA<7KS3r7T.%*L%&@Vt`^E6q\(V]*F0rH*n#:@Rn+[Y]q
%$.,^XCN69_kb&#*SjUKdM=.Y/mHF+T/]cD6,`P<m2_`/X]'D]k6>%?I3j^3*kjD2JTHb.3mY0';:t,V*H!tNe2MV:XpX]1g+hRVR
%I4M2M!u$\9)CHZ'j6E>+!fTa]6\G&_/\424^%>jJc;2@KS*CFW-j:V@2Su-3^,9n;fT&_t<YdmF%u8SZ^#?SgKm1;@;XjkDYuE:S
%&UMddT(/f+]GK_]Heo-TX%0qp*S\jjl/Y5PQl=_'.VSQ?T;l.eL-sqsNUJjEaa31L[)>Nu<R1K_T$$;G[SJdS2pUG]C8=b<a/rn6
%X':Y!Dr@U7hcKL#c$s07M2].GCdn\C^eF(8D&q7SjYS2ug2e/P^2`"OdpYXU7s8h1GM5/;Pru/nS"-'nP]*)d90fMlXZk'`StEH]
%:&%Mb:HT2dH0?4/rNq]^hSuY[nN`WlWr8$M`iT-uSS#'DSG-5>2mT[84c^ub1qi:Sq6896-i>g`IA=Hc&*7^8e)U%-+\m[Lju%[_
%?`Cdp-)Zmr)eUjAAtHG"om(LF[$.@Gk397NDD(7^]RFA'fgE&sgIhB+fY#]0]=Gc,:;#9"_k-dcnn*-gghtm@o*rNQdba?XC&Hh8
%n7a6L`Yj2YG?gO-TDs!hihrW%F6nZRIrk=]mJe-e/Wrs0fT$:S8of@O51fqXl)##Db3@7ANA*E!0XZ<^_I]!$95]fJ/Phq?(DaVX
%(QE?dO"E%`38FKYQ5D(DSR*LE4?WR6[N'R=Sp]RW^+A_j58ajFb#ED+^MJc$oTRt&n``pBNALF:!5JJ^/CdZU5J;BO%"J-RCg$f1
%'`,feI9@l$h3uu_FUb7XdT/u1DG=>^EB6@5j*Y[F9=l4PSqlapnA![<Q8_=9:r]"H?17!O&*o+]kLoIR!hBg4>@$m`H5:h'2]oF\
%SC*\R?f=fT4OdQ4S(uSE]fFSrU?qNbqo&9^$9m;EE"RI=C:_=SDl`Kd>m(tm_8!MnINh`]rst8:2.Y(R%.G`_+-R9I5h;@bB?65D
%#ZWL-N1:#rE=[p4B!RZ&L*RC^W/+?+=GXOo%10V3+XhU6@lmB7j1tTD!3d/AHiu^L/j%2)ZC<QV-O53K8q<jL:<lJH$0)EDPoP)q
%H\5>[C@[#A`TggqC8tTRGT+V:cUm!ZJ<V;Ze(bfSMc(,-/9^ti<6[K-q9oY,&e:JS9'%/5W#n92%tXRYf'mQiDiUd*h'3"[pt8?M
%[oTg?O@sZDOOY5QE%tZA^(Y:uW$[/(5*qLW"<c&N1"Ifn_LUp!WV"c&gWcTJ)0Pi-:r0ep+L>Nd\;%>om1,>_3<r"9G-F?8Y(<9&
%Ump%<dar*GY)J@:iLc_W2,1Cs@[dDVal_8cD)=MD;lt!4Z7KF:#IT,$NN_1K1DN);i@MaZ5p4Mg&;KZ7jD(^qi/2L&/sd`l#Ce09
%Sd5;,e>dVo)?Wee6BVBqTn3?,0AUjRac:3BE*`23Jh\"%e9HTULkM(A.>HLb?Xi43YU!Kbq<-p6&K-,GB*]_VEBdaZN?^$P?aujF
%+I7UM!g`3E<H%WGf0(mUD1)[KNnJ]n4#?b=A%bM1X#4FO]^Is*R$:[X9m8megc5k0-JSNYi%G[[igjkL(:'.n4p68H-b?A&Z4.(>
%NBE,T]`Wqq*-`6ok#-PggmPP:8l>p#6PTT(4P%g7^Nju]A22@=Ulg'#"=]k3H@+Q=ZU_V[-?3TRF.;_Sh(\qpBO`r<a&>O%4X6CG
%"/dhklZQNA<;h+XrXS^L7a`CY--eFkLa"FNXm>R.!k'egiJ>s`&7=ESib;.5ZpiAb3o@!q&>)8MIQ0Q%"O?G"B=BN),Io?4'^h2a
%ES7g\f\)kjMtZqDdutQ%e%+:]?OWohf5C=h?4HrQBk*YA3i=Znm4X3SVO^ajFQ<ldiRA'f.+D'7eK6$ZB(mqt?0EG.e?YsZI=bh\
%U0b=437Re8lhqt-CKg`%I*KMG3?VY/QfMZVgqg;A#b(*%%9Y4oJ7=t-29qe>R71JfdKh!-VE"%-KUWk>4\\uBi0$TF]8i5/c[TI&
%AAD#d$F#lPTEgp?2*rEK&lNrTRQS@E]ps1JDW5@:&^>2JaTFjm6T"/B)U65bJNkN1`dh!JML(,<8.shMEu5>%oJ=)r0a^KpKbk"_
%I(K;X<IP3;6r(>D8V7%HQ?&s)3g^S;\A='Lh%;>1NIgV-hAAN9'Lo68:?,)E>Du.ld)PdOGI:jOnTAmeIc.85V-k_h;?e6h=[K8a
%H^^<a!:P2M)G"Uc5=SW="8F(NR@gm4l2E+`1a1'"XPId3.$50AmR#6ej0p2=b6rE5'ifP<+2:[U^B9(!ri]e#0@2fgjPWc0%0$Th
%j&@ijlX?0YWjqIU@o/:+)FbbN'*?Os^\+Q71'"QVEHfjc+17j2M_HJ--rM,f%@!Qr?0DLWg"69c-eY1A4V/_X/`rJZDs.a@qf;4,
%_B>Jg""2&Xi$nQ]gQ(1<Y]XL<^UcpiT2bN':m_0P-&/@A^`S!kS/@bg@DC$M_s+>sen2EdG&dmA/sZS!ka(lT'6%UdR558`k+E\^
%XUQlu7[o<'FIUPYHA@c=!0I*7[9a!O6+(pi;5.'iZlLn<*rojD@@[Nc8nAPdAT+lq\/!1bpSO4Q`Wce@hGfc+;o#4s>0Ps8nPl>%
%#7Rke"Q6E_E9T:pD'8jMGP)9Xn2^Q(:hp+li[1uJ!>)F7aDH-$E@_\VBhQXX(F'7*ll-/p)IO%[5Z8tABXB1,K9c]A)>EKil-%m'
%c09am'g\:EU,FU'euS*Nr>\Ef=Dd"<7DSOrBMi\54]WU<UIVEchOQ:0SmBakYO;T@4?e"DmZS2?p?in,aapYre2Y]Qgd]'Z.(F4]
%1T-Q$.dl*6>0^^IW)h#5cjYH-NAkLMeU7ja%P;(2pc;/q5dHWlI:&+a.tY)`o2kUY@Gj'T)t$cB@/q*rX#8KU*X3'NUb)0J#Y\gd
%Of[Pk6%.OESe48s0O1KalHX\"3>E.784-0f^_+0o4]gVU3NO?8"Q1#H$Xd^rrNog.a,C#N!<D>_]`Y,WYnP-tJ,lMr\c]PN^b15A
%VeC-LqT#e4i.ZI'+O8u=RWFUe0)(lUana+p@ao4I]-5$^nN3G+'mpIQ6PP?D;?DB7bGIV01E.H[LAOB:78kKrc0/kY_DtG8G?j\o
%\Z*\Kkpulk4bROGN&-HNUjX^8!!">H_4I<k1:nn#4ni=$_kC45Pa*d.k]:3.J52+7jEW?GA,)AnamQ1/#UC4ige]FnS@j=H)@WV8
%dJ;da)+mbWiN[hFZEAf(m]LNl<b,tA;MlWl!E0@:N-Yd>X^P>#'pn+V:4RESc6D`h/AA0O0p2>;C(q-9(T@2dQP'98;ate](_]c!
%'uo4u<HGk3cdlCJdL.mon[Q1^3WL_+Ic%H61^F)G\PEPk%PU'>nYkhZp2NoYIQ>'%hdQOp1I4_d*bMe5m?ba=DCN%KNt1qSS?GrL
%I^A*tcWe1e/;mVl2@FE2i8sF*IHc-to*WJM7scd/8rRapcA.RQC^YcbG:PEKJ?a4H$Qrf+!%pFr9K<\u@R7hJU9E,?d1Va\?XQi!
%_MDLso4raq^V^QDP0^(c5><RJ]VZ$"L<Q@okG`BNLf7kWPbuA:m[lD!/HY9KY`3OR9FD?SRH9/^ZeY-@B:!.h,*LlI<L\W%*il%r
%kt\j90Q>Jkq#O8XILGp]PZO19DM6t-eM*'K"U!^0)nkpTKJ9aMU#7/W7N_\(Fi/`o0u[\o,pO\c[MqhKS`PXI+lofP&mdh`1_5"U
%NNsEN^9,bC/F-mC*f_K\721sDS(ObNX<h\V@:7!>le5AuAiuj>H`hCq"C&jja0T+khTGM?j\"'6Q_2.L-62DT@9U1E4o9\2ICb^]
%Eu)[QY[DpUluH*#M:k5T[92UhHge%pYBm!hKs.A;[V=)7Pt'<g$8*l)g.4E7q_MQq_t*&EID0g5![dD:hA'!9J;>3nWpN\)ga?h)
%cLIZ#jA95<AU!]11u`(Z`7eH.:\&0X\(13B^>(CbHrbkEUMao>-84#YDN*);6YJBIf/KjjL@gupY;YMS0UK1!WAa0GnQoYY]t-Vu
%ZKghFg9O6N1Vn`Y\@]:Q/h;D`V0Jru!(kF'i[+YnOp#3>ST5u@WkegMeZRmlf\B^\hPX\hcs]q#;[.C8b[kL@]-t&j'C'+3h+[Ar
%1*sC2TO":OF0p/,b1GIN?L!S$6UI1,20Tf$AUgIJrPb*a=S^riGoBV,DjUP@at>hFHSU$4hW8B]8oL#4k7&l"UU]m/9+JXRnkFB,
%p/:f/nDm<Cp=V:rBjU)IdPmN^('?eOX\>Uj!6A9n,[5F2b-eN(UNr@=<,#("RStJ9aVrQ:S[o:f$O3(H[tu<L+#6%<WHe7q(U;0-
%:<:sXn41Q+a;_t&Fa1NeYA"a[.:J<m_OFjn\c*X_j>b<UM`b<O-qccq9F<pJPmWlsG"M#sH+R$cc9tA5S&4s?@ERMQKuDha&dBUr
%%Ap<&S\SR>$7r/I<,aPM9%>Q8\D)<%CnS,]6.RbS,kb\o&#6\W`mC_+p-4UeO,R)]aUVl$Tk60_`Hlg:s/gno?k>ED'[%]7fT[Z=
%#m-D%YB.Irbo-5Z))[X6.h:,e_t/>GIssK=O1t_P4=kAjReI2)M9Qr>^W/H`e]%c.X^(FbOP]]22d6JaQQ3m=gtSBW#G$->d,2@Q
%((H-3+*E2K+?X233J<3NA@@W/d-XH5`LE_u6;#kP'e(kT9R1Cq/6$I2s)J(_eSsa&*"?/:IXYM&a56k-QBmD<G\73GrX:%6,(C[;
%Ip5"l_GZ_@;KjU9s4B5'E7le("b9&"X#RY/F7rd._)<\tZfS^X43!ja*F&BKBosscTHRXe"A,mW$Z!X$q0M]?!'L^2ACiaoYA@\r
%)dP4.^'K*u8#u*=QpEep&-%E)WU)!^j#t4tUV:*fYsW1JJ7W"="UPcX8JI9KdH\^FPn:X1h!Y-,6+>g\gC]]q\cD9!dqrSc!HVOP
%%Ns8D5q$BG4IF,YP6/>WD(\o<=6mS7?CcsLVH65N"Oo,d%Kmq"P8LF*?&m3hrCgY\PT"!jbpI:tQDYW1^_&U)g<cn#&WNF`e5W1T
%aU_ddNAP8s"99>C!9h570;;01(->'q[=h\IbWMXdYAI=;7Mp[o&JbWK0]QSMU)`b_%sMXngf@R"#E^V)ba/_A6O",N7kUdJ+I1c2
%c2Ad5X=[u`X(&r<a,2om#NX/TXTP[7iRpK0U1*]`WGCtJp4qj,`pZC?Wj:?F7e;dA1d'>U49/6gr.N=+'0E/tF=6QqB4"OZ0J:A)
%W4)):.G:j@3<%a2HQGH-q:rI0^Frl,R3dCg,S4%<L*@>olsnr)_`;74H;f+:<oolY`A`ia-NOJ`O!/AUreQ:GTIG&*+kI_1]qA;t
%^-f+hD;(qj#uVm&/2^0&?0'i,-.Li;$C\n>Y;cQi<!(E%7nA)NgW_@u8[&3L!!`K`=TXJ&-!/o.FXnF4g4m#AbqK=^2Z3J>mN93]
%[eBdgS#)6<d5NlP?e+_5[%MJ`]N2E-'$tbJ<+5:s:^Ld@BY[T=F8$IE**r5Z.LN_3XN]5`4CRbj^^T0)/DF&3c$q\Qp<1Prg@hG?
%D&25V)&6Mf$N`,CKW2k<"Ul?WV1[%u90m4]`'ZRQBT6GUZ*fD@.#Z;NWGesB(>aQN+T0&`C*,2s[+bs453![P=U@j?BL4tI[=RG5
%CpFQgfs%dtPn$2DAUu!"GH8jT5+BkXS6FR&63dM75H2`<0VhV\N5W&<gSGdO"j;TGh)k4ZXb?mO)'s"iP@)4"VpUY]jPGF7K@MX=
%`,Ng*6LVn_@/qF:)=tA,0JT=Pr%sp%6U`ljbV<XJjR__-V99'JlJZQ29#*_g%=>?EK[F!a^8jV9p0l:)f>R?:Z;+#)[;\<u<0DKH
%F?p4KN<%D4;fb5]@"gqlmT+%t]#Pk0KM)?41s,SR1XRc;IP*]\7>"BIQtWp`@p!(D=F/1^B"Z)g'3:qFr.a&Kmfe+@hud+dhZ,T%
%^`sa`l*T8*_M#gZ;tU==UuCD8=,g%a#=UWZcelN%:&h:rQC63f,fTEh=L<>URI$;l/-Yn,W_Cm.`6][r,;@X>n#8qEboAr=#u5%i
%;M%]C@l@l6]Y[\MR9'*!1rpDms6e1"L\A$Xi$"d(#@,CFW0,&RG?H_[T3/Q'2;,QL9PfWegD`^oJ`3@GVDWu#)M:>4R"_%n1#*5j
%1YRpRl]#JZN-dUPDi\M6nfI;WM9kScq;/qH*=3'%3Q^6#=P"qeTuF*lPCPms;U/p#8VX!_oFepPS?u)J+!KRQf6--,Nd^>SX0\#0
%9kF*.VQQbi6VR%_J7D"O5YD!s2)c#@*\i/&ILsC;24\2-NFdC`++(M[>9XQ5J,\ZmF4pZL$PQ'?oo>%LP6NN$YqS/""cPRr%60B\
%+a_3Ja^148IJWd:bDW$WnDbTg?NgkS)N+fX/fQ!WRPd[3_mmK(*=?Og&kra-L7`%\:5nn^=p3oX7R1RLQ"Zp16iQ8\1N8@GS9Bhs
%$*-p*@Lnk:>p/=!<W(oL)t_V6?]_lPo>Z=t)#h$85?fUp_'&Cb'h0q5%Cj_e5k_9<QG#&cYB'a=M"WmMQt%@)p?LgVpYP=T<pB)?
%nbi:ops<J*Aq;Rnd!Tjol1U$;:DibbIW@F#%>ZJ!!+H#?[!<bq03%iHj5'*k*ZeJpH3#aa(fR>BaU/o86f+,oOOqWZU+i%pYbg.n
%A<-&nkok1^WSXDiUBuMI4t0]bNnFYR02NeEbBWZt]>g4d%u3H6:rUJ*2rO)m'=-f7Z0\mohQm"k94&JBFOXBH'>"@Aafu!8nICJ5
%X0_23Y\<q!n($7jj$3M*5Q9cZ^&S$qq1%[_qWep5VrC/+dN=Q3)\O<"Im>Qc&.u^i,a>:D_G7W4rl]fk-\hG[;Q>=?WtENEpCGiU
%[6+>-@XXOsM=cRE.*Wf7e`!L"#d)s:Vu)CgkCD87puB><Te77<9d'k_Q81QO/pM'Bj?`]@#HW#s5M"nQ9FJjrLt[GVllWFIKrsTH
%1!l!SKksm>L,<7E0+<3?pu9RrB+PFFoQGIA>RZ=equ[=33,7MIA<J`LeT2?UA19mBLXi1(`=U'f;8%&d\O?E\mOrsm^,[Q[gglC0
%O.^3*YYTk->_ti:",GhGAqGRHC7gO$+"<EeY<.\haPH(d-QM;UZ40FiN(A0c^H9e`I1a=pi<08MIN9D)*??':$ViB<_MAAH>m@#S
%LB"Nk.'=",NKk6knMGA>aMlM#d9$C)GpfC,>$-[-=])^-o:HlN\&rM2),nMhW073n3j,60fP@*VG%:C%q!:.%UVGlqJQ_W30ZZDU
%nAE6fjY\7\OU>Xe4WP4LJ^s8YVc=ISM#kDA"F83>+-;0GM*toEV?_'7ks'<3<@I$Nnkg$&K_-CFJ4-\m`RM%,ViB0uU5(-5ci$-m
%cAQmW?9EkHd>mlhCN.-.f<K-!F,%)S9q>5I&=AXiZ5k!3b2S@=m't;^FlA:L4(5]+&LJbI!<6B(KNFAt"-QCf5M)O`mg6[N$N$JH
%Sb(p7CN)(9n*o3F*\7B"gZX>p+J_tf?3[AO3ZO*HFcF3IY?T7,;]%`r"N:K:NC<t),KcHg8C,t=eI;HU[qN(_>mBEp22UqQ25Vg"
%/DbIO!>:o!DF4%1Qt>GYX]=d_<lF=8@N&"1b5bW1<0;TKg"lMfQd5WK0%$l/\tl^L!)Nk2q.XO<]Il3(F.sHaD^9VfH->DrLCG_h
%R_i%gl\U?2hI6GA\U?Urs6^nT8Og!b,C82q,o[8JYbPgr)]Q'eK*S7X'X\JS&4p,5;r'-`Yq.39nYGT7RbaGUZ6ao.iBM'!J"'Y2
%Tc[=:o\:p26UB`FF5)4TDB$%I[dj9bk4[%Nj8oR4RfCGRFP_HZ'X0?CXa#2"Wrf-TgD%ibq5tW<)tLd;Xs4B!p^#13NN!cgmrS4)
%L6MuHhT[!6@c"`Ko7,)JOS1TK(r3nD3rV&8>+nZET:C[D=adBjki:j:4U1;YD]JeCZ2YoUA@Tkd4u1YKH(H+n"Lhf+81^-6r7*):
%&4.mR!L_+3;n\K3g->qeEYYRr!FT.i+S;]1;siY+!$FfM+GEQhW1o6l=[8dC!+`%l+FqU]!?g`/KYUNS&ElC\Oc)Iif]/f@C'4JK
%0X4BiDMpnk1Hsj\)XF#>LZU)e)nfo:`bVLJ'h]GYJd>CBkYTBdY`]tk-2GB'J`$T-L)(g7)Z41i.sJl0J-92s?<*s6&:-P@_XLkO
%+Smnr13.M)\50m@&]uR?.j"h5blOUV$6UhM:mWqu!odKQNV';0A<A]$liL+Mp_ag.$$C+>k_.:h1U3s`e0"n21GiJ\7:LQ6\sT[P
%!0r.?EdT$`$*EKUEnuA@U(9Mh/Ht)O,0ha#G6l=JDE,";9\''m-P3nc:(;^WqA:W.e]L$"qBT)<WW>F"P0V"B$!iM7jjA>o;3&Ks
%bm;5k"6;Yn4;,mr"'JHJY%X^a33:F9g,#Z3i,>jpQ$&2;]HM14H3%rVOU4/^3@W'sJ(:rPmU9+rH1$fM5?CPJ7h$1OMflNV^QPqc
%]i<P8`nj`1;*R?,[.&mPaR.cP'7qh.8-MD8@ncEr%j9>UeDVN(5h=jBWJXYIaJ1h-:$6!$Hj(Xp_-AZ`X<VRE*4WMWbQ&E?3*r[j
%'L3`n3=jq_])onVJNkM)%*)G1Ws,r*OYI^R0/C_c!!4_^+EV8Wki&,lAul9`8PYGP@I"0AA'[FH8N\,*,k'H+7DpU9%7jo:N0Y1@
%%1%CD!TC+RRT/dX:).Gk#cP/0p2;)X'?(s>Nfrn2Pi9-O2!AH0;&kH_+rOtcRMR4S@AR9:OJq24MTha^l=D-pk-J84a[O:^"DP=2
%Ol-b"7N-nLJYW\cmK]?jS_($7XZq7ri-2DVO*FLZjp>knF<r3[OO`Hm/-n/:3pV?h-bj-a8e\!+dNRkh5oAIf)j]Vr?2K*&"O*n3
%W_RO?!C?+hHi2,hV3k4%@`HCWh5&fs5)O_Z>P39,!<PMT9Cl9;aj6o+\;rg!99c;#Ut-7?B4sG9:jZ4i*Ns@9":g^Mb%nR3jri_J
%I=IP&n8P-pEnPa,0Zb-r(mdB5O0L(/20tm(U0H-P&8;[2CR#m+rO/M0Uuo5W_.s('7"trbHhccBI+hrg#e:lCfr\6Zp\>;/8oF]3
%7g)LRCa6X]JdM%?Oc-D^Jf$PLjKbh6/U98dO9/Wq#sK(F.g)H,be7P96,?K)#]O?d#P_6!/ST4L@Y=biU;2YG,$fcgXFC*s@RM\b
%s19\aZNcT8_8-E`*I(3m#4EdEAna*$/FN\H.`b#3TjDa7]=F4YRiC6ops)o5e9m0?[kM/#Oa)aLJ,k3;fe7?id\,MG4ZT`_3P219
%dsfP-Qgn6l/j@U$NRG!0DgUBi.a+!G2])+9\<@-O+H_cuOV'U\[q.6-fE3(,AhM,*ZD">RZm6UjHe8!o.jM+g2/^dBN>cp4G:Q]^
%`cJg0-6N/FHU<%G<opF$^Nlk^8m_VU&^eZ:m?7UU>'Ml^(lX?Hn`8b81()5d#sNHiZAb^']p8X"IBXf!=e"'C+&N?Gn&0p@fRs79
%rg)r&#Rk<qi*XRiK;k=DL/)mI.:*n58O(5^7q?[8R7de2CCJ1B,%A!b4e&b'E5>=ITllj:!k]:4)f?F?7-U+uks8lqmO]h;.FT9S
%DsuJ2](%F@0f"u#cl0M58m&Al'`3VWjTaYFc4b^+B^4qa)0[$86te=@W$*W7CBYjNrOd6n,b9o[FMj16&Y+Y[DiQR83JEr7b'SBR
%X&apuB"[MMpNp<W'B$L*abi"U'<[=D^Q"c.dL:PrTgpau?rIiEf'Sa@Tcr?oF_11(q"\6?8KRe91AY:jWc#cur72TYc$A=^GH4Im
%Zi%\COrn#*_)hXW%n0P-07#bR]3@"h;KE,Bf8+SP]]iGJ&!IJ\LW=Ic+FjoKKnGGrM;WbTmN_-Ak]K`/90+!SjT?GXp,j:X8&B0_
%2S%m'M.8XP4/F7ndVd!B*`g&@3Z8FLDN5?:!HRTl:r9G)>P0S&:HtZ`AET%8+ml[DEe(5UY_agS/!Qc6eVU:0,mH8QR<^QTVRt=J
%Urd#!3E1mqSO3;hR\&p+M6Jrn[J.N`^g'a\G;%*fcV4E*:]TA:gaqcPkfj;3*"]SeT;%cm)AT#t]!VO<Z;AKnOUFU2'o$pK(X!,E
%,-^Gga,-ABj7+.QD"6'L2&.VJQ_@.$A:/H$5%0WV60skKK(>"k,YfuSPj]:dCdA&?dO0S"\o63d2Pl7>JM/YT-;t!H*bPI$0TEIZ
%1E1>k!e^B/!&gQe/cTF6%2dr^*ol:_%h.ug!n7rRhujsCn?ZE&KMgT#1/Is9<(e8F8r-pOT,;Ig;k^](@,,HGb-'(W,[7l9Y%]@D
%2U_-X"<RJ<ZCM_jd+!SN9KB$/P_G*HoD1Gk^Arcr,Cj1C.6oIL@cCmZftEeKT=c3';nb4=V2s*O0Qn7C9R]tI6?BcQ44Hj_.Sfe$
%;p<*U`=21oi&L:+OcXS?nt#EPjo\N22)>d5=M[j!!$<`]@*=W+?ioP<mC4&u'QMmu_E;DB!t[V<^+6jF_'tp)Ae`H2RCb6rSKY*K
%VP[NN,o_,A^aZGt?C7X\*E&JG:*mIQ/@+bT&UJ^SqLrO1fVTX5lj@J3>bo[D_=8[W6^o766[g&g>flVZ.ej@292RbJmq,MNoj3X9
%d\a[(+n!T<f8;4A/jd>G*'Bhq?TD$L8G2"+_>C^$i0M^(dOXF-8`_6G2Np[(m9/3:3+3V%?ARd&(CW:#6dGNO5Tl:1%jN_i8/]Ip
%CH=#inRQitbdijJTI\4/-+n=K*'PX<*u'*K/P7@56>r]:].6@Q$3>fs+n\&049=MKK"Z0HT9:$HGG);C,XqcS/$&6r+[@i+e^Ntf
%N#;i>b$+igQ_'40#JeDc!,Z7RS/YkK2?A=a#/DufeN"-BJ-?(dljgPk)>fu/JJpAu&8kfN^'!<*#e)7]J2+p,KW"l6S`b_-G^l#U
%f_Z,N'HF6*_0j=hr7r;_Gp8*oap=t#7f]>Pg,1`*$+;#m8:CmX>a"p!M>Y`U0lL3H^G@iNO>@6QF<V9aM(iZULdV%F`b5me#.]7(
%/M8:m[,(e^P*62uYdqlCk`,r0JD<DYS#s^"7>VUA\a)5S:^J_pVS(kPQH]_Tiku!@GX'H\X%dn?2tDb_eQpQ4hF*+rd.M*,'t'PF
%cbLmqH^Q1mOF_(#2s#gPajci!Y)[Y,bGKb?b@cKt@B-t,Jr^'tVh.iu<U52;qjfHd$3o(LHX6"]*:e#1UB&I!Esr!6p$ZsbiT&f,
%lV87N-%P1nPk$e<a[VB8:5<?lJ31h$QV)Y\VEa>*k=&e@&l]?l"\ZWR&]t8-^sM+X,n-=!8nH&f]C\M/aq'QYK4052CUf-Xde-=i
%dV$TZn\^"TcC&ZSb;F^'U;G]C;f%f2CCQfslWP\=lRE-_>NDZo3tEEFhL3Ck^_rdcfQDm7VblMrcbatnBXaPVK]>:&QaN(nf8\YZ
%$q;1BqouMZo3nlprVCieaXCI+5;<e)Q:GUF0B);pdKA&sA-EH#\?@hOe.OifL!uHMJ&@'9ghk36S$L/+]6"TkC.+UP0W96t:u_\.
%%`Cm=TYiYfB*B[&RPVQr4TQrP:IAGq!"?+6JDa&h88p:7*09a^0Pf\n!D'tKqI9uE&NtHl+&Up9OdX?"F6dS`oUY#.7@['_X@Bk7
%#4_OmW+?(]@t+=CPZ9_*!8msc:*D<m6-_:O^Sl'&"TAVW)2lI'6T'O:F1@5Q0s8KQ3BLZV%1KO%4.sa$.m3r(!&Y>gE2+DMV6Si#
%355WK'bYXSd>+nOLQ>[]*0YGor(sG]!RFtO&XI3E]>X*koQTD`]%4s"Y\OuChUgL[2q?S`ImdT>8qs5.>@3XNpbeYCU^,M-X-hDk
%8lp:#?7T<H<9[TNWfjg"Q*,4"\/)ZUP0UJ`<<C]fV2J4`TGEa7h@M2C:L6nB70O\,Q;JD?!o)5e_tHG,ahAFA!D9/F*^Nh8+bC<t
%!T-KXK(Y7^iM?UM8h-=rScO]Ikjm&C]1_!s%[%(6cu\ad\ESN?bYR;T)BMS;]DbM"KLoncJLdJqlWfh5aQ,>gbislPBqWgT0KE';
%5/u?-l/i9>&1a/ga,%+@/:4^mO_IES9op]BJFJ(9i[JcpZWB:*>arX:0/N0:HqC9tIKVS**OFX:0!)lp9WM;;+uGa_=)b?2TI&R,
%9(P(n)%EjGWL]3*E3X,@32FI=7*HS:<1sGf2EWI)['?e6+mW%Mr"$26E7;5oL\")E$Ti/8]WFD7O8&<s0e/q=/#a[m=Zsbc%_9C]
%KT]egV)0p&4=kG*oe]KsF@3XUBI:a[c]jNMZc-(%%JcNcdkfm=XdY]C's%nPFWWbRku>=V.XpVrU+trAgo!p@MLk)fZ#[Hs9G.b`
%8Oa=(krt689)sN,<Pt(q%P3X>[K%i(`PLXO!&FN3\HU&@T?@]ElVmOh"-CoeSJ+'b$qTuSC"Zh6\DI9$'c)gYhZ8OcS@;kmXrha_
%g*Q^R45:Pm]8UO'OlEsa!'n4;2k6B!B$rj;6Lp;9ZB>Lb>0!mh6]Or8/)j6B[Q-Z]h<hkjX0jDFr0L[TrlN^oKH@Rrj9!X2WsJ3\
%=2U9Bo/e@(5/*_fIN!gl=Tf#uRSD>C)j<h.Plu5g>T9^u'H&YC^eG^$)tW>q"^+m(`qZ@o^5uKMBsh\Wg+i6="=t,0YrrSn7gCHG
%m9kYjC0k$BU`rK,V$9+t]!&P&eK-201f`1B0G,%SX:5mFGR1*6X;"l\+)7rHJ#JsIf-A'm:%ngX<uho(s6N3jrPDB_&lVW\YAIgh
%@5_buT^Bs4FItCbYGOtuk>3'CZKk='-h:@OLV'Y4^4E$7h^tUk=(H+WH]G1eR,<\o'GijU5u1^m+5bGWeqXnIF&"r?H+4LZ3fUQ+
%Jmh01mC]QQb/iF?.u7L.N>k@/jC`9f`L^/q(*C^8"K"G^gfA+RnsCN[XqS_uclJDC>g<\^:,p^1*\(R*mC/:2[Z3uWT]^2($ii16
%IS(-/WCXXdjE.p2g,5lt60GM7r1Ks*3Zf-9mJPr,#3l?AL5tN7ScSSib[Tb)GFP-6@dX=i[\,/C$IU/G<uKFtTnsp]9C)kkK4i!*
%bjVpo"4EINhAR>q?$*=jbD%;I:1`,2C^[LYfruRjQ>Teo1/@7YTt-cbm!QJUP3RA55A;a62I!e2UusU(ld_8!\R';::$^@&8b1R;
%A0Bp(I4d%!]90c]euLmaI(bV+-sh7hq_DLhDebX4>MbbccKXYQ'O,g1B0L%@YBUb.<G%icMG8*Kb<,M?jHbjFW5Ymi/R_V*LHPf=
%^qqo_2\V9o@ut[SLYTVL+]sBZ'NY:&8c+7heK`g7"4EGXocfH;POs+@+fpJhH>D.a==*bHn-Imcn128D\eHD+!2&KP*#YlJ&s(&)
%h+#_,d4[:`K;6_"^6jo:SbNmMpB;Q-41hn@C9XN#^U)s6dk2\"#rd4_A_.</qk>a9_kKhfbbEH):\*M.Oa4^@U*B_,=?U@%Y_/[p
%QXWd)ke\aA2S9$:04gn2cP&5MiBn,^p:U=*dB/CcF:&iC!4(q"Dd#?tfX9J$;U++!go+Uc@>268I$q0mfNaH<k>7EJop"^5?_]Ye
%$_jYiCW#O]rR.LV+s'*.N1n7-.H%s3!5?IW,56$RqK"mCFf7R;P'Js$KSQ-.Ar=Q?egZjgZ_eqJ'Za,IN05X$_2+C*=!gFOZDLA0
%0`oI+aHW.HE8"1#GcfY/+L3rX+Z0qui=0"@X*pn5K*!@QJ@'/l:=^#ur<qZ/SMhE_0.d\3EgNgp@;Y0'#=;WV95W.'[T4247og>Y
%=M\?#"Y-sX*$(L]d$),T/A^1$F\(]0BZEfG?i]Df!qHt.Vi2NZR"#F`F:g'aPXQBcQ^ig*\i[5QkjPG1f)$gIT+7.Gm'>,(Kn0c*
%LC0?04un(:QjjK+M**06c&NQLGjVUL_W7-[(:qK/,Pl=VW?Du*<\;T)gfgV@`gd))arnV=\b:(GAs;PaHf>a``]t9!%_?:0W`3TC
%IF>F7TrT5o8doWU(:.TU#Wr<qM4bn,:;>,G#2f,_Q*kfaY%K_m9l>m2ME(*5o;78o(?.0fNt,A9d9c$LE/:F7KTDuu00DVk(`?="
%<h^\+MGYD*LU.9$KbkjR`OAY>1OG6gDmTZl8LHiqSq:(f*a(5f/-+ViJY\K#C_&eFF#+2)!TWOQr$:&b]DQl)(BhPC4sYZ$#ouQj
%H?uK[N?KXs-9cgl+bpi8[6k-b[ds=N?.P?j_%M8$Tq%jdYPLk"PQ&4Cf-N^kZR^Sj;Y9Im@)48hM&-kU;%(pTgkNPmKNZiO<VgCW
%`>S#:FUJ5sB[LTBK5%88"=#U(FaD]Me4HjL>61C$2YoVWeZ/!V*M!6t)9OYO2:-('rL<_a-a[ga.!ZF!1N_>l%rE0t0V-"]9<j5d
%UX9edH7Il:7Z$JVCa@2J\@4K!E-Ed_06`IQ^l2+/G]!l;7k;-M3S@Yb4^/Z?YJ^R:'iQSjJ@$W8J!PA^Xf,\X;S>C1r"MU*.V=g>
%pZ&-@MqA_?4p.I--EB-WXKc^&jZ%&`Vm:YGUtGiXZlf!e;6"='L%i5A#m#QjJ4@9)Qk^8718U?qg\&YI=MaM/!'ReG+;c%^^?a+,
%Mk4rNa6i4Kl+fh,=#dL0"5r^i-')9+,Ju^>8FR7ZR0(A.$W+\IoO=^c`!k(dTU>Vm_hCO#.g3.3^]?J=FJZaG0YsBO%/b<^HgAWj
%)9<rcUU0meOUp'a2u-B\qV:nV;dKA:6k(3/AV<^#QN'/EDDPLDLODteG%C=79NSrjOKT>L>K9s._h_YR)*+(JWdLscFdUjtPsrh4
%a#k'#Tt\L^d#7]m")Ln@%#qn"7T5<d7e49CeafiJ$,@@NPk\Dc0n\G:lP%C`#O7O&SqC_=dYc8b*9fq2VTGp+r"`n87l,N@^UT\s
%o,YeaTq\)f^`M8O+%i[LB0PI.XQaOQ^01.QS-6L'>UD.MC^9CroD=j@S2HCD#_f0]T3*H@+,M";VTK$<GCjZY=jMYR?_Sj7V`4sF
%RoN@JcS;nNfi7WpDJe7Zq_4@4M]U3!$Zai!>Qi$;1%(.FlR9.`"X8\t@P:0hb<E]0rsQ`W`$Nl-<Sr&dmT5j/lEp)/%DXV30Vj89
%X8u7Tr9F40BP"3-U%@f*qh],kIb:$;(eEM5[*`cg#0SXlMG,R&LSRb\Llcj8W,4Vjh1YYd5k8dfg&]TkI=1%kKs7KY6K4jlrUEa'
%N6gCHCR+?P%krV/(rQN"!?;B,/Y!s/bu+.&7M1fMWN8YF%-GL=*m,*PE@MVa)_sHRWW#IoGqdM\kH:!gc+nF?S;lb`:7(`@oH"WS
%It$=mBgs]Ul3X$`HZq;26VqL5@!OHG'gd-H%uC/E5[)6Ri"UA>1e5>1)R?YiZNgkpdu<(>14=VN7qSIR"ORPRLr(fYa;b28X1"19
%KZkN8>6GT@cY,4IEH)DPG283t]Hdi!$Fgt8mHZ3eS\FXL1N\!/Q?]pCL'7_!kuX^J[t(.,'6VCEb?mO_;MWa4,XfOZFTDN$#\46d
%-lQZM->t%K*6M9CF6MY9'B,r5!-bYPljs@Oreu"%S;KT"?he9;pA2*-QOtbRm1W8pBXn[.a%G7ia-@$dZ/3i3^eM]hCLf0-nQGe5
%GEQBUEI&/RA4rKql'tH:[!cRDB-j6,d&'KUa-BHO.?i?C4.=Pu;;-0FI;gu*Ki,VdQ9LA)\1/>\/M\OP</EPaqq2(aOUQm2l"&Xf
%PLf.NO9'A)B=LX*p6ENE4&l%a+EQl]XF"?!P0oO4DD"5Bag!GU!tR)5Q?`^5,?S(b`),"QI*XphUDQ/QQCQ"g7QptsETPRKJ.u`P
%$&A5>62K.6jF;T*7l1!^1`nA!gj;hJ*HsHYWEMRs$14.IVKPCI).YiD;iOe("anZ*++Pfh+9k:g>rr(k2CPc[9j'=m$?"eP6&P(b
%m)joX*H[1>c>3CRNohRY%>HCka&Mk<($-C<8M5KDlCUu!p`!`U2Lncf4MIR.II22hJ_h&DLo3M8LB:#]7T+3@GbKcd#`PaGG^heD
%lR0g<C/aIYIa"<1:Ot&J$BXs^;dd0MgqIa21T$XQ?bBE(8;@(b.[$(PD%i\tRYs]k-$+=7oZ`oIDY_hUGT")"HVbe@UTY9roh6A/
%5hFMm@#u(1]SCuGpPjlg4k1,aEm&r[8+X"o1[#B1U`%tGB9dWK;=Nt'!N;B!Q^TJHp7am.#l8go7l%Yj;=gih(p4r9\q74oTIUE0
%<M<nc94'SSi3NJ*"3Xl>28!nr,blmQQ=*S(2XN#*bnmGTKqgnDs'g++(RP2I\3_+OnK6YNN38&em_cO;(]C8IA*g+I\+kL=A%Xm@
%f-#4.ZjMd0e2tqEJ3'OV.]bk:8nJ''h\(VQqjnLH!>h'2NmC%*eJ-*7NQ66"UT^Z,a:b?=Sd'K&92An5VGj:gC9b(bT\L_f:U3Dr
%mkgfC+kI$2iNDE,(?.3Oah"2u7a'gj:ieJ]a(i.!+Cc?3hpICsC]Q!s1:oJ-)-JZg"`[`)1R<d09p_24#UuIRG^N"9HKqN6`q7qA
%9NNnodJ<3,/o$GIIQ<18ciU6V83<WhH@/6Rl=sg#`pIo66f`Dlg]ErYMOCK3JZU@;9S!';(Kcdop$j'Ekc-)r2R9&46,V.oX"beu
%l<0.7(T'h+aK2WI*f^`+SaGqfc)WMO-0^[uNp%sV[o,UL<E9!N5O6n,.jk4-PnEn_]i//s!mqZ^Zj8OHT6>3C2j.Gig2#Tekrr9s
%0])"FF,+Hr_!/5q(>k,Pe&.,<9G1f.K4Bhm7&4][Lq_?MForL$,!E4S4I=TOm-eF'X+%oS\s1tCJC:+2k.FVs2E)A:b7bW&F5#Kb
%DIXs@NE=<XI9I<YpkIRH=EuN3;t5k1EnlcNHM?a&;]/'Wp$fg(].^4o;S-fg?8Subp^Ohc/s!RC<H.\Pain%aD<l$q>pJt28Su"4
%EH+HC[CAnM)^=6,)u"-31#4>)T(hR+A?^<+6go=Dp_G!JI\6F"n:G:D]c!hp$'<mdp1ui/#b'X_Ie8WVp#bdiK,=`rn@?27PaBC0
%Hea\_d)i?['kEaun+V$Pf.5,OHXJ>J8B*GJ?7Q[/[\)k_Pn@DPejl"bn*pjtM_-(W1*"12>kj2],iB+1K*%IOeR2?!c6]+T7djfn
%aAX+>Y'Vdk'$Ep#N#FZ*f%%.?'W`+N&)-RFKAOR/P"haUY!qR4rLhfK)gh(1XLbqghah>l-,K:j1cKI&92n^S;Kk="q'I[]]lUmN
%36k4%a/BHV#Ij7nmUGY,aWFO3AF?&eq,*tK>o@oYR_)KJRc0%)XX%8&UNVJE1fU2?=pkqZo#@pbKPD5qTYq+]0*E+kJN?/sH(u23
%=P,YS!+Q%gLDY0[\odurC8&/[@>6gR17%:ucec`30,>X4%e=9V;Gnip07!<P*l=[FR2P"p"QXXs:@4011?Dr3EDPnk6catleL*>Q
%@:\P=k?VolcAV8gL0et3&Kd#=HRK^^[tf#+Rp3\sM^g&1!DuDXnI<1q`]=M(d"fahXGM^Ab1YQ2Mm-2#UM>DbF!JWaNF$^:/PL**
%3,6\HFXt.4Ea%[7@$M5\0pFQ29$,uHkWMhq7(j6,a0;'Ub+an9Y<<Uke1.._Q8^V,:JAfN8=05KL0X@[72ba.;lN2`qZSNQN)5_3
%+B+>=XA8q!Nul'Jd>MnDqWgkt51to1HGE.fC]7EXfBe!c#T577-$$`IHXqk%VTK:0c4EQBI/0a>\noEH,ZD;HG3f!q???9*KLg-8
%T#-kuD#&$XrI'8oZ/F-cj@$`2Mf--)^V/>s@7n@V/`UVb.;X<9DD4_n<0pn\:+gk_]+A3@.?+7ibEdNqYI9$8>B`,hlak'ml+*8s
%Xr`#P6$s#LC<k*-_JB[2(W`rK3<T`5T.T7!SQtgXg610d]N!NTr@?K]Mn9%P1:JiZ$CH"jn!CZLNEYsoaR:9)89WGC9=J/R^f\s/
%]c^0-#km-J,(6@*h+Tmdpp,AVdtt]>EPt@DRD%DL8=0Fcq=5lF;g[0\]$#4ShCX'WdFPol8?cu0>.WQB>#/iO\=U/?Em[P/SAlet
%?E/TdQcBic)-MAEKp`lYh<sU6rh((`FNI@q:csFdU\_hWF:-6j&"=OBTOs33pl5l*dE@UVWL9NZ+Os#rQl`W3&ThHA?8p0q]1-"m
%W-<:0alut@iq&anOMk^=hlaC(Rg4mbC1.A)WO\(q.3WT5X=d\m8ra]8b'prpPm>>:N4IsbcLulqoWh,^)Z7&hMMb%i#@EJQWY]pM
%hnWWo>1iHXEm[O&F_T#3:LRd0(En@$'+i;/9H<X0N:taikkLeeh)(CL%E[f_N/idR`.R27PD`rSN)>=r!;/W1H?&qR&G)L1W/t3$
%2oL&?`Nk;F`)-.(Op4.l75%TMrMEMcfO^!f[h`*\!F,dXZUJJ;8Jtd!Mer8V0=j03_U@GQrHP7l\AW./it<rl2hoS*[n,b%`3(/K
%_Zs@u\s;K3Ve"0cd-V)0Yil[T5m+ga)a<JrS%U6;?`6AaMPF\CmmYiZH!kZ_741D1+l/(AjFc=>%J?]$mlUb.D`@;HEKq5.3%X>8
%@X&t22:+FqWtTgNL8N,,.,i=FJHA8THl#Kl1"]bINRe?JWuL2c%_\@DTs*aU:ZH1E3Q7h=,?@eb2"Yi2oTjBlZ\;5:pfr;qb00!<
%o26fFhlFK]PN"?9X@<iFdHC)jX3*52BiU2UFKTB.:RY?lb17'!mu_B2J!3<bS'/P2Huje=g>NR*d?Ac/("n%Q@X#!?l.j:Z,!5Pr
%Wq--3Go]m+b>cbOQh.X8h=G$WlM3QYWuD#%k&U"=0H<Q;\9mAoP)pL)C3.H8Bsg]`P.[qq"X&LNjgj0%X+_fPcIJ5D2sb:%q4r:!
%%\0?%&NuI2I^T*l;m;^Ho#Y!n8Y793f8`G;e+E<<hQ58#'lViAq8tX8[?5m#]\[R2>&DW5/s#L:Vp!\<[HQ_Y^7,$bBjMd9;ETW'
%o""6)X8+LF%hP,27@JVHC=)l(H*LI$^hr,tF5`<r;_8f@VIDZSnMM2feOo^)n_tA$*2Z1#\SuttSN,<?eY8R]jD'&@+F16,b'+JQ
%o&iVQ0n1R[],JhU/RD0:T/83UT$2Q8s38s75dd!PPCHp[!0YZ8>m3E+7UMHOd]MIW$6+$WXPO:5OfX!@.Cq&?&>(5CWtN^bp=;c1
%fCQZN@&/ahH>B<-[eb,odX7i)BqHc"Tfa-"E:keSU%.9!'#NbT?fcoPoOT1*]ka3tFM%CnU_nLNXpKCLk(iOo1]!86T2%c"93bge
%JPrSaq$_uTJ+G:=V\gFW8!/g.cUI`83]Nt)ioUR_qM`C)l@\(@'et$?_n56FBN%s0X]2p6hHchH\[d9>OGp?D77s2[kFs&%4OI&d
%FE:RmIFHHOm=SqkA\D2li]S*3fBQ_0R^&>0?Du4g5'nA.UG&\E_SP`PW:3is_:8/6*"85PI@GF^`-7C0l!GTV;KId0T83&4RILnL
%_NmFHe't=T_;?_pKrfp2Z$r[?')CJ]W@U0jGX*DK-9sRQ!5QjIm7pZL+p]t@&/C%[T=#HrVEhcDCoCUM(^4C<J>e,3OrnjERL!Wf
%a<Q`cZM1]^4?g>[3S_=/o]KZ=KHAm>E@jPnEU"oFVak2bD@K9GLfAX"\-5od3QR"EKaC`;g.i*/aZ51$Wjc:@c$RiukElg*i.deJ
%dI=Jf=d-53(rd1HU<T2dnc6[AkYB>kYiW?<IFp0;*pm.Ca>"*l!+W;H'!jUD&Km!.0ju3[oWqhG5VQspS/Q6VEP)'oJagIoT]d@+
%/rB6c=O]Th)Ut8Nol`paLHnjrg7.+LZ$Qg:=]650g&eZf?0'YmeUD4-+is%S[e'@KZDF$)6>kGa3$,D?>O.F.RnLR!U$jO5Y.TaC
%QWW@soDL>dkh%n?jq@p6P>$XI^d*'587Q#9Bg4=kNBg7LoW?1?;Xft@e2)E0+A9=7Be]UDk5_6hL_seco#spm^k((XoAu<k_*gfg
%Q0$sVnj&7CQ;]ne4*0Mnf&WToY-,=(-H4)1emiX\pab'hl@;0Ob;c5(>.R$EcHDK7\L<8Jk,pn<(D;#nRnl%#I5`MKT0cM7U,hf]
%G@T-U6L+TZaTG><%\')7+tPLbicoNLm(42dqd"_;PSfRZoQQ/J^[u/oa3%O/TE)'n2jfp(l0e<uDFZQ-_<KPV@pi;,jEo^k"G\a-
%^kS%Rq"k0`CZ+MI.6mc8mrN?X/nM(h;jmCdi!=ZL2S\#[>rO.R;ZL3m*qss8qaA'tPXQdGelh0\l'%T]+%DudC#;q+L.=G/b.E)0
%r3dKL/$9no#WdYUHgN`a2^Qth%iMM0en5Gk@m@/7RN5^;H$qtR<taf,63,[tB/RKN=;Ng"17K2_26)T%E[j7!W<>GA89)Wg`:&5p
%0NdWaI@1PS9;_"t2H]B]=8:h0N(NdN5hkRIniXi%&8R!qApQiFmX8c)oJH?k['GJnk;mYBouNAU%&VU&"(YsoJFmP"_I+f8O<fCU
%Hmt/pR>8E7T)^X=#nb0n!eJRA6Q"\r%2j1B>_TPO9CbJ?'oq4:+8$BM-eB34+uoP>8n<RuHA8?=V?192_0?m*BCBf)1U&3(='3SL
%YU1-/h61'/!A`dGN!D3d5eucMa(UdP=btQ:a/"2<m#*[5=Hk3JdX8Yd$9dj5lI#n.TGIdJ2rp/6\UP6jgXKYB#X=I.ng/VPZtcKG
%5Wu,DmSWqd4'rkfZgQL#5aAt`6<34:Gia&R@riiYA1:o7$LaqfbNd\E0[0Q"9_4!S%Uq:o$B?]$-m4jTiA`a?KEZUt0O='6:gHE*
%!!?&Q%gYT'_S<';+E8e\LNDU,=cNaA0XAVq[EW>_4]_Uc[I_bq<,jHsLWrdlOp?LtY)cNW.L<\1/kfcX$;1Y>.=-=82[=q&&#\,-
%J7fVr+gA/]'tZ\*cFm0^a<9^c8/s=Xs'@r9f\fh^_ZD_Q'719fUSa,=!)?M03Q2&.32,NhR*,S=Z1Bchn9M$[(Gn-Gm#)JEeJTJ>
%-'q*a:br/\;+%q3^e"h4a\:AlU(pqIVOfX0LmTW4CAY:eSBbWeE:[Y#c_-PE6_Gn-VNc)5Y*P8UTIZ*!0pGesNVNDRX/o[ZF_1W(
%TdKhHkSU>1j]9Tu%#g2g>A"B2&I$kW"7QZup8]^`-QYYQp8X3@6I%?!?nB#"bSp/V3PWHG-cokK+C';1D>Q2@.GXkViYInndE,NV
%V0PBiA'>)T[4'm>g;SKWR;O;*266QIOV<3m0>QP"!R'J!hBPmD"jY>F_S2-TqUu0_Jj5fXATK7OJ/3LBP;*FNIhsg5TJF&4^g_!J
%,4!E5aV.m>-_M;)RuRV3eCu$lSZOn3`=0!5i<)"Gd]2bZ*Ea`?Ft4?k3a=$R!/be;cDnjuRk=s.VfecM:0gUpl5X%bGZNK4WY<??
%'UJi&`43WCil^SM;:iGhVQRF"I?-$m/Gam%aYJR0jYZKd/i<Pj.t>>A6uKs=!`kd<&BleXUPq9r*<j<K'`p9S"3e9;C#[/*?6ZKM
%mE0p+Ns-oTSHZ!93/pVA=hoPNFsUJ#l<#t6>u_'57p//olqT.=iE_Y:0`t^pZ)OT2N&quV!+b;cK-S>qh\H&/<sh?ZZ-*k.Y8$cd
%NSOT1Sl'%>N)ho?UF>c*gE2jmX:0=oIVXGf!ZiIBcIm?Po")ge?'no*a?'XB(9^:(U#a2[Wh1Dddbq;5.dMohG8-[)WI2%iPu@[9
%gTuc0!GM<\AqkL[ni1S[ln$LC`Rhn0",XnI(S*MK9&T5:k+I3uD85lsf!4/*R&(C/M#`("IK@'k&Rn;P'&t-Dn6+Cq8(6g$1)V^V
%l/%i["fDQG!.[6Yf/YqR+T\7]ga^h&!7RG+BC.`nDd2o#S*g+J*rES1Lq8#n_2%`+?/dYq0A!W5s+me"ep[Ld-(!DfTrI%;?+QC(
%RI"V=b7;"IV%GA%m-8Te@=UOXm)l?63GfT355'@Aq"b)&nLVlkiraI)VZf=l_,OknTrg[X/>r^+1/\_eLr7DH=Vu,%s4ba[^;h!1
%P:V`Q6-p(n9kTC:AV_qlC-AqiQAPC5;Ui5q@XMpcIa*I0mXR.2&IGn7Kr3l=O$u#Q&3P9j<Ie&pmC`4=[o3SC#R/+NOpW_43_*mA
%+8AjCk@aN5]u52&Y&\W,!6@1\6X$SuUah_P9m:5b#A_KN%\C6T9&#)TRsUq<eIAXjDWYN"%J78q<H:baZj'gXB\D8K?"BA^QKN@C
%<+`W7UoHOb1q$H>7FThrbN`r'Q'SBD`flqZ5cWN5.MfKDnN&M'lQ[aB]e.goBP.KRQNb89CT-HTY4e`%>T=MAA&nco]0;'$lZaYA
%Ho%'N/<pX)MeXZQ&Yse=Y.KITBaJD+`IYul@tL33B?68qkJ`\IY$N20JA0Ol0-F7]L`"uD:1kGbde'cHdD+`b(,s%#79qgU5.'D<
%:8aB$&9mZ#>Ir63;`ia.=o`Xb85;kTY\_h%@_D0_IIRV(DO_Kel2.%\>)s-_@a3B`e0b/^$s+9j@72Jf?4O$9AjgW"Xi$+/a/W,p
%?Fsr];1b^`qh@.ta4mSsY4ViM\3?g/3\J-BSj'6(F)b78)>]r"V5U)p%(feW\._[:C?gDZ1dZUamj3cmBg8.,$`BTi>Lo&/@7[3\
%ASHB]mo9kdF!ce#m0?"SG3O2DX$;SYb3>JtF3!^oLOOZnbf%0t=ht9\bg$d1/=LPagRa0KU\2)Jn&5,#n8$t$NS7S`YL]V]&FrXS
%9l5&mfr!!^1gUTre5Q!Qi/kH,Pq+RA7'e_,.6[`rg<_uWM2*)%@M'$/MOkL6^L@n4A--XrT"EtH3WS+4ml/6Y_FShTn#`m"B-gm3
%dN;2:F\a'G(IX9=dN\)PQ<YJ7-e,ie/2\^QXpSc?XbVG02f4o#.GdDRH*YDK_pkHp.uu<NLh_^<,O-5"3tA=HEJQuX\ql#YQ.$CY
%1NN1snT4D?Q*ZE84u%OYngm]A"JO^`*LUCfXF;4=%ZQs9>Z$m\[Uth\Y1=mKJd'ID%=FG]hSP^\.K5/XHQVr]l.KRo[GDlQ(2=^>
%fef%:hooHbmI80"J/?CT8B-[Vdh8*lX*TIKSp?gir><hQ_Rb+X-f+W/K9TT9<OG&V7#-#*a*-V5LMnJ_.+>k-R]t&*'pOO`DqXBL
%kWHGGD;DR+nn0Le#?F</MhP,'NJ$>j2"*(Fd*)n'J%?eG(gl1Ef&M*n@:Q8VL?^"NFk_MF?/f),'S_bA(:ea+Va;)J:Lr03_-++7
%('%"?H]?h!RrtsIMIMYU@dAdk5PB6NPdYF+@`C4FdVq%>]o(dd]?=JI-OcIX!1;EU&@q[.8C*W'::;XX?W*;G^<Ru#@fGcY5Q)[Y
%+(C\>:];BB"N,a1U'fX/dHE3\8JsXe%G8*G3&=cI86_eA7a[]e3lC#>m#9(!9=Bj^SXihRO%esM1V$L1@#AV.pO?fg;R\*qV=]LV
%Of=m;@htIpBkn->1^p/1,EY']*L,RP.(4"KqKl0+!B5;[h"mU+A3+:@nL-;eK_Z9H.n?$rTcjG+ZO!S3,8_'oZipSU8bp>!$F$X(
%XCnC3RnUrEA(jS?`#:C(,A&/Ek4#q*@p>=9+:Z4jS)P%,+H$_<]8?@1,dJK%/C%.85o.'ng@A+:3ICA1Z4nZe_NRSmNlG:-$)hMD
%bP9RF;#5Gs5&B7_T(I[Q:?CqFYn<"KLLft,)g:XRrf2Tq$!HQ4hZl#b7HMYE&K\%[QjJf]#XOhhfF$(2"5Ei8qm$HNq<:@!\5D6*
%9fmEh)!S9n,PsZNT%;F@A5q;oENZnD%5Y"0rCm@_8L">BreQ#k+B+%JJhsQj<muCBolWe45Z\B[(2-Vm@,2&NjkYfgHmgELkW5cM
%;7`8.jp(0cH>i!cAq%BL^&dG@[lL9,@1$^-,23u;(tFp1h)Z<(_Uga@rSr5USHWEf4LP*/c&@TaRpqsEZU'p>+.e8*+%]KZhN/JF
%cHUtJ9GKdYhK6sB5SL[V"hAf6!/o?9IP>/PW8VZ+"#Y3!iVSDunAZZ+B6Y-=ASe-@V>)N*-)<$h4q/INW([W;"s"*@`8O5Y_!;IN
%K\aW4#%DgWn=sK(?3$G(U%WC2FdladIis4%WYbl!1m7@S+nGc'59&kiUXZuaTl,R66YQm8F.!F.4aYo*pp[==%-;EO[BDL5HoB6s
%E!(cU/#p(%VauN<_BSE5(;Z;&!\Fk/r0)CC/fQ*B'QtBWk]P+aYnI,aAMIF*!:2j30T(g@b.e9J%:%U4Htk"lLMk;55J3qihCb]=
%>^:=A"pXfn>dL1Q7_Wag0fB!NdlaA+8pB4<Duh\SOXAtiaUl82$bL>b]*Vg0d%Yl]:TN2RC^b[S*mV=`4\R4s>k=(8UIZ%4G*qo6
%P_k*D17f%K/n.;-A27ODl2lKuKCHN)nnMPVhZ2GhMhb=\GF]a3_G\;=U*#KQNZE5-e>1+gZ<fB&K"[ZL;88(;+NT8[9>kP(<>%>X
%Ajp>$8fdIW6g0(V#OX,t$2tg1[QB3?,'F&[a&sSe_*D5:r]]^RL/rk"CNkpMElu9I0"X.S`LDA!QX2]d0k*.Rlq:Scq-a;3h@A:A
%o1,a]!VS"A1tO'\H=F0)n?F\f'UYR%@gk>Jjf9$cQRA&gS*]I0^`6+pEfN+\icDrM^0ARG@cVVc?[+"Cro*Ynps>i--);bLX-&q2
%(2;CcV'c;6egN?q5O'nYOP8TfF8>C;43g]6QePq[6^d:UO&k>1Vo*QU\#D5C?">eV$nJTh2oKi7o2m^oj:d&L2FecJ-a"J"i(GF`
%)A?U@76r7JEp8M0C?/M[+Qhj"q'-D1J_NIE(*B/ZEdg2RmHadqU_.s:hYb:aScV=,a!![uWF.*R4AVqHBX7Zd5%/+KK$btp,@kS&
%>t(\sW:pR.rKtAID1t2#SalRVb^&0m^d/_l=#$H$<76SbK0FJ7IJIRXE;*);lK+)<KA_q%*b>UQCL8M7Gs"cl"]i_IcG.u%(Kc-4
%P0)t1cIQ.B+lutlW3>mh=LPF%f(+!gGI^nS"8)1Hn=c8Hcp;kFW*M-cEWS^ICfif<?*u)`7:li":]@GfU!F$C8Cb*?o$bho)b1H#
%Y%".hk)O6ck70+-M7h(eYmE(O:%Bq#N7/NOUGI]MiQg["i<6I+GmkTo0-EfhgEn64R"5*3bYaJDRCp,jq.#)mLVj*aW!HnG$+uf4
%@eo7[-`?-KfrgMj<??`t_9ASOWnm2g(O.h0\3gjb[C5uCS*AJnlKeB4?i8*>rq:9us8FDF%upkWMlZg`1"\-cV>LH4j:6gnp(KRZ
%)@jUgfb6gqYUadEIE:=Fr#6uRU.p[@),U0g$(7gK0bHTRO3"\]XF[PY5/E[Lr>$p`G#)l6Q[5QC]dFF8J6U$LqPa20lWj.MR"TH\
%8-@B%@)m(3ol7X3/%>lo0^QP<fF]FI;7?\U.h8MpegT$*4!WFN0\Ej+7T+t!0s#Z7#(rV1]siV=hkBTFCO&/].L42;IpeSC7XcD;
%9LX]*9b'1>_ij#\?PuBX<C1a_/UdTOYi!O@%)4&<ChK]G2?Z*<G(lDJ^@Efppe0msm0=ae2Y<Nk#5PZHT"@*;k=,UqB@i$jPK*D_
%D3XA96JcUAPitCj31;`8gbTKH2JusEma)5:$2>G(gW[sCR'DK,finO2,B..cdP*1Y,&.ZB%N[Bq2#^s*g&]2]r:g_r!*KpB21Cp!
%Xl0j9iuF=dOJ8dUAc\8k61soq(h,XgIR8M$5O-@%BP3$m&'W3iJEB(&>Ala/O$YEjGW#Eaa,M5Y?"DUG"$%@qMnhfJ3ha=Ml[cDF
%5<]P0fUs\5i?bsjh_5rj2CWB$s.h;pM-M(uX1\.+Dd&t9]!aMgOh#HJcH^0/pBq4_99e@e5'"u:pXaGVn?WAo5HS^G/_>pWlet*/
%n%l"u72HT'Ws.-]a)@It[LFG_29%2&`@SW&SZqi#j<qX,$4EOp]t[YLr::p!0mW`TY7:N>+<>e8--GJ,:5p)'RQ=e]A%nKME5%]>
%BKpt0!N4Z<FOYu0OXj=pM<n"VrBJ1cg14n^1YE1;T2%R_<T"^s<Go2MGK);'[g0H-R"t-cDRS/7d[/>YN8$WA-hN^U$5jT<knJa,
%'ZWkZ%H3rJ(k$ke^cdBn0:P@K9K&GtnJ`rgTH//]($;@hU&16:`&[(=NSc/R";0]'#l9&NY4Wudr0uUA`GbeL^[M3aYCHRZ+$]eo
%?iKheJ,'.pq]C=eqd9?O++O:Y^\d,R^\Nf&s+d6Hk:]'ur;5COi?*RKa'\hdlTb@?pOE,&+9(d@J,JE+J,!r3pg6;5-l`*X[t">u
%rnVMlir9"kq;&+~>
%AI9_PrivateDataEnd
